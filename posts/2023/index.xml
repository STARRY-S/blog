<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2023 on STARRY-S&#39; Blog</title>
    <link>https://blog.starry-s.moe/posts/2023/</link>
    <description>Recent content in 2023 on STARRY-S&#39; Blog</description>
    <image>
      <title>STARRY-S&#39; Blog</title>
      <url>https://blog.starry-s.moe/avatar.png</url>
      <link>https://blog.starry-s.moe/avatar.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>© 2016 - 2024 STARRY-S | [CC BY-NC-ND 4.0](https://creativecommons.org/licenses/by-nc-nd/4.0/) | Hosted on [GitHub Pages](https://pages.github.com)&lt;br /&gt;</copyright>
    <lastBuildDate>Sun, 01 Jan 2023 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.starry-s.moe/posts/2023/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何选择 zip 和 tar 文件格式</title>
      <link>https://blog.starry-s.moe/posts/2023/zip-tar/</link>
      <pubDate>Sun, 12 Nov 2023 01:35:41 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2023/zip-tar/</guid>
      <description>&lt;p&gt;最近遇到了一个归档文件格式选择的问题，于是顺手记录下来水一篇博客。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>最近遇到了一个归档文件格式选择的问题，于是顺手记录下来水一篇博客。</p>
<meting-js server="netease" type="song" id="27594398" theme="#233333"></meting-js>
<hr>
<h2 id="tar-文件格式">tar 文件格式</h2>
<p>tar 格式早期是为了将数据记录在磁带上的（现在貌似也可以？），这种归档格式很简单，要将一个文件写入 tar 包的时候，首先写入记录文件信息的 header，在 header 之后记录文件的数据（tar 格式不支持压缩所以是直接把文件数据拷贝在了 header 后面）。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">+--------+
</span></span><span class="line"><span class="cl">| header |
</span></span><span class="line"><span class="cl">+--------+
</span></span><span class="line"><span class="cl">|  data  |
</span></span><span class="line"><span class="cl">+--------+
</span></span><span class="line"><span class="cl">| header |
</span></span><span class="line"><span class="cl">+--------+
</span></span><span class="line"><span class="cl">|  data  |
</span></span><span class="line"><span class="cl">+--------+
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">+--------+
</span></span><span class="line"><span class="cl">| header |
</span></span><span class="line"><span class="cl">+--------+
</span></span><span class="line"><span class="cl">|  data  |
</span></span><span class="line"><span class="cl">+--------+
</span></span><span class="line"><span class="cl">|  end   |
</span></span><span class="line"><span class="cl">+--------+
</span></span></code></pre></div><p>tar 有多种不同格式的 header。这里可以看 Linux 系统上常用的 <code>tar</code> 工具（GNU tar）代码，
GNU tar 中实现的 header 结构定义文档参考这个 <a href="https://www.gnu.org/software/tar/manual/html_node/Standard.html">Basic Tar Format</a>。</p>
<p>GNU tar 的源码可以通过下面的方式克隆下载下来。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> git clone https://git.savannah.gnu.org/git/tar.git
</span></span></code></pre></div><p>在 <code>src/tar.h</code> 源码中可以找到 header 结构定义，其中 <code>posix_header</code> 的定义为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">posix_header</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>				<span class="cm">/* byte offset */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>		<span class="cm">/*   0 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">mode</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>			<span class="cm">/* 100 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">uid</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>			<span class="cm">/* 108 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">gid</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>			<span class="cm">/* 116 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">size</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span>		<span class="cm">/* 124 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">mtime</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span>		<span class="cm">/* 136 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">chksum</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>		<span class="cm">/* 148 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">typeflag</span><span class="p">;</span>		<span class="cm">/* 156 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">linkname</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>		<span class="cm">/* 157 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">magic</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span>		<span class="cm">/* 257 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">version</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>		<span class="cm">/* 263 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">uname</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>		<span class="cm">/* 265 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">gname</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>		<span class="cm">/* 297 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">devmajor</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>		<span class="cm">/* 329 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">devminor</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>		<span class="cm">/* 337 */</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">prefix</span><span class="p">[</span><span class="mi">155</span><span class="p">];</span>		<span class="cm">/* 345 */</span>
</span></span><span class="line"><span class="cl">				<span class="cm">/* 500 */</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>上面 header 结构可以看出默认情况下文件名 <code>name</code> 长度不能超过 99 (最后一位要存储 <code>\0</code>)，但似乎后面 tar 协议支持了长文件名的情况，至于如何支持的各位感兴趣的可以自行去搜一下。</p>
<p>除了 <code>posix_header</code> 之外，还有 <code>star_header</code>、<code>gnu_header</code> 等 header 结构，header 结构体占据的空间小于 512 字节，而 tar 的每个 block 都是 512 字节，所以一个 header block 占据 512 字节，末尾空余的字节填写 <code>\0</code>，文件也以 512 字节为单位写在 header block 后面，多出来的空间填写 <code>\0</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/* tar files are made in basic blocks of this size.  */</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define BLOCKSIZE 512
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">union</span> <span class="n">block</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="n">BLOCKSIZE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">posix_header</span> <span class="n">header</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">star_header</span> <span class="n">star_header</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">oldgnu_header</span> <span class="n">oldgnu_header</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">sparse_header</span> <span class="n">sparse_header</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">star_in_header</span> <span class="n">star_in_header</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">star_ext_header</span> <span class="n">star_ext_header</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div><p>tar 文件的 end 是由至少两个 block size （1024字节）的空白（<code>\0</code>）组成，但是 GNU tar 创建出来的 tar 包的 end 长度可能大于两个 block size，因为似乎它创建的 tar 包的文件体积以 10K 为单位进行了对齐，可以用下面的方式验证一下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> <span class="nb">echo</span> <span class="s2">&#34;hello world&#34;</span> &gt; 1.txt
</span></span><span class="line"><span class="cl"><span class="gp">$</span> tar -cv 1.txt -f test.tar
</span></span><span class="line"><span class="cl"><span class="go">1.txt
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> ls -al test.tar
</span></span><span class="line"><span class="cl"><span class="go">-rw-r--r-- 1 starry-s starry-s 10K Nov 12 11:42 test.tar
</span></span></span></code></pre></div><p>用 <code>hexdump</code> 可以看一下创建的 tar 包中包含的数据：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> hexdump -C ./test.tar
</span></span><span class="line"><span class="cl"><span class="go">0000000   1   .   t   x   t  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0
</span></span></span><span class="line"><span class="cl"><span class="go">0000010  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0
</span></span></span><span class="line"><span class="cl"><span class="go">*
</span></span></span><span class="line"><span class="cl"><span class="go">0000060  \0  \0  \0  \0   0   0   0   0   6   4   4  \0   0   0   0   1
</span></span></span><span class="line"><span class="cl"><span class="go">0000070   7   5   0  \0   0   0   0   1   7   5   0  \0   0   0   0   0
</span></span></span><span class="line"><span class="cl"><span class="go">0000080   0   0   0   0   0   1   4  \0   1   4   5   2   4   0   4   5
</span></span></span><span class="line"><span class="cl"><span class="go">0000090   3   5   4  \0   0   1   2   1   1   2  \0       0  \0  \0  \0
</span></span></span><span class="line"><span class="cl"><span class="go">00000a0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0
</span></span></span><span class="line"><span class="cl"><span class="go">*
</span></span></span><span class="line"><span class="cl"><span class="go">0000100  \0   u   s   t   a   r          \0   s   t   a   r   r   y   -
</span></span></span><span class="line"><span class="cl"><span class="go">0000110   s  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0
</span></span></span><span class="line"><span class="cl"><span class="go">0000120  \0  \0  \0  \0  \0  \0  \0  \0  \0   s   t   a   r   r   y   -
</span></span></span><span class="line"><span class="cl"><span class="go">0000130   s  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0
</span></span></span><span class="line"><span class="cl"><span class="go">0000140  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0
</span></span></span><span class="line"><span class="cl"><span class="go">*
</span></span></span><span class="line"><span class="cl"><span class="go">0000200   h   e   l   l   o       w   o   r   l   d  \n  \0  \0  \0  \0
</span></span></span><span class="line"><span class="cl"><span class="go">0000210  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0
</span></span></span><span class="line"><span class="cl"><span class="go">*
</span></span></span><span class="line"><span class="cl"><span class="go">0002800
</span></span></span></code></pre></div><p>其中前 <code>0x200</code> 长度 (512 bytes) 存储的是 header，<code>0x200</code> ~ <code>0x2800</code> (10240 bytes) 区域存储了文件的数据 (<code>hello world\n</code>)，文件数据后面均为空白 <code>\0</code>，整体的 tar 包文件大小对齐到了 10K。</p>
<h3 id="栗子">栗子</h3>
<p>因此这里可以用上面的 <code>posix_header</code> 结构体简单的写一个创建 tar 归档的程序。</p>
<p>因为 header 中还包含了简易的计算 header 校验和的步骤，所以代码比较长，可以在 <a href="https://github.com/STARRY-S/tar-example-c">这里</a> 找到。</p>
<h3 id="压缩">压缩</h3>
<p>在创建 tar 格式的文件时是不支持压缩的，文件的数据直接写在了 header 后面（除非你想魔改创建 tar 格式的步骤，但没这个必要）。如果需要压缩的话是把整个 tar 归档用 gzip/bzip2/zstd 等其他压缩格式进行压缩，文件后缀为 <code>tar.gz/tar.bz2/tar.zstd</code> 等。因为是先将文件写入 tar 归档，再将 tar 归档进行压缩，所以压缩的效果会比把文件单独压缩再合并成一个 tar 包效果要好一些。</p>
<h3 id="特点">特点</h3>
<p>从上面的 tar 归档文件格式可以看出，tar 包中的文件是一个一个顺序排列起来的，因此 tar 包中是允许两个相同名称的文件存在的。</p>
<p>如果想向 tar 包末尾附加新的文件的话也很简单，只需要找到末尾的 end block，将其覆盖重写新的文件的 header，之后再写入新文件的数据即可，因此向未压缩的 tar 包附加新的文件（甚至是覆盖掉末尾的一些文件）都是可行的。但是如果想向已压缩的 tar 包（例如 <code>tar.gz</code>）附加文件就不太可行了，除非先把 <code>tar.gz</code> 解压为 <code>tar</code> 格式，附加新的文件后再重新压缩成 <code>tar.gz</code>，但这样如果 tar 文件体积很大的话会造成额外的磁盘空间浪费和性能、时间的浪费。</p>
<p>还有一点是 tar 中存储的文件是顺序排列起来的，但他没有一个 index 索引记录了每个文件的 header 所处的 offset。所以如果想知道一个 tar 包里面存了哪些文件的话，要从头到尾的遍历一遍 tar 包，因此如果这个 tar 包文件体积很大且包含很多零散的小文件的话，每次都要遍历读取 tar 包中的所有 header，会很麻烦。</p>
<p>因此 tar 包不适合随机读取，未压缩的 tar 包还好，只要在首次打开文件时遍历一下把每个文件的 header 和 offset 记录下来就行，但如果是压缩过的例如 <code>tar.gz</code> 格式的压缩包，几乎就没办法随机读取（除非你得再去折腾 <code>gzip</code> 数据流，但几乎没人去这么做），如果想随机解压 <code>tar.gz</code> 中的某个文件，要从头开始先解压 <code>gzip</code> 数据流，从解压的数据流中遍历每个 tar header，在查找到待解压的文件 header 后再将其解压存储下来，麻烦得很！</p>
<p>所以 <code>tar</code> 以及 <code>tar.gz</code> 等压缩的 <code>tar</code> 归档格式通常适合用在不需要随机读取，不需要向归档末尾附加文件的场景。</p>
<h2 id="zip-文件格式">zip 文件格式</h2>
<p>zip 压缩包中文件的布局也是依次顺序排列的，文件的 data 可以是未压缩的文件原始数据 (<code>Store</code>)，或者是使用 Deflate 算法压缩后的文件数据。
在 zip 文件末尾还有一块区域，记录了每个文件 header 的索引信息，叫做 <code>directory</code> (<code>central directory record</code>)，<code>directory</code> 后面还有一小块区域用来记录 <code>directory</code> 的长度和数量等信息 (<code>end of central directory record</code>)。</p>
<p>zip 压缩包中文件的数据布局简单描述一下是这个样子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">+---------------+
</span></span><span class="line"><span class="cl">| header        |
</span></span><span class="line"><span class="cl">+---------------+
</span></span><span class="line"><span class="cl">| data          |
</span></span><span class="line"><span class="cl">+---------------+
</span></span><span class="line"><span class="cl">| header        |
</span></span><span class="line"><span class="cl">+---------------+
</span></span><span class="line"><span class="cl">| data          |
</span></span><span class="line"><span class="cl">+---------------+
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">+---------------+
</span></span><span class="line"><span class="cl">| header        |
</span></span><span class="line"><span class="cl">+---------------+
</span></span><span class="line"><span class="cl">| data          |
</span></span><span class="line"><span class="cl">+---------------+
</span></span><span class="line"><span class="cl">| directory     |
</span></span><span class="line"><span class="cl">+---------------+
</span></span><span class="line"><span class="cl">| directory     |
</span></span><span class="line"><span class="cl">+---------------+
</span></span><span class="line"><span class="cl">....
</span></span><span class="line"><span class="cl">+---------------+
</span></span><span class="line"><span class="cl">| directory     |
</span></span><span class="line"><span class="cl">+---------------+
</span></span><span class="line"><span class="cl">| directory end |
</span></span><span class="line"><span class="cl">+---------------+
</span></span></code></pre></div><p>详细的 <code>zip</code> 文件格式定义在 <a href="https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT">这里</a>，因为 <code>zip</code> 包中，每个文件的 header 长度是不固定，而且还分为早期的 <code>zip</code> 和后续新增的 <code>zip64</code> 两种格式，手搓代码还蛮复杂的，图省事咱就不写样例代码了。</p>
<h3 id="特点-1">特点</h3>
<p>所以 <code>zip</code> 格式支持随机读取，如果想知道 <code>zip</code> 中存储了多少文件的话，只需要读取文件末尾的 <code>directory</code>。和 <code>tar</code> 一样 <code>zip</code> 也允许存在多个重名的文件。
而 <code>zip</code> 中存储的文件如果压缩的话，是每个文件单独压缩再写入到 <code>zip</code> 归档的，所以压缩的效果会较 <code>tar</code> 把所有文件都打包到一起再压缩要差些。</p>
<p>如果想向已有的 <code>zip</code> 压缩包中增加新的文件，需要将新文件 header 和数据从 <code>directory</code> 处覆盖掉，最后重新在文件末尾写入新的 <code>directory record</code>。</p>
<p>所以 zip 看起来比 tar 格式要更灵活一些，支持随机读取，同时还支持在不解压整个压缩包的情况下，增加新的文件。</p>
<p>zip 支持 Deflate 压缩算法或 Store 不压缩仅存储文件原始数据这两种方式。Deflate 压缩算法与 <code>gzip</code> 使用的 Deflate 压缩算法是一个东西。区别就是 zip 是把文件单独用 Deflate 算法压缩，存储起来，而 <code>tar.gz</code> 是将所有文件先打包到一起，再用 Deflate 算法压缩。</p>
<h2 id="背景">背景</h2>
<p>上面说了这么多，zip 和 tar 的区别读着应该都已经清楚了。下面咱讲一下为什么要调查这个问题，写这篇博客，不感兴趣的话可以浏览器右上角关掉这个页面节省时间。</p>
<p>起初是咱写了一个将容器镜像的 Blobs 文件导入/导出成一个压缩包的工具（类似 <code>docker save/load</code>，但是要支持多架构和多平台一起导出）（关于这个工具等咱逐渐完善后有时间的话打算单独再写一篇博客），一开始用的是 <code>tar.gz</code> 格式压缩。导出的逻辑是先把容器镜像的 Blobs (Layers, Manifest 和 Config) 文件先全部下载到本地，之后把这这些巨大的文件打包成一个 <code>tar.gz</code> 压缩包。逻辑上没什么问题，但是容器镜像普遍体积不小，尤其是要导出上百个镜像时，最后创建的 tar 包体积要几十个 GB。所以先把 Blobs 文件下载到本地占用了一次磁盘空间，再把本地未打包的 Blobs 文件打包成一个 tar 包又占用了一次空间。最后搞得磁盘被占据了双倍的空间。</p>
<p>这还不算什么，如果在导出容器镜像时有时会遇到网络问题或其他因素导致某些镜像 Blobs 导出失败，这样导出生成的压缩包是一个不完整的 <code>tar.gz</code> 包，而咱想向已有的 <code>tar.gz</code> 包附加新的镜像 Blobs 文件的话就得把原有的压缩包解压，写入新的文件，再重新打包，体验极其不友好，咱自己用还行，但要是想把工具拿给别人用的话，光是给别人讲背后的逻辑就得磨叽半天，而且本来一个命令就能解决的问题却非要拆成先解压、再追加额外的 Blobs 文件、最后重新压缩这好几个步骤，而且很多时候因为镜像体积太大了解压和压缩很耗时，还会浪费巨多的磁盘空间，很多时候用户根本不知道要给磁盘预留这么大的空间而导致解压到一半失败了。</p>
<p><img loading="lazy" src="images/dev-user.gif" alt="" />

</p>
<p>所以为了解决这个问题，咱想办法在导出镜像时，采用实时写入的方式，在镜像的 Blobs 文件下载到本地后直接写入到压缩包文件中，而不是先把所有镜像的 Blobs 文件下载下来，再把下载的缓存文件夹打一个压缩包。这样导出镜像时消耗双倍磁盘空间的问题倒是解决了，而且还可以用多线程提个速。
但正如上面说的那样，<code>tar.gz</code> 格式的压缩包在创建完成后就没办法增加新的文件了，这期间咱想过要不换成不压缩的 <code>tar</code> 格式而不是 <code>tar.gz</code> 格式，因为大多数镜像的 Layer 文件本身是已经有 <code>gzip</code> 压缩的了，没必要二次压缩，但是镜像的 Config 和 Manifest 通常是未压缩的文本文件，会有一点额外体积开销。
这种方法看似可行，但因为 <code>tar</code> 他缺少文件索引，所以如果我想按照一份镜像列表按顺序依次将 <code>tar</code> 中存储的 Blobs 文件导入到镜像仓库中，就得遍历构建一遍 <code>tar</code> 包中的所有文件 header，程序中自行存一份索引，还是有点麻烦。</p>
<p>所以最后在 Google 上搜有没有带索引、可以随机读取还支持附加文件的压缩归档文件格式时，重新熟悉了一下 <code>zip</code> 的结构和特点。</p>
<p>因为咱的程序是用 Go 写的，Go 官方标准库提供了 <code>archive/tar</code> 和 <code>archive/zip</code>，用来创建/读取 tar 和 zip 归档。但是 Go 标准库不支持向 tar 包和 zip 包中附加额外的文件，tar 附加额外文件的方式蛮简单的所以不需要在修改标准库的基础上就能实现追加文件（只需要移除文件末尾的 end blocks）。但是 zip 想追加文件的话，就得先读取文件末尾存储的 <code>directory</code> 索引记录存储起来，附加完文件后再重新在文件末尾写入新的 <code>directory</code> 索引。</p>
<p>几年前有人向 Go 提过这个 <a href="https://github.com/golang/go/issues/15626">Issue</a>，希望标准库能实现 zip append 文件的功能。
因为 Go 的 <code>zip.Reader</code> 是使用了 Go 的 <code>io.ReaderAt</code> 接口实现的，<code>zip.Writer</code> 是用 <code>io.Writer</code> 实现的。</p>
<p>Go 标准库中提供的 <code>io.ReaderAt</code> 和 <code>io.WriterAt</code> 接口可以看作是参考了 POSIX 协议的 C 接口 <a href="https://man7.org/linux/man-pages/man2/pread.2.html">pread/pwrite</a>（Go 的 Interface 和这个系统调用的 Interface 不是一个东西），<code>pread</code> 可以读取文件中指定 offset 和长度的数据，并不改变文件自身的 seek offset。因为读取 zip 文件时要先读取文件末尾的 <code>directory</code>，所以用 <code>io.ReaderAt</code> 接口实现很合理。而创建 zip 文件时，要按顺序写入文件 header 和 data，最后在文件末尾写入 directory 信息，所以用 <code>io.Writer</code> 也很合理。</p>
<p>但是如果想向 zip 附加文件的话，就得先用一个类似 <code>io.ReaderAt</code> 接口读取文件末尾已有的 <code>directiory</code> 记录，之后用类似 <code>io.WriterAt</code> 接口向文件末尾的位置写数据。而偏偏 Go 标准库没有 <code>io.ReadWriterAt</code> 这样的接口（就是把 <code>io.ReaderAt</code> 和 <code>io.WriterAt</code> 结合一起），所以最终这个 Issue 因为需要涉及到 Go 其他 <code>io</code> 接口的改动而无法实现关闭掉了。这里额外补充一下，Go 的 zip 标准库是用来对数据流进行操作的，而并非单纯的 zip 文件，所以只要实现了 <code>io.ReaderAt</code> 接口的“对象”都可以被 zip 库“解压”，所有实现了 <code>io.Writer</code> 的“对象”都可以写入 zip 数据。</p>
<p>所以最后没办法，为了能够让咱写的工具支持在不解压 zip 文件的前提下增添新的文件的功能，只能自行造轮子，在 Go <code>archive/zip</code> 标准库的基础上增加了一个 <code>zip.Updater</code>。因为 Go 他确实没有 <code>io.ReadWriterAt</code> 这样的接口，但是 Go 他有 <code>io.ReadWriteSeeker</code> 这个接口，所以在不涉及到多线程竞争访问（或者加锁）的情况下，可以用这个接口实现 <code>zip.Updater</code>，向 zip 包附加额外文件的功能。</p>
<p>在搞这些东西的时候刚好赶上公司的 HackWeek，本来咱已经创建了一个 HackWeek Project，就是上面咱说的容器镜像导入/导出工具的开发这些事情。所以咱在这个基础上又创建了一个新的 HackWeek Project，就是在 Go <code>archive/zip</code> 标准库基础上新增 <code>zip.Updater</code> 相关功能，链接我扔在 <a href="https://hackweek.opensuse.org/23/projects/go-zip-updator-appending-new-files-to-zip-archive-without-decompressing-the-whole-file">这里</a>，感兴趣的话可以去瞅瞅。</p>
<p>最终咱实现了 <code>Updater</code> 的代码仓库在 <a href="https://github.com/STARRY-S/zip">这里</a>，感兴趣的可以去看看，点个 star 什么的。因为基于 <code>io.ReadWriteSeeker</code> 实现的 <code>zip.Updater</code> 并不是最优解，最正确的方式是 Go 什么时候出一个类似 <code>io.ReadWriterAt</code> 接口，在不用改变 <code>Seek</code> 的前提下就能读取/写入指定 offset 的数据，加上自认为咱的程序设计水平还赶不上 Go 维护者，所以咱想了一下就还是先不提 PR 给 Go 源码仓库了。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>修复缩小磁盘空间后受损的 GPT 分区表</title>
      <link>https://blog.starry-s.moe/posts/2023/fix-shrunken-disk-broken-partition-table/</link>
      <pubDate>Wed, 18 Oct 2023 21:42:02 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2023/fix-shrunken-disk-broken-partition-table/</guid>
      <description>&lt;p&gt;磁盘的扩容和分区的扩/缩容场景很常见，比如分区用着用着快满了，而磁盘有空闲的未分区空间，而这块区域恰好在这块分区的后面，这时可以对分区扩容。
在使用虚拟机（例如 QEMU）时，假设起初虚拟机的磁盘只创建了 20G，但用久了会存在不够用的情况，这时可以对磁盘扩容，之后再调整分区的大小。&lt;/p&gt;
&lt;p&gt;但是最近遇到了一个需要对磁盘缩容的场景，例如把一个 64G 的 U 盘用 &lt;code&gt;dd&lt;/code&gt; 将整个磁盘的数据写入到一个 8G 的 U盘中（当然这个 64G U盘实际使用的分区大小不能大于前 8G）。
或者要把一个原本 50G 的 qcow2 虚拟磁盘缩小成 10G，用来制作别的镜像什么的。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>磁盘的扩容和分区的扩/缩容场景很常见，比如分区用着用着快满了，而磁盘有空闲的未分区空间，而这块区域恰好在这块分区的后面，这时可以对分区扩容。
在使用虚拟机（例如 QEMU）时，假设起初虚拟机的磁盘只创建了 20G，但用久了会存在不够用的情况，这时可以对磁盘扩容，之后再调整分区的大小。</p>
<p>但是最近遇到了一个需要对磁盘缩容的场景，例如把一个 64G 的 U 盘用 <code>dd</code> 将整个磁盘的数据写入到一个 8G 的 U盘中（当然这个 64G U盘实际使用的分区大小不能大于前 8G）。
或者要把一个原本 50G 的 qcow2 虚拟磁盘缩小成 10G，用来制作别的镜像什么的。</p>
<meting-js server="netease" type="song" id="1348679974" theme="#233333"></meting-js>
<p>按照正常的思路，缩小磁盘空间之前要先缩小分区（还要缩小文件系统），确保分区都位于磁盘的前面，这样磁盘在截断后文件系统不会受损，大致步骤可以分为：</p>
<ol>
<li>
<p>缩小文件系统：例如使用 <code>btrfs filesystem resize</code> 缩小 BTRFS 文件系统至待缩小的分区的大小，确保文件系统的大小不超过分区大小。</p>
</li>
<li>
<p>缩小分区：可以使用 <code>fdisk</code> 先删掉待缩小的分区，之后再重新创建新的分区，重建分区时设定新的分区的大小，且不要删除已有的 <code>btrfs</code> 或其他文件系统签名。这样在缩小分区的同时，不需要重新格式化，因此分区中的文件没有丢失。</p>
<p>（除了 <code>fdisk</code>，还可以用 <code>sfdisk</code>，<code>gdisk</code> 或 <code>parted</code> 等工具调整分区）</p>
</li>
<li>
<p>确保分区都位于磁盘的起始位置后，执行磁盘缩小的操作，将磁盘末端未使用的数据截断。</p>
</li>
</ol>
<p>GPT / MBR 分区表咱凭感觉来猜的话，是存储在磁盘的起始位置的，所以如果磁盘缩小时，将磁盘末端一些数据截断正常情况下应该是不会影响到存储在起始位置的分区表的。</p>
<p>但是，在一些情况下，会出现缩小完磁盘空间后分区表受损的情况。</p>
<h2 id="举个栗子">举个栗子</h2>
<ol>
<li>
<p>首先使用 <code>qemu-img create</code> 创建一块 10G 的 QEMU 虚拟机磁盘。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> qemu-img create -f qcow2 disk1.qcow2 10G
</span></span><span class="line"><span class="cl"><span class="go">Formatting &#39;disk1.qcow2&#39;, fmt=qcow2 cluster_size=65536 extended_l2=off compression_type=zlib size=10737418240 lazy_refcounts=off refcount_bits=16
</span></span></span></code></pre></div></li>
<li>
<p>使用 <code>qemu-nbd</code> 工具将 qcow2 磁盘镜像与 Linux 内核通过 <a href="https://www.kernel.org/doc/Documentation/blockdev/nbd.txt">nbd</a> 连接，这样可以在不启动 QEMU 虚拟机的情况下直接对 qcow2 磁盘分区进行操作。</p>
<p>加载 <code>nbd</code> 内核模块，其中 <code>max_part</code> 参数是磁盘允许的最大分区数，默认为 0 所以这里需要把数值改大一点。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> sudo modprobe nbd <span class="nv">max_part</span><span class="o">=</span><span class="m">8</span>
</span></span></code></pre></div><p>将创建的 <code>disk1.qcow2</code> 镜像与 <code>/dev/nbd0</code> 连接。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> sudo qemu-nbd -c /dev/nbd0 ./disk1.qcow2
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">$</span> lsblk /dev/nbd0
</span></span><span class="line"><span class="cl"><span class="go">NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS
</span></span></span><span class="line"><span class="cl"><span class="go">nbd0  43:0    0  10G  0 disk
</span></span></span></code></pre></div><p>使用 <code>fdisk</code> 初始化 GPT 分区表，并随便新建几个分区。</p>
<blockquote>
<p>咱都是 Arch Linux 用户了，fdisk 就不用我再详细说了吧。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> sudo fdisk /dev/nbd0
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Welcome to fdisk (util-linux 2.39.2).
</span></span></span><span class="line"><span class="cl"><span class="go">Changes will remain in memory only, until you decide to write them.
</span></span></span><span class="line"><span class="cl"><span class="go">Be careful before using the write command.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Device does not contain a recognized partition table.
</span></span></span><span class="line"><span class="cl"><span class="go">Created a new DOS (MBR) disklabel with disk identifier 0xf5c43a4b.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Command (m for help): g
</span></span></span><span class="line"><span class="cl"><span class="go">Created a new GPT disklabel (GUID: 2EB767AB-0958-461B-B56D-697B3305AC83).
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Command (m for help): n
</span></span></span><span class="line"><span class="cl"><span class="go">Partition number (1-128, default 1):
</span></span></span><span class="line"><span class="cl"><span class="go">First sector (2048-20971486, default 2048):
</span></span></span><span class="line"><span class="cl"><span class="go">Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-20971486, default 20969471): +512M
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Created a new partition 1 of type &#39;Linux filesystem&#39; and of size 512 MiB.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Command (m for help): t
</span></span></span><span class="line"><span class="cl"><span class="go">Selected partition 1
</span></span></span><span class="line"><span class="cl"><span class="go">Partition type or alias (type L to list all): 1
</span></span></span><span class="line"><span class="cl"><span class="go">Changed type of partition &#39;Linux filesystem&#39; to &#39;EFI System&#39;.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Command (m for help): n
</span></span></span><span class="line"><span class="cl"><span class="go">Partition number (2-128, default 2):
</span></span></span><span class="line"><span class="cl"><span class="go">First sector (1050624-20971486, default 1050624):
</span></span></span><span class="line"><span class="cl"><span class="go">Last sector, +/-sectors or +/-size{K,M,G,T,P} (1050624-20971486, default 20969471):
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Created a new partition 2 of type &#39;Linux filesystem&#39; and of size 9.5 GiB.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Command (m for help): w
</span></span></span><span class="line"><span class="cl"><span class="go">The partition table has been altered.
</span></span></span><span class="line"><span class="cl"><span class="go">Calling ioctl() to re-read partition table.
</span></span></span><span class="line"><span class="cl"><span class="go">Syncing disks.
</span></span></span></code></pre></div><p>本栗中，磁盘新建了两个分区，<code>/dev/nbd0p1</code> 是 512M 大小的 EFI 分区，剩余空间 <code>/dev/nbd0p2</code> 是 root 分区。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> sudo fdisk -l /dev/nbd0
</span></span><span class="line"><span class="cl"><span class="go">Disk /dev/nbd0: 10 GiB, 10737418240 bytes, 20971520 sectors
</span></span></span><span class="line"><span class="cl"><span class="go">Units: sectors of 1 * 512 = 512 bytes
</span></span></span><span class="line"><span class="cl"><span class="go">Sector size (logical/physical): 512 bytes / 512 bytes
</span></span></span><span class="line"><span class="cl"><span class="go">I/O size (minimum/optimal): 512 bytes / 512 bytes
</span></span></span><span class="line"><span class="cl"><span class="go">Disklabel type: gpt
</span></span></span><span class="line"><span class="cl"><span class="go">Disk identifier: 2EB767AB-0958-461B-B56D-697B3305AC83
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Device        Start      End  Sectors  Size Type
</span></span></span><span class="line"><span class="cl"><span class="go">/dev/nbd0p1    2048  1050623  1048576  512M EFI System
</span></span></span><span class="line"><span class="cl"><span class="go">/dev/nbd0p2 1050624 20969471 19918848  9.5G Linux filesystem
</span></span></span></code></pre></div><p>之后简单的格式化一下两个分区，挂载并往里面写一些文件进去。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> sudo mkfs.vfat -F <span class="m">32</span> /dev/nbd0p1
</span></span><span class="line"><span class="cl"><span class="go">mkfs.fat 4.2 (2021-01-31)
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">$</span> sudo mkfs.btrfs /dev/nbd0p2
</span></span><span class="line"><span class="cl"><span class="go">btrfs-progs v6.5.2
</span></span></span><span class="line"><span class="cl"><span class="go">See https://btrfs.readthedocs.io for more information.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Performing full device TRIM /dev/nbd0p2 (9.50GiB) ...
</span></span></span><span class="line"><span class="cl"><span class="go">NOTE: several default settings have changed in version 5.15, please make sure
</span></span></span><span class="line"><span class="cl"><span class="go">    this does not affect your deployments:
</span></span></span><span class="line"><span class="cl"><span class="go">    - DUP for metadata (-m dup)
</span></span></span><span class="line"><span class="cl"><span class="go">    - enabled no-holes (-O no-holes)
</span></span></span><span class="line"><span class="cl"><span class="go">    - enabled free-space-tree (-R free-space-tree)
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Label:              (null)
</span></span></span><span class="line"><span class="cl"><span class="go">UUID:               a5fb30e5-eb5f-4a0b-8d2a-106e04e1488b
</span></span></span><span class="line"><span class="cl"><span class="go">Node size:          16384
</span></span></span><span class="line"><span class="cl"><span class="go">Sector size:        4096
</span></span></span><span class="line"><span class="cl"><span class="go">Filesystem size:    9.50GiB
</span></span></span><span class="line"><span class="cl"><span class="go">Block group profiles:
</span></span></span><span class="line"><span class="cl"><span class="go">Data:             single            8.00MiB
</span></span></span><span class="line"><span class="cl"><span class="go">Metadata:         DUP             256.00MiB
</span></span></span><span class="line"><span class="cl"><span class="go">System:           DUP               8.00MiB
</span></span></span><span class="line"><span class="cl"><span class="go">SSD detected:       yes
</span></span></span><span class="line"><span class="cl"><span class="go">Zoned device:       no
</span></span></span><span class="line"><span class="cl"><span class="go">Incompat features:  extref, skinny-metadata, no-holes, free-space-tree
</span></span></span><span class="line"><span class="cl"><span class="go">Runtime features:   free-space-tree
</span></span></span><span class="line"><span class="cl"><span class="go">Checksum:           crc32c
</span></span></span><span class="line"><span class="cl"><span class="go">Number of devices:  1
</span></span></span><span class="line"><span class="cl"><span class="go">Devices:
</span></span></span><span class="line"><span class="cl"><span class="go">   ID        SIZE  PATH
</span></span></span><span class="line"><span class="cl"><span class="go">    1     9.50GiB  /dev/nbd0p2
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">$</span> mkdir -p mnt
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo mount /dev/nbd0p2 mnt
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo mkdir ./mnt/<span class="o">{</span>boot,home<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo mount /dev/nbd0p1 mnt/boot
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo touch ./mnt/example.txt
</span></span></code></pre></div></li>
<li>
<p>使用 <code>btrfs filesystem resize</code> 缩小 root 分区中的 BTRFS 文件系统大小至 7G，之后使用 <code>fdisk</code> 缩小 root 分区大小至 7G。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> sudo btrfs filesystem resize 7G mnt
</span></span><span class="line"><span class="cl"><span class="go">Resize device id 1 (/dev/nbd0p2) from 9.50GiB to 7.00GiB
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> sudo sync
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo umount -R ./mnt
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo fdisk /dev/nbd0
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Welcome to fdisk (util-linux 2.39.2).
</span></span></span><span class="line"><span class="cl"><span class="go">Changes will remain in memory only, until you decide to write them.
</span></span></span><span class="line"><span class="cl"><span class="go">Be careful before using the write command.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Command (m for help): d
</span></span></span><span class="line"><span class="cl"><span class="go">Partition number (1,2, default 2): 2
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Partition 2 has been deleted.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Command (m for help): n
</span></span></span><span class="line"><span class="cl"><span class="go">Partition number (2-128, default 2):
</span></span></span><span class="line"><span class="cl"><span class="go">First sector (1050624-20971486, default 1050624):
</span></span></span><span class="line"><span class="cl"><span class="go">Last sector, +/-sectors or +/-size{K,M,G,T,P} (1050624-20971486, default 20969471): +7G
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Created a new partition 2 of type &#39;Linux filesystem&#39; and of size 7 GiB.
</span></span></span><span class="line"><span class="cl"><span class="go">Partition #2 contains a btrfs signature.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Do you want to remove the signature? [Y]es/[N]o: N
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Command (m for help): w
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">The partition table has been altered.
</span></span></span><span class="line"><span class="cl"><span class="go">Calling ioctl() to re-read partition table.
</span></span></span><span class="line"><span class="cl"><span class="go">Syncing disks.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">$</span> sudo fdisk -l /dev/nbd0
</span></span><span class="line"><span class="cl"><span class="go">Disk /dev/nbd0: 10 GiB, 10737418240 bytes, 20971520 sectors
</span></span></span><span class="line"><span class="cl"><span class="go">Units: sectors of 1 * 512 = 512 bytes
</span></span></span><span class="line"><span class="cl"><span class="go">Sector size (logical/physical): 512 bytes / 512 bytes
</span></span></span><span class="line"><span class="cl"><span class="go">I/O size (minimum/optimal): 512 bytes / 512 bytes
</span></span></span><span class="line"><span class="cl"><span class="go">Disklabel type: gpt
</span></span></span><span class="line"><span class="cl"><span class="go">Disk identifier: 2EB767AB-0958-461B-B56D-697B3305AC83
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Device        Start      End  Sectors  Size Type
</span></span></span><span class="line"><span class="cl"><span class="go">/dev/nbd0p1    2048  1050623  1048576  512M EFI System
</span></span></span><span class="line"><span class="cl"><span class="go">/dev/nbd0p2 1050624 15730687 14680064    7G Linux filesystem
</span></span></span></code></pre></div><p>调整完分区大小后，因为这里没有移除 BTRFS 签名，所以分区的文件没有被删除，执行 <code>lsblk -no NAME,UUID /dev/nbd0</code> 可以看到 <code>/dev/nbd0p2</code> 的 UUID 也没有变化，和上面执行 <code>mkfs.btrfs</code> 时输出的一致。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> lsblk -no NAME,UUID /dev/nbd0
</span></span><span class="line"><span class="cl"><span class="go">nbd0
</span></span></span><span class="line"><span class="cl"><span class="go">├─nbd0p1 C6B7-EF70
</span></span></span><span class="line"><span class="cl"><span class="go">└─nbd0p2 a5fb30e5-eb5f-4a0b-8d2a-106e04e1488b
</span></span></span></code></pre></div></li>
<li>
<p>断开 NBD 连接，缩小 qcow2 磁盘大小到 8G。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> sudo qemu-nbd -d /dev/nbd0
</span></span><span class="line"><span class="cl"><span class="go">/dev/nbd0 disconnected
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> qemu-img resize ./disk1.qcow2 --shrink 8G
</span></span><span class="line"><span class="cl"><span class="go">Image resized.
</span></span></span></code></pre></div></li>
<li>
<p>重新将 qcow2 磁盘连接到 <code>/dev/nbd0</code>，会发现上面创建的磁盘中的几块分区不见了！</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> sudo qemu-nbd -c /dev/nbd0 ./disk1.qcow2
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo fdisk -l /dev/nbd0
</span></span><span class="line"><span class="cl"><span class="go">GPT PMBR size mismatch (20971519 != 16777215) will be corrected by write.
</span></span></span><span class="line"><span class="cl"><span class="go">Disk /dev/nbd0: 8 GiB, 8589934592 bytes, 16777216 sectors
</span></span></span><span class="line"><span class="cl"><span class="go">Units: sectors of 1 * 512 = 512 bytes
</span></span></span><span class="line"><span class="cl"><span class="go">Sector size (logical/physical): 512 bytes / 512 bytes
</span></span></span><span class="line"><span class="cl"><span class="go">I/O size (minimum/optimal): 512 bytes / 512 bytes
</span></span></span><span class="line"><span class="cl"><span class="go">Disklabel type: dos
</span></span></span><span class="line"><span class="cl"><span class="go">Disk identifier: 0x00000000
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Device      Boot Start      End  Sectors Size Id Type
</span></span></span><span class="line"><span class="cl"><span class="go">/dev/nbd0p1          1 16777215 16777215   8G ee GPT
</span></span></span></code></pre></div><p><code>fdisk</code> 输出中包含一条错误提示：<code>GPT PMBR size mismatch (20971519 != 16777215) will be corrected by write.</code>，大致意思是 GPT 分区表中记录的区块数量 (sectors) 和磁盘实际的区块数不一致。</p>
</li>
</ol>
<h2 id="修复受损的分区表">修复受损的分区表</h2>
<p>所以修复上面栗子中受损的 GPT 分区表的办法是，重新建一个 GPT 分区表，并按照之前的分区位置，重建分区。</p>
<p>这里重建分区时要注意，需要输入精确的区块位置，而不是类似 <code>+50M</code> 这样模糊的值。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> sudo fdisk /dev/nbd0
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Welcome to fdisk (util-linux 2.39.2).
</span></span></span><span class="line"><span class="cl"><span class="go">Changes will remain in memory only, until you decide to write them.
</span></span></span><span class="line"><span class="cl"><span class="go">Be careful before using the write command.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">GPT PMBR size mismatch (20971519 != 16777215) will be corrected by write.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Command (m for help): g
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Created a new GPT disklabel (GUID: 3C587DB1-5978-45D2-AB05-9135D273D06D).
</span></span></span><span class="line"><span class="cl"><span class="go">The device contains &#39;PMBR&#39; signature and it will be removed by a write command. See fdisk(8) man page and --wipe option for more details.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Command (m for help): n
</span></span></span><span class="line"><span class="cl"><span class="go">Partition number (1-128, default 1):
</span></span></span><span class="line"><span class="cl"><span class="go">First sector (2048-16777182, default 2048):
</span></span></span><span class="line"><span class="cl"><span class="go">Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-16777182, default 16775167): 1050623
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Created a new partition 1 of type &#39;Linux filesystem&#39; and of size 512 MiB.
</span></span></span><span class="line"><span class="cl"><span class="go">Partition #1 contains a vfat signature.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Do you want to remove the signature? [Y]es/[N]o: N
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Command (m for help): n
</span></span></span><span class="line"><span class="cl"><span class="go">Partition number (2-128, default 2):
</span></span></span><span class="line"><span class="cl"><span class="go">First sector (1050624-16777182, default 1050624):
</span></span></span><span class="line"><span class="cl"><span class="go">Last sector, +/-sectors or +/-size{K,M,G,T,P} (1050624-16777182, default 16775167): 15730687
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Created a new partition 2 of type &#39;Linux filesystem&#39; and of size 7 GiB.
</span></span></span><span class="line"><span class="cl"><span class="go">Partition #2 contains a btrfs signature.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Do you want to remove the signature? [Y]es/[N]o: N
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Command (m for help): t
</span></span></span><span class="line"><span class="cl"><span class="go">Partition number (1,2, default 2): 1
</span></span></span><span class="line"><span class="cl"><span class="go">Partition type or alias (type L to list all): 1
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Changed type of partition &#39;Linux filesystem&#39; to &#39;EFI System&#39;.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Command (m for help): w
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">The partition table has been altered.
</span></span></span><span class="line"><span class="cl"><span class="go">Calling ioctl() to re-read partition table.
</span></span></span><span class="line"><span class="cl"><span class="go">Syncing disks.
</span></span></span></code></pre></div><p>重建分区表后，不出意外的话，重新挂载分区是能访问分区中的文件的，分区的 UUID 也没有发生改动。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> lsblk -no NAME,UUID /dev/nbd0
</span></span><span class="line"><span class="cl"><span class="go">nbd0
</span></span></span><span class="line"><span class="cl"><span class="go">├─nbd0p1 C6B7-EF70
</span></span></span><span class="line"><span class="cl"><span class="go">└─nbd0p2 a5fb30e5-eb5f-4a0b-8d2a-106e04e1488b
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">$</span> sudo -l fdisk /dev/nbd0
</span></span><span class="line"><span class="cl"><span class="go">Disk /dev/nbd0: 8 GiB, 8589934592 bytes, 16777216 sectors
</span></span></span><span class="line"><span class="cl"><span class="go">Units: sectors of 1 * 512 = 512 bytes
</span></span></span><span class="line"><span class="cl"><span class="go">Sector size (logical/physical): 512 bytes / 512 bytes
</span></span></span><span class="line"><span class="cl"><span class="go">I/O size (minimum/optimal): 512 bytes / 512 bytes
</span></span></span><span class="line"><span class="cl"><span class="go">Disklabel type: gpt
</span></span></span><span class="line"><span class="cl"><span class="go">Disk identifier: 3C587DB1-5978-45D2-AB05-9135D273D06D
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Device        Start      End  Sectors  Size Type
</span></span></span><span class="line"><span class="cl"><span class="go">/dev/nbd0p1    2048  1050623  1048576  512M EFI System
</span></span></span><span class="line"><span class="cl"><span class="go">/dev/nbd0p2 1050624 15730687 14680064    7G Linux filesystem
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">$</span> sudo mount /dev/nbd0p2 mnt
</span></span><span class="line"><span class="cl"><span class="gp">$</span> sudo mount /dev/nbd0p1 mnt/boot
</span></span><span class="line"><span class="cl"><span class="gp">$</span> ls -alh mnt
</span></span><span class="line"><span class="cl"><span class="go">total 20K
</span></span></span><span class="line"><span class="cl"><span class="go">drwxr-xr-x 2 root     root     4.0K Jan  1  1970 boot
</span></span></span><span class="line"><span class="cl"><span class="go">-rw-r--r-- 1 root     root        0 Oct 18 22:36 example.txt
</span></span></span><span class="line"><span class="cl"><span class="go">drwxr-xr-x 1 root     root        0 Oct 18 22:34 home
</span></span></span></code></pre></div><h2 id="sfdisk-备份分区表">sfdisk 备份分区表</h2>
<p>如果觉得重建分区表时，分区的位置记不住的话（废话正常人谁能背下来这一串数字），<code>sfdisk</code> 的 <code>--dump</code> 参数可以备份分区表。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> sudo sfdisk --dump /dev/nbd0
</span></span><span class="line"><span class="cl"><span class="go">label: gpt
</span></span></span><span class="line"><span class="cl"><span class="go">label-id: 3C587DB1-5978-45D2-AB05-9135D273D06D
</span></span></span><span class="line"><span class="cl"><span class="go">device: /dev/nbd0
</span></span></span><span class="line"><span class="cl"><span class="go">unit: sectors
</span></span></span><span class="line"><span class="cl"><span class="go">first-lba: 2048
</span></span></span><span class="line"><span class="cl"><span class="go">last-lba: 16777182
</span></span></span><span class="line"><span class="cl"><span class="go">sector-size: 512
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">/dev/nbd0p1 : start=        2048, size=     1048576, type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B, uuid=496140B3-C491-470B-98D7-BB95F55266A7
</span></span></span><span class="line"><span class="cl"><span class="go">/dev/nbd0p2 : start=     1050624, size=    14680064, type=0FC63DAF-8483-4772-8E79-3D69D8477DE4, uuid=F918E93D-FB1D-4652-9657-CE24A29ADEA5
</span></span></span></code></pre></div><p>在执行磁盘缩小操作之前，可以先使用 <code>sfdisk</code> 导出分区表，缩小磁盘后再恢复。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="go">Backup partition table
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> sudo sfdisk --dump /dev/nbd0 &gt; nbd0.txt
</span></span><span class="line"><span class="cl"><span class="go">Remove the `last-lba` line
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> grep -v last-lba nbd0.txt &gt; partition-backup.txt
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">After shrinking the disk size...
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Restore the backup partition table
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">$</span> sudo sfdisk /dev/nbd0 &lt; partition-backup.txt
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Kobo Libra 2 安装 KOReader</title>
      <link>https://blog.starry-s.moe/posts/2023/kobo-libra-2/</link>
      <pubDate>Tue, 05 Sep 2023 22:45:15 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2023/kobo-libra-2/</guid>
      <description>&lt;p&gt;今年的六月初的时候赶着 618 活动入手了 Kobo Libra 2 电纸书，距离上次博客更新刚好过去一个月，想于是想着把 Kobo Libra 2 安装 KOReader 踩坑的记录写在这里刚好可以水一篇博客。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>今年的六月初的时候赶着 618 活动入手了 Kobo Libra 2 电纸书，距离上次博客更新刚好过去一个月，想于是想着把 Kobo Libra 2 安装 KOReader 踩坑的记录写在这里刚好可以水一篇博客。</p>
<meting-js server="netease" type="song" id="1336969300" theme="#233333"></meting-js>
<blockquote>
<p>这首歌很魔性……</p>
</blockquote>
<p><img loading="lazy" src="images/001.jpg" alt="KOReader" />
<p style="margin-bottom: -0.8em;" class="image-title">KOReader</p>
</p>
<p>Kobo 安装 KOReader 的教程可以参照 <a href="https://github.com/koreader/koreader/wiki/Installation-on-Kobo-devices">KOReader Wiki</a>。</p>
<h2 id="important-notes">Important Notes</h2>
<p>首先把 Kobo 连接到电脑，用文本编辑器打开 <code>.kobo/Kobo/Kobo eReader.conf</code>，确保存在以下配置文件，禁止阅读器加载隐藏文件夹中的内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[FeatureSettings]
</span></span><span class="line"><span class="cl">ExcludeSyncFolders=(\\.(?!kobo|adobe).+|([^.][^/]*/)+\\..+)
</span></span></code></pre></div><h2 id="manual-installation-methods">Manual Installation Methods</h2>
<p>按照手动安装 KOReader 的步骤，有两种安装方式可选择：</p>
<ol>
<li>
<p>第一种是在 <a href="https://github.com/NiLuJe/kfmon">KFMon</a> 的基础上安装 KOReader，需要先安装 KFMon，安装 KFMon 的教程以及文件的下载连接在<a href="http://www.mobileread.com/forums/showthread.php?t=274231">这里</a>。</p>
</li>
<li>
<p>除此之外另一种安装方法是基于 <a href="https://www.mobileread.com/forums/showthread.php?t=329525">NickelMenu</a> 的方式安装 KOReader。</p>
</li>
</ol>
<p>这里咱使用的是第二种基于 <a href="https://www.mobileread.com/forums/showthread.php?t=329525">NickelMenu</a> 的方式安装 KOReader。</p>
<ol>
<li>
<p>首先下载 NickelMenu 的 <a href="https://github.com/pgaskin/NickelMenu/releases/latest/download/KoboRoot.tgz">KoboRoot.tgz</a> 安装包，像升级系统那样把压缩包拖到 <code>.kobo</code> 文件夹内，弹出 USB 后 Kobo 会自动重新更新。安装完成后 Kobo 右下角菜单栏会多一个 <code>NickelMenu</code> 菜单。</p>
</li>
<li>
<p>在 <a href="https://build.koreader.rocks/download/">此处</a> 下载 KOReader 安装包，因为 Libra 2 等使用相似主板的电子书存在死机重启的不稳定 <a href="https://github.com/koreader/koreader/issues/9806">Bug</a> 建议先下载包含修复此问题的 <code>nightly build</code>（<a href="https://github.com/koreader/koreader/pull/10771#issuecomment-1662928674">参考 Issue</a>），文件名以 <code>koreader-kobo</code> 开头的为 Kobo 使用的安装包。</p>
</li>
<li>
<p>再次将 Kobo 连接到电脑，将 KOReader 安装包解压到 <code>.adds</code> 目录下。</p>
</li>
<li>
<p>新建 <code>.adds/nm/koreader</code> 文件，写入以下内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">menu_item:main:KOReader:cmd_spawn:quiet:exec /mnt/onboard/.adds/koreader/koreader.sh
</span></span></code></pre></div></li>
<li>
<p>弹出 USB，等待设备同步完数据后，就可以在 Kobo 的右下角菜单栏中启动 KOReader 了。</p>
</li>
</ol>
<h2 id="known-issues">Known Issues</h2>
<p>使用过程中只遇到一个 KOReader 的严重影响体验的问题，就是上面说的阅读过程中会经常死机重启，可以在 <a href="https://github.com/koreader/koreader/issues/9806">这篇 Issue</a> 跟踪进度，目前可以尝试使用 <a href="https://github.com/koreader/koreader/pull/10771">这个 Patch</a>，安装 <code>nightly build</code> 的安装包尝试解决。</p>
<h2 id="others">Others</h2>
<p>贴几张看电纸书的效果图供参考，Kobo 的显示效果比咱之前用过的 KPW4 好太多了。图书的话基本是从网络上找盗版资源了，KOReader 能够对 PDF 重排所以对 PDF 的支持效果也比 Kindle 好很多。</p>
<p><img loading="lazy" src="images/002.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/003.jpg" alt="" />

</p>]]></content:encoded>
    </item>
    
    <item>
      <title>七月末的短暂旅行小记</title>
      <link>https://blog.starry-s.moe/posts/2023/2023-07-20/</link>
      <pubDate>Fri, 04 Aug 2023 20:47:50 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2023/2023-07-20/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;找不到答案的时候就去看看这个世界。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      <content:encoded><![CDATA[<blockquote>
<p>找不到答案的时候就去看看这个世界。</p>
</blockquote>
<meting-js server="netease" type="song" id="1341556382" theme="#233333"></meting-js>
<h2 id="一些流水帐">一些流水帐</h2>
<p>容我先写一点流水帐…… 咱的习惯是因为这种旅行都十分的珍贵所以咱想把旅行的全部经过都记录到博客里，尽管纯文字给别人的观感不是很好但咱还是想把这些都写出来。</p>
<p>一开始是没打算去 BW 的，计划是只去一趟 BML 就行，所以一开始咱没抢 BW 门票。过几天后 B 站公开了 BML 的消息，然后得知了今年的 BW 和 BML 是赶在一起举办的。于是咱抱着试一试的心态去抢 BML 的门票，第一次大会员优先抢票咱没抢到，于是当天晚上试着从 380 到 1500 的票档依次反复尝试点击抢票后，最终抢到了 1200 的内场票（内心在滴血），本来以为抢不到的，结果出乎意料的被迫忍痛斥巨资去看 BML 内场。然后就是 BML 门票抢到了，因为今年的 BW 和 BML 是在同一时间段举行，得知 BW 还有最后一次抢票机会，不去白不去后，最终抢到了一张 23 号的 BW 门票。然后蹲了好几天的 12306 候补沈阳到上海的卧铺票，结果最终还是没能抢到去上海的卧铺。由于机票和高铁票价格差不多，但高铁要坐十多个小时，所以蹲了几天卖机票的平台后最终以比较便宜的价格买到了沈阳往返上海的半夜机票。</p>
<p>然后是 20 号晚上从沈阳桃仙机场坐飞机去上海，中间经停山东烟台蓬莱机场，被飞机空调冻了一路后在上海普通国际机场 T2 航站楼出发层的沙发睡了一晚（19 年的十一假期也是在这过夜的所以位置咱都记下来了）。21 号早晨七点被吵醒后买了一杯星巴克冰美然后一边回忆四年前去上海时的记忆一边坐地铁 2 号线（当时坐的是磁悬浮）。由于没抢到 21 和 22 号的 BW 门票所以上了 2 号线后咱也不知道该坐到哪里，最终是从 2 号线的始发站坐到了终点站，虽然没买到 BW 门票但是去了 BW 四叶草场馆外面走了两圈，最终实在进不去加上被热得受不了了，不得不从黄牛手里搞了一张邀请函才进去（别学，不要买黄牛手里的邀请函，原因后面会讲）。当天晚上快 5 点的时候上海西边下了大暴雨，由于觉得 5 点闭展的时候再去排队挤地铁一定会排很长时间，于是咱在不到 5 点的时候就早早的去地铁站门口排队了。当时尽管外面雨蛮大的但是场馆内还是很干，地铁口排队的地方用围挡围了十几个弯，然后排队的地方没有空调，在那里排了好长的队后差点没热昏过去。然后由于当天大暴雨出地铁站后打不到车，所以出地铁站后被迫淋着雨从地铁站骑共享单车到旅店，所以 21 号那天从浦东机场到国展中心四叶草再到后来回旅店一共走了 2.8W 步，晚上在手机看到了 BW 场馆部分露天过道被淹的消息，内心狂喜幸好我跑得早。</p>
<p>22 号因为前一天腿差点走断了，于是上午是在旅店休息，下午去了一些上海其他比较知名的二次元打卡点。首先去了南京东路地铁口旁边的什么大药丸商场的 Square Enix 咖啡厅，没买咖啡，单纯的去拿相机给咖啡店摆的周边拍照。看了 FF7 和尼尔的一堆手办和纪念品，之后坐地铁去上海的外文书店。当天外文书店顶楼日文部分的人蛮多的，基本是被二次元攻占了，在书店绕了好几圈后找到了 Fate 画册（还是中文版），于是毫不犹豫的把它买了下来，塞到背包里。由于是画册，这本书巨大而且特别厚+沉。背着巨沉的背包后接着出发去梅赛德斯奔驰文化中心，BML 结束后随着人流和 19 年时一样，徒步走到中华艺术宫的下一个地铁站坐地铁回去。于是 22 号走了 1.4W 步，赶在地铁末班车停运前回到了旅店。</p>
<p>23 号稍微睡了个懒觉后坐地铁去 BW，出地铁后绕了几个大弯排队后，在 BW 的检票炸鸡处被拦了下来，之后找现场的工作人员，在一顿十分尴尬的调查，被关了半个小时后终于把我放了进去（所以说不要买黄牛手里的邀请函！我再也不敢了55555……）进 BW 场馆时已经是十一点多了，由于在检票口被拦了半个小时，心情有点低落，所以一开始逛展时心情并不是很好。从 8 号厅挤到 4 号厅后找到了 21 号咱没找到的 Aniplex 展台，然后隐约的感觉有很多手办和展品 21 号那天没有摆出来。之后就是平复心情拿着相机挤在人堆里拍手办，然后去每个展台领无料（领了一堆袋子，尤其是英特尔的那个超大号麻袋）。晚上继续从 2 号线始发站坐到终点站去普通国际机场，中间在南京东路下车又去了一趟那个 Square Enix 咖啡厅，买了个 FF7 的音乐盒当纪念品。半夜飞回沈阳后，被沈阳的出租车司机唠了一路（还因为我住浑南吓唬我嫌我离得近想把我凌晨一点扔半路高架桥上）（实际是开玩笑但刚从南方回来还是不太适应这么爱唠嗑的司机）。23 号走了 1.7W 步。</p>
<p>之后的几天回老家去了趟亲戚的婚礼，然后还没来得及休息，就 27 号和朋友一起去了吉林长春。27 号下午去了长春的这有山商场和桂林路市场，晚上去了南湖公园的长春解放纪念碑喂蚊子，因为连续好几天睡眠不足，当天晚上是回到酒店洗漱后倒头就睡了。第二天和朋友一起去了长春的兽聚，路上坐了长春的轨道交通（本来以为是地铁，结果发现长春的轨道交通非常日系，但是属于轻轨的那种，车型和沈阳浑南的有鬼电车好像是一样的，但不同的是长春的轨道交通的地面段是被栅栏围起来的，有独立的路权，不用等红绿灯，也不会遇到轻轨被汽车撞出轨等侵线情况）（长春的轨道交通没有屏蔽门，因为按级别划分来说是属于轻轨……）。在兽聚当一个野生摄影师给许多兽兽拍了巨多的照片，录了一些视频，然后一天过后非常非常的累，晚上 11 点眼睛就睁不开了，在兽聚的床位倒头就睡，再睁眼时已经是早晨 7 点了。</p>
<p>29 号回沈阳，下午回公寓后用电脑把咱这几天拍的一大堆照片导到电脑里并做了备份并给这几天拍到的小动物加好友返图。晚上是瘫在床上一动不动了……</p>
<blockquote>
<p>没人疼就去漫展，逛完浑身疼。</p>
</blockquote>
<p>30 号一早起床出发去沈阳 SSCA 漫展，与今年前几次 SSCA 漫展不同，这次 SSCA 在 K11 的展厅举行（终于不是之前冬冷夏热的铁西区四维大仓库了），当天漫展人巨多（给 K11 一点小小的二刺猿震撼），咱依旧是在漫展当野生摄影师给别人拍照。之后晚上去的沈阳站坐高铁回沈阳南站。经过了一个多星期的特种兵旅行，孩子被彻底累瘫了，所以是休息了好几天才有力气去写博客，因为旅行的内容量实在太大了，一时半会写不完，所以这次的博客就先以流水帐的方式写了。</p>
<h2 id="一些照片">一些照片</h2>
<meting-js server="netease" type="song" id="2059134447" theme="#233333"></meting-js>
<h3 id="bilibili-world-2023">Bilibili World 2023</h3>
<p>首先是一些在 BW 拍到的 Coser 和手办（以及第一天的暴雨）。</p>
<p><img loading="lazy" src="images/IMG_3952.jpg" alt="" />

</p>
<p>上面是 D1 下午拍到的暴雨，其实 D1 还拍了一些其他的照片但懒得放在这里了，下面是 D3 拍的手办和 Coser。</p>
<p><img loading="lazy" src="images/IMG_4189.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4192.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4257.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4280.jpg" alt="" />

</p>
<p>（然后咱就因为 Aniplex 展台这边站着的这只 bocchi 酱去看了《孤独摇滚！》……）</p>
<p><img loading="lazy" src="images/IMG_4266.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4211.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4297.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4468.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4474.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4289.jpg" alt="" />

</p>
<h3 id="bilibili-macro-link-2023">Bilibili Macro Link 2023</h3>
<p>然后是在 BML 拍的一点照片，因为是在内场靠后排的位置，镜头一半都被前面的人挡住了，所以观感还不如看台效果好（下次坚决不买内场票了），大部分时间都在应援所以只拍了一点点照片。</p>
<p><img loading="lazy" src="images/IMG_4050.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4040.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4034.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4041.jpg" alt="" />

</p>
<h3 id="square-enix-coffee">Square Enix Coffee</h3>
<p>在 SE 咖啡厅拍的周边什么的（官方的手办的脸属实是有点崩……幸好没买……）。</p>
<p><img loading="lazy" src="images/IMG_3926.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_3935.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_3939.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4044.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4046.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4047.jpg" alt="" />

</p>
<p>（虽然看不懂，但是好活……</p>
<h3 id="长春疯狂一夜">长春·疯狂一夜</h3>
<p>在长春的小聚上拍到的一些大福瑞们，这大热天的在户外穿貂真挺不容易的，当天有见到（并 rua 到）了很多大佬，十分开心。</p>
<p><img loading="lazy" src="images/IMG_4639.JPG" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4613.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4636.JPG" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4637.JPG" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4638.JPG" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4853.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4887.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_4976.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/o0aAAxuCOIA4hApCerj2HbA5xgDBeCnDkEY9A8~tplv-dy-aweme-images_q75.webp" alt="" />

</p>
<h3 id="沈阳-ssca-9th-day3">沈阳 SSCA 9th Day3</h3>
<p><img loading="lazy" src="images/IMG_4455.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/IMG_5562.jpg" alt="" />

</p>
<h3 id="其他">其他</h3>
<p>因为在外文书店只拍了一张照片（书店有什么好拍的……），所以放在这里了。</p>
<p><img loading="lazy" src="images/IMG_4051.jpg" alt="&amp;ldquo;外文书店&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">外文书店</p>
</p>
<p>买的 Fate 画册还送了几张明信片，回家后拆开一看感觉光是这几张明信片就已经值画册的售价了……</p>
<p><img loading="lazy" src="images/IMG_4214.jpg" alt="" />

</p>]]></content:encoded>
    </item>
    
    <item>
      <title>玩了三年的 Minecraft 生存存档</title>
      <link>https://blog.starry-s.moe/posts/2023/minecraft/</link>
      <pubDate>Sat, 08 Jul 2023 22:56:44 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2023/minecraft/</guid>
      <description>&lt;p&gt;这个 Minecraft 存档是咱在 2020 年年初的时候建立的，起初是 1.15.2 单机生存，当时在 B 站学着 TIS 以及其他生电服的思路安装了一些生存辅助插件，后来升级到了 1.16.5，并在去年年底迁移到了我的 NAS 上改成了私人服务器。尽管玩了三年多的时间了但我从来没详细的在博客上记录这个存档，只有在前几年的年终总结中提到过“我在玩 Mincraft，今年建了什么建筑……”，眼瞅着三周年已经过去了，本来想录个纪念视频发 B 站上的，但因为太懒、不想学视频剪辑，这个计划一直咕咕了，不过最近想到可以把存档截图放博客里作为三周年纪念。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>这个 Minecraft 存档是咱在 2020 年年初的时候建立的，起初是 1.15.2 单机生存，当时在 B 站学着 TIS 以及其他生电服的思路安装了一些生存辅助插件，后来升级到了 1.16.5，并在去年年底迁移到了我的 NAS 上改成了私人服务器。尽管玩了三年多的时间了但我从来没详细的在博客上记录这个存档，只有在前几年的年终总结中提到过“我在玩 Mincraft，今年建了什么建筑……”，眼瞅着三周年已经过去了，本来想录个纪念视频发 B 站上的，但因为太懒、不想学视频剪辑，这个计划一直咕咕了，不过最近想到可以把存档截图放博客里作为三周年纪念。</p>
<meting-js server="netease" type="song" id="812557" theme="#233333"></meting-js>
<h2 id="出生点空置域">出生点空置域</h2>
<p><img loading="lazy" src="images/0010.jpg" alt="出生点空置域" />
<p style="margin-bottom: -0.8em;" class="image-title">出生点空置域</p>
</p>
<p>出生点已经被咱炸成空置域了，当时是在 2020 年花了几天的时间用三向轰炸机清理的空置域，y11 高度以下的岩浆并不碍事所以没有清理，现在的出生点空置域有一个收集末地刷沙机的简单收集装置（以后打算改成自动分类+潜影盒收集装置），橙色的建筑是地铁出生点站，图片右侧的是一个简易的刷鱼农场，主要靠这个农场获取墨鱼的黑色染料。</p>
<h2 id="原点空置域">原点空置域</h2>
<p><img loading="lazy" src="images/0020.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">原点</p>
</p>
<p>原点空置域是咱的第二个空置域，之所以叫原点是因为空置域的中心座标为 (x:0, z:0)，原点空置域里只有一个全物品（垃圾桶）分类装置，这个原点空置域我记得是 2021 年用三向炸的，全物品也是在 21 年上半年建的，现在全物品已经全部完工并正常使用了，不过这个全物品目前只收集了一半左右的可堆叠物品，因为有许多物品在单人生存中很少用到。</p>
<p>全物品垃圾桶右边蓝色圆形的建筑是地铁原点站，顶上是一个仅装饰作用的“停机坪”。</p>
<p><img loading="lazy" src="images/0030.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/0040.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/0050.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/0060.jpg" alt="" />

</p>
<p>全物品分类是这个存档里工程量最大的机器，当时建全物品时特地新建了一个村民交易所，买了巨多的石英和红石、萤石等建筑材料，清理水道时也花了巨长的时间。</p>
<h2 id="生存基地">生存基地</h2>
<p><img loading="lazy" src="images/0070.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">生存时第一个建造的房子</p>
</p>
<p><img loading="lazy" src="images/0080.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">由村庄改造的庭院</p>
</p>
<p><img loading="lazy" src="images/0090.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">生存基地俯瞰</p>
</p>
<p><img loading="lazy" src="images/0100.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">刷铁机、工厂、地铁站</p>
</p>
<p>当初建立存档后，是生存在出生点旁边的一个村庄里的，后来搬到了附近的河边，现在村庄已经没有村民了，被我改建成了一个中式的庭院。</p>
<p>这个生存基地有一个简易的工厂，工厂一层是一个小型牧场和小型熔炉组和 1.15 版本能用的经验熔炉（升级到 1.16 后特性被修复了就不能用了），工厂二层有一个附魔台，三层是简易的村民交易所。工厂旁边有一个简易的刷铁机，尽管后来又盖更大的刷铁机了但这个没拆，尽管效率低点但一直能用。</p>
<p>工厂侧面还有一个白桦树树场，效率蛮高的单人生存足够用了，后期的木材全是从这里获取的。生存基地的地下有一个能换乘三条线路的超大地铁站。</p>
<p><img loading="lazy" src="images/0110.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">1 号线站厅</p>
</p>
<p><img loading="lazy" src="images/0120.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">1 号线站台</p>
</p>
<p><img loading="lazy" src="images/0130.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">空置域线站台</p>
</p>
<p><img loading="lazy" src="images/0140.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">2 号线站台</p>
</p>
<h2 id="工业基地">工业基地</h2>
<p>工业基地有一个 320 超大熔炉组，然后是一个效率蛮高的刷石机和一个简易的复制铁轨的机器，地下有一个地铁工业基地站。</p>
<p><img loading="lazy" src="images/0150.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">320 熔炉组</p>
</p>
<p><img loading="lazy" src="images/0160.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">刷石机 &amp; 铁轨复制机</p>
</p>
<h2 id="机场在建">机场（在建）</h2>
<p><img loading="lazy" src="images/0170.jpg" alt="" />

</p>
<p>不得不说生存修机场真的太麻烦了，时间全用来整地形了，铺混凝土倒不是很费事。现在这个机场只有一条跑道，打算建航站楼但是工程量很大，需要很长的时间整理地形，所以一直在咕咕姑中。</p>
<p><img loading="lazy" src="images/0180.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">地铁站 &amp; 刷铁机 &amp; 刷怪塔</p>
</p>
<p>机场旁边的海上有一个大型的 8 核心刷铁机、一个简易的混凝土固化机和一个刷怪塔以及一个地铁站。后期建地铁等建筑的所有混凝土都是在这个混凝土固化机固化的，然后尽管这个刷铁机效率不是特别高但是单机生存勉强够用了，不够用的话就多挂机刷一会（<code>/tick rate 200</code> 警告）……</p>
<h2 id="摩天楼">摩天楼</h2>
<p><img loading="lazy" src="images/0190.jpg" alt="" />

</p>
<p>其实这个地方我起的地名叫“三号村庄”，因为是第三个发现的村庄……</p>
<p>本来计划建两个摩天楼的，但是建完一个之后，另一个楼就一直处于咕咕的状态。摩天楼旁边是一个大型的双岛式站台地铁站。</p>
<h2 id="跨海大桥">跨海大桥</h2>
<p><img loading="lazy" src="images/0200.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/0210.jpg" alt="" />

</p>
<p>这个存档里一共有俩跨海大桥，第一个桥是 2020 年暑期时建的，第二个桥是 22 年下半年建的。</p>
<h2 id="甘蔗农场">甘蔗农场</h2>
<p>甘蔗农场是今年上半年修建的，是一个简易的全自动甘蔗机，收集的甘蔗主要用于生成烟花火箭的原材料：纸。</p>
<p><img loading="lazy" src="images/0310.jpg" alt="" />

</p>
<h2 id="村民交易所">村民交易所</h2>
<p>在修建全物品分类以及地铁站装饰时，需要大量的石英和萤石，因此修建了这个带打折的村民交易所，因为没有建袭击农场，所以目前与村民交易的绿宝石都是从村民交易所卖铁换取的，而铁是靠村民制作的刷铁机刷出来的。<span class="spoiler" >深刻体现了什么叫“取之于民，用之于民”的资本家思想（逃</span></p>
<p><img loading="lazy" src="images/0260.jpg" alt="" />

</p>
<p>村民交易所旁边还有一个咱自己设计的全自动农场，但是因为咱不缺食物（可以从村民那里买金胡萝卜吃），所以这个自动农场建好后一直在闲置。</p>
<p><img loading="lazy" src="images/0270.jpg" alt="" />

</p>
<h2 id="海底神殿守卫者农场">海底神殿（守卫者农场）</h2>
<p>生存中第一个发现的海底神殿，已经被改成了不需要清空水的袭击者农场（排水实在太麻烦了），目前所有建筑的海晶灯的原材料都是从这个农场获取的，海底神殿旁边是三号线地铁海底神殿站。</p>
<p><img loading="lazy" src="images/0340.jpg" alt="" />

</p>
<h2 id="地狱猪人农场">地狱猪人农场</h2>
<p>因为光影在地狱的效果不好所以咱把光影关掉了……</p>
<p>这个猪人农场用来挂机刷经验以及获取金子，农场还包含了猪灵交易所，可以把刷取的金锭与猪灵换取石英、黑曜石、火焰弹等物品。</p>
<p><img loading="lazy" src="images/0350.jpg" alt="" />

</p>
<h2 id="地铁">地铁</h2>
<p>这个存档里目前有三十多个已建成的地铁站，还有十多个在建的地铁站，这里贴几张咱自认为设计得比较有特点的地铁站。</p>
<p>首先是这个双层侧式站台的地铁站，上层是已经建成的 2 号线，下层是正在建设的通往机场的 6 号线：</p>
<p><img loading="lazy" src="images/0220.jpg" alt="" />

</p>
<p>这个是 3 号线的末地传送门站，这个站直接修在了末地要塞里，上层是地铁站台，下层是由末地要塞改造成的末地传送门入口，同时保留了要塞的书房作为该地铁站的小型图书馆：</p>
<p><img loading="lazy" src="images/0230.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">末地传送门 - 站台</p>
</p>
<p><img loading="lazy" src="images/0240.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">末地传送门 &amp; 图书馆</p>
</p>
<p>这个是村民交易所的地下的地铁站，用的云杉木作为柱子，还挺好看的：</p>
<p><img loading="lazy" src="images/0250.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">村民交易所 - 站台</p>
</p>
<p>空置域西站：</p>
<p><img loading="lazy" src="images/0280.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">3 号线（左）、1 号线（右）</p>
</p>
<p>一号线的保留了正线的侧式站台地铁站，方便甩站用（本次裂车本站不停靠）：</p>
<p><img loading="lazy" src="images/0290.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">南湖公园站</p>
</p>
<p>一号线的地上段，弄了红石灯做了点简易的装饰：</p>
<p><img loading="lazy" src="images/0300.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">冰工厂站</p>
</p>
<p>全物品分类旁边的原点站也很有特色，车站是圆柱体结构，两条线路十字交叉：</p>
<p><img loading="lazy" src="images/0320.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">原点站</p>
</p>
<p>这个是二号线的车辆段，目前存档里只有二号线有车辆段（因为二号线太长了），别的线路还没有修车辆段的计划。</p>
<p><img loading="lazy" src="images/0330.jpg" alt="" />

</p>
<hr>
<p>以上基本是咱玩了三年的单人生存存档的全部内容了，还有些在建和小型的建筑个人认为没必要贴到这里，因为最近逐渐没有玩下去的兴趣了所以不知道以后还能不能继续坚持玩下去，所以想了一下这三年时间建的建筑蛮多的因此写到这里水一篇博客。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>当你刚开始尝试去写 Kubernetes Controller……</title>
      <link>https://blog.starry-s.moe/posts/2023/kube-controller/</link>
      <pubDate>Sat, 10 Jun 2023 02:33:58 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2023/kube-controller/</guid>
      <description>&lt;p&gt;Controller 对初学着来说有那么亿点点抽象，虽然网络上能找到很多有关 Kubernetes Controller 的讲解，但是 Kubernetes 的学习过程往往是一个离散的而不是连续的过程。如果想弄懂 Controller 还是有蛮高门槛的，不要想着看完 Kubernetes 的文档，速成了 Kubernetes 的基本知识就去尝试写 Controller，这种操作就好比刚过完新手教程就去打高难副本，尽管能仿着 &lt;code&gt;sample-controller&lt;/code&gt; 写一个能“跑”的 Controller，但仅仅只能做到能“跑”的程度……&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与标题有些不同，这篇博客主要讲的是萌新如何上手编写 Controller，如果你是 Kubernetes 初学者，希望这篇博客能帮助你建立编写 Controller 的学习曲线。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      <content:encoded><![CDATA[<p>Controller 对初学着来说有那么亿点点抽象，虽然网络上能找到很多有关 Kubernetes Controller 的讲解，但是 Kubernetes 的学习过程往往是一个离散的而不是连续的过程。如果想弄懂 Controller 还是有蛮高门槛的，不要想着看完 Kubernetes 的文档，速成了 Kubernetes 的基本知识就去尝试写 Controller，这种操作就好比刚过完新手教程就去打高难副本，尽管能仿着 <code>sample-controller</code> 写一个能“跑”的 Controller，但仅仅只能做到能“跑”的程度……</p>
<blockquote>
<p>与标题有些不同，这篇博客主要讲的是萌新如何上手编写 Controller，如果你是 Kubernetes 初学者，希望这篇博客能帮助你建立编写 Controller 的学习曲线。</p>
</blockquote>
<h2 id="前期准备">前期准备</h2>
<p>对刚接触 Kubernetes 的萌新来讲，这个体系还是蛮复杂和抽象的，只靠读文档看教程自学可不是那么容易。光是怎么安装一个 Kubernetes 集群，在不同的教程里就有无数种方法了。传统的安装 Kubernetes 的方法过于硬核，现在几乎没人选择这种方式部署集群了。咱常用的比较简单的方式有 <a href="https://k3s.io">k3s</a>，光靠一个脚本就能在虚拟机上一键部署一个轻量级的集群，很适合萌新（前提是你没有必须用包管理器安装任何软件的强迫症），但是如果你想在国内的网络环境靠这个脚本安装 <code>k3s</code> 的话，需要一些参数配置国内源，这里不再赘述。除此之外还可以<a href="https://ranchermanager.docs.rancher.com/zh/pages-for-subheaders/rancher-on-a-single-node-with-docker">用 Docker 方式部署一个单节点 Rancher</a>，Rancher 的 Web 界面可以更好的帮助萌新去管理 Kubernetes 资源（当然你还可以选择敲 <code>kubectl</code> 指令的方式），还有很多教程会推荐你使用 <code>minikube</code>，当然你可以选择任何一种方式去部署你自己的集群，只要你觉得这种方法适合你，而且部署的集群版本不要太低即可。</p>
<p>如果想编写 Controller，你得有一定的 Kubernetes 基础（废话），并且熟悉 Go 语言（废话 x 2）。在看完 Kubernetes 文档，熟悉了 k8s 的资源和如何使用 <code>kubectl</code> 操作他们后，先别急着上手写 Controller。首先你得熟悉 <a href="https://github.com/kubernetes/client-go">client-go</a>，<code>client-go</code> 的代码能在 GitHub (<a href="https://github.com/kubernetes/client-go">https://github.com/kubernetes/client-go</a>) 中下载到，但记住它的 Go Module 为 <code>k8s.io/client-go</code>，不在 <code>github.com</code>。</p>
<p>首先了解一些常见的 Kuberntes API 类型，知道 Kubernetes 的资源对象是怎么在 <code>client-go</code> 中用 Go 语言表示的，并如何调用 API 去管理他们（而不是仅凭 <code>kubectl</code> 命令行客户端去管理他们），
这里不单单有 <code>client-go</code> 这一个 Git 仓库，还有 <code>k8s.io/api</code>, <code>k8s.io/apimachinery</code> 等仓库，后面写 Controller 时会经常用到这些 API。认识一下 <code>TypeMeta</code> 和 <code>ObjectMeta</code> （代码位置在<a href="https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/types.go">这里</a>），每个资源对象的 Go 结构中都包含这些数据（除此之外每个资源还有 <code>Spec</code>, <code>Status</code> 等），写代码时会经常用到 <code>json/yaml</code> 的 <code>Marshal/Unmarshal</code> 操作，熟悉到这个程度就可以了。</p>
<p>然后是 Kubernetes 的自定义资源（Custom Resource, CR）这个概念，k8s 内置了一些 Resource 资源对象，例如 <code>pod</code>, <code>deployment</code>, <code>service</code>, <code>secret</code> 等，你可以用 <code>kubectl</code> 去 <code>get/describe/create/delete...</code> 这些资源，但如果你想往 k8s 中添加一些你自己的自定义资源，比如你想定义一个资源叫做 <code>database</code>，你用 <code>kubectl create database ...</code> 就能创建一个你自己想要的数据库，像 <code>create pod</code>, <code>create secret</code> 那样，然后还能对你的自定义资源对象进行 <code>describe/delete/update...</code> 等操作，就需要用到自定义资源（开发者更习惯叫他的简写 CR，以及自定义资源定义的简写 CRD）。Controller 就是用来管理这些 CRs 的。在开发 Controller 时我们需要定义 CR 中包含哪些数据，然后使用代码生成器生成资源的 <code>DeepCopy</code> 等方法，减少不必要的重复代码编写。</p>
<blockquote>
<p>可以不用把每个细节都尝试弄懂，把基本概念过一遍就行，学习 Kubernetes 的过程是一个离散的过程而不是连续的过程，当碰到哪个地方不明白卡住的时候直接跳过去看后面的内容就行啦~</p>
</blockquote>
<h2 id="什么是-controller">什么是 Controller</h2>
<p>在上面介绍 CR 的定义时有解释 Controller 是用来管理 CR 的，比如我们执行 <code>kubectl create database ...</code> （实际是执行 <code>kubectl apply -f</code> 部署了一个 <code>Kind</code> 为 <code>database</code> 的 YAML，不能直接 <code>create database</code>，但这么说比较方便理解~）创建了一个 <code>database</code> 类型的资源，因为这个资源是我们自定义的，所以 Kubernetes 只是在 etcd 数据库中记录了：“我们创建了一个 <code>database</code> 资源，他的数据内容是什么什么……”，并没有进行创建数据库的操作！而 Controller 就是用来管理 Database 资源的生命周期的，比如我们 <code>create database</code> 之后，Controller 会发现我们新建了一个 Database 资源，然后会去创建一个 Database Deployment。当我们 <code>delete database</code> 时，Controller 会注意到我们删除了 Database，之后执行资源释放一系列操作。</p>
<p>往简单了讲，Controller 干的事情就是对比资源当前实际的状态和我们设定的资源状态是否一致。比如这个资源定义的 <code>replicas</code> 为 2，但实际只有一个 Pod 在运行，Controller 就会再去创建一个 Pod 使其实际的 <code>replicas</code> 为 2。</p>
<p>当然 Controller 实现起来比这复杂多了，可不是一个简单的 <code>for</code> 循环不断从 Kube API 中查询资源然后做对比这么简单，这用到了 Cache 缓存机制和 Informer 消息提醒机制，减少 Kube API 请求次数，读取内存中的状态缓存什么的，听不懂没关系，以后会懂的……</p>
<h2 id="sample-controller">sample-controller</h2>
<p><code>github.com/kubernetes/sample-controller</code> 项目是一个样例 Controller，所有的初学者都是靠这个项目学习 Controller 的，相当于是高难副本中最简单的了，可以把这个样例 Controller 改造为自己的 Controller，用来学习。</p>
<p>本篇教程以编写 <code>database-controller</code> 为例，按照 <code>sample-controller</code> 的 Controller 框架编写一个数据库的 Controller，重点在于怎么上手写 Controller，不在数据库。</p>
<p>将 <code>sample-controller</code> 代码克隆到本地 <code>$GOPATH</code> 目录下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> midir -p <span class="nv">$GOPATH</span>/src/github.com/&lt;USERNAME&gt;/ <span class="o">&amp;&amp;</span> <span class="nb">cd</span> <span class="nv">$GOPATH</span>/src/github.com/&lt;USERNAME&gt;/
</span></span><span class="line"><span class="cl"><span class="gp">$</span> git clone git@github.com:kubernetes/sample-controller.git <span class="o">&amp;&amp;</span> <span class="nb">cd</span> sample-controller
</span></span></code></pre></div><h3 id="初始化-controller">初始化 Controller</h3>
<p>按照 <code>sample-controller</code> 的 Controller 框架，将其修改为我们想要实现的 Controller。</p>
<ul>
<li>修改项目名称为 <code>database-controller</code>，修改 <code>git remote</code>。</li>
<li>编辑 <code>go.mod</code> 修改 Module 名称，把代码的 <code>k8s.io/sample-controller</code> 改为 <code>github.com/&lt;USERNAME&gt;/database-controller</code>。</li>
<li>编辑 <code>hack/boilerplate.go.txt</code> 中的版权信息。</li>
<li>修改 <code>README</code>，<code>OWNERS</code>，<code>SECURITY_CONTACTS</code> 等信息。</li>
<li>编辑执行<strong>代码生成器</strong>的脚本 <a href="https://github.com/kubernetes/sample-controller/blob/master/hack/update-codegen.sh">hack/update-codegen.sh</a>
<ul>
<li>编辑脚本中的代码生成器所在位置，脚本中原本写的是使用了 <code>go mod vendor</code> 将 Go 依赖都放到了项目的 <code>vendor</code> 目录下时生成器的位置，按实际情况进行修改（比如改成 <code>$GOPATH</code> 目录下）。</li>
<li>编辑 <code>code-generator</code> 的参数，把 <code>k8s.io/sample-controller</code> 改成 <code>github.com/&lt;USERNAME&gt;/database-controller</code>, 并编辑 <code>--output-base</code> 的目录位置。</li>
<li>执行代码生成器脚本，确保能正确生成代码。</li>
</ul>
</li>
</ul>
<p>之后修改 <code>pkg/apis/samplecontroller</code> 目录为 <code>pkg/apis/databasecontroller</code>，同时把 <code>samplecontroller</code> 包修改为 <code>databasecontroller</code>。</p>
<ul>
<li>把代码中所有使用了 <code>samplecontroller</code> 包的地方都改为 <code>databasecontroller</code>（被代码生成器生成的代码可以不用改，后面会重新生成代码）。</li>
<li>修改 <code>pkg/apis/databasecontroller/register.go</code> 的 <code>GroupName</code> 为 <code>database.&lt;YOUR_DOMAIN&gt;</code>，例如 <code>database.example.io</code>。</li>
<li>修改代码生成器的注释，把 <code>pkg/apis/databasecontroller/v1alpha1/doc.go</code> 的 <code>groupName</code> 修改为 <code>database.example.io</code>。</li>
<li>重新执行代码生成器 <code>./hack/update-codegen.sh</code>。</li>
</ul>
<p>先简单熟悉一下修改后的项目的代码结构：</p>
<ul>
<li>
<p><code>main.go</code> 中先构建了 Kubernetes 和 <code>database-controller</code> 的 <code>Client</code>，之后基于 <code>Client</code> 构建了 <code>SharedInformer</code>，最后创建并启动 Controller。</p>
<p>简单来讲，<code>Informer</code> 在资源发生改动时，调用相应事件的处理函数，它可以对“增加”，“更新”，“删除”三种事件进行“监控”处理（一点也不简单，太抽象了）。然后 Informer 还充当了缓存的作用，查询资源状态时只需要查询 Informer 的缓存即可，不需要反复调用 Kube API，减少性能损耗。</p>
</li>
<li>
<p><code>controller.go</code> 包含这些内容：</p>
<ul>
<li>构建 Controller 的 <code>NewController</code>、启动 Controller 的 <code>Run</code>，还有 Informer 在不同事件（Event）进行处理的函数……</li>
<li>创建 Deployment 的函数，<code>sample-controller</code> 中的 CRD Kind 为 <code>foo</code>，这个 <code>foo</code> 创建的 Deployment 是一个 <code>nginx</code> Pod，有点抽象，后面要把 <code>foo</code> 改成咱们要实现的 <code>database</code>，原理实际都没变。</li>
</ul>
<p>Controller 结构体中包含了：</p>
<ul>
<li><code>kubernetes</code> 和代码生成器生成的 <code>database</code> 的 <code>clientSet</code>。</li>
<li>Informer 的 Lister，用来从缓存中获取资源。</li>
<li><code>workqueue</code>：Rate Limit 消息队列。
Controller 在运行时实际是一直尝试从 <code>workqueue</code> 中获取资源并处理。Informer 在接收到状态更新后，会把更新的状态入队列，然后另一个 Routine 中会获取到队列中的消息，拿去处理。
（蛮复杂的，这里还是去直接看代码比较好）</li>
</ul>
</li>
</ul>
<h3 id="修改-controller">修改 Controller</h3>
<p>接下来按照上面讲的那样，修改 <code>pkg/apis/databasecontroller/v1alpha1/types.go</code> 中的 <code>Spec</code> 和 <code>Status</code> 字段，<code>Spec</code> 中的字段是你想定义的 Database 的状态，然后 Controller 负责按照你定义的 <code>Spec</code> 去创建 Deployments 并更新 <code>Status</code>。</p>
<p>首先需要把 <code>Foo</code> 改名成 <code>Database</code>，然后编辑 <code>Spec</code> 中的字段，例如数据库所使用的镜像名称及 Tag，<code>Replicas</code> 冗余数以及其他你觉得创建 Deployment 所需的自定义配置。在修改完 <code>Spec</code> 和 <code>Status</code> 后需要重新执行代码生成器。</p>
<p>之后在项目根目录下编辑 <code>controller.go</code>，修改控制器创建 Deployment 的逻辑，把 <code>Foo</code> 对象修改为 <code>Database</code>，然后按照你定义的 <code>Spec</code>，编辑 <code>artifacs/example</code> 目录下的 <code>crd.yaml</code> 和 <code>example-database.yaml</code> 文件，这部分咱就不把详细的步骤写到这里了，你可以根据你的想法尝试编写你的 Controller，在这里遇到问题最好还是自行尝试动手解决。</p>
<h2 id="其他">其他</h2>
<p>后面还有好多关于 Controller 相关的知识点我也还没搞懂，就不写到博客里误导别人了。除了 <code>sample-controller</code> 这种框架的 Controller 之外，还有很多人使用其他的框架编写 Controller，因为很多时候我们更关注于实现业务逻辑，因此可以套用一些 Operator 模板，常用的有 <a href="https://sdk.operatorframework.io/">Operator SDK</a>，可以通过这个工具生成一份 Controller 模板，然后按照你想实现的功能去修改代码即可，还有很多其他 Operator 可供选择，比如 Rancher 的开发者们使用 <a href="https://github.com/rancher/wrangler">Wrangler</a> 编写 Controller，基于 <code>Wrangler</code> 编写的 Rancher 使用的 Operator 有 <a href="https://github.com/rancher/eks-operator">eks-operator</a> 等一堆 Operator，感兴趣的话可以去看看。<code>Wrangler</code> 的 README 中写的这一段蛮有意思的：</p>
<blockquote>
<p>Most people writing controllers are a bit lost as they find that there is nothing in Kubernetes that is like <code>type Controller interface</code> where you can just do <code>NewController</code>. Instead a controller is really just a pattern of how you use the generated clientsets, informers, and listers combined with some custom event handlers and a workqueue.</p>
</blockquote>
<p>之后如果想把你编写的 Controller (Operator) 应用到生产环境，打包给更多的人使用，可以把编译好的 Operator 二进制文件放到容器镜像中，之后使用 <a href="https://helm.sh">Helm</a> 创建一个 &ldquo;应用程序 (Chart)&quot;，通过编写 <a href="https://helm.sh/docs/chart_best_practices/templates/">模板</a>，在安装 Helm Chart 时编辑 <code>values.yaml</code> 中定义的字段来自定义 CRD 的参数。Helm 的模板本质上是 Go Template 模板渲染引擎，所以用起来都是很简单的（确信）。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>使用 Helm Chart 方式部署 Harbor</title>
      <link>https://blog.starry-s.moe/posts/2023/harbor-helm-chart/</link>
      <pubDate>Sun, 28 May 2023 16:49:45 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2023/harbor-helm-chart/</guid>
      <description>&lt;p&gt;打算尝试在咱的 NAS 上搭一个 Harbor Registry Server 玩。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>打算尝试在咱的 NAS 上搭一个 Harbor Registry Server 玩。</p>
<p>首先介绍一下 NAS 上的环境，咱的 Kubernetes 集群运行在几个 QEMU 虚拟机里，虚拟机里运行的是 ArchLinux，因为就是咱折腾着玩的所以使用的 k3s 搭建的轻量级的 kubernetes 集群，然后其中一个集群安装了 Rancher 作为 Local 集群。</p>
<h2 id="环境准备">环境准备</h2>
<ol>
<li>
<p>新建一个 Namespace，将 Harbor 的资源与其他资源隔离：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> kubectl create namespace harbor
</span></span></code></pre></div></li>
<li>
<p>为了启用 HTTPS，提前创建一个 TLS 类型的 <a href="https://kubernetes.io/docs/concepts/configuration/secret/">Secret</a>，存放证书:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> cat &gt; cert.pem &lt;&lt; EOF
</span></span><span class="line"><span class="cl"><span class="go">-----BEGIN CERTIFICATE-----
</span></span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">-----END CERTIFICATE-----
</span></span></span><span class="line"><span class="cl"><span class="go">EOF
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">$</span> cat &gt; cert.key &lt;&lt; EOF
</span></span><span class="line"><span class="cl"><span class="go">-----BEGIN PRIVATE KEY-----
</span></span></span><span class="line"><span class="cl"><span class="go">...
</span></span></span><span class="line"><span class="cl"><span class="go">-----END PRIVATE KEY-----
</span></span></span><span class="line"><span class="cl"><span class="go">EOF
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">$</span> kubectl -n harbor create secret tls harbor-tls <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="go">    --cert=cert.pem \
</span></span></span><span class="line"><span class="cl"><span class="go">    --key=cert.key
</span></span></span></code></pre></div></li>
<li>
<p>提前创建 PVC (<a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/">PersistentVolumeClaim</a>)，咱这里先在 NAS 上新建了一个 NFS 服务器，之后创建了 NFS 类型的 PV (PersistentVolumes)，再基于这个 PV 创建的 PVC。</p>
<p>ArchLinux 上搭建 NFS 服务器：<a href="https://wiki.archlinux.org/title/NFS">https://wiki.archlinux.org/title/NFS</a></p>
<blockquote>
<p>在配置 <code>exports</code> 时，需要配置上 <code>no_root_squash</code> 和 <code>no_subtree_check</code>，使挂载的目录及子目录具有写权限。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="c1"># /etc/exports - exports(5) - directories exported to NFS clients</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Use `exportfs -arv` to reload.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">/</span><span class="k">var</span><span class="o">/</span><span class="n">nfs</span><span class="o">/</span><span class="n">harbor</span>		<span class="mf">10.0</span><span class="o">.</span><span class="mf">0.0</span><span class="o">/</span><span class="mi">8</span><span class="p">(</span><span class="n">rw</span><span class="p">,</span><span class="n">sync</span><span class="p">,</span><span class="n">no_root_squash</span><span class="p">,</span><span class="n">no_subtree_check</span><span class="p">)</span>
</span></span></code></pre></div></blockquote>
</li>
</ol>
<h2 id="获取-helm-chart">获取 Helm Chart</h2>
<p>Harbor 的 Helm Chart 可以在 <a href="https://github.com/goharbor/harbor-helm">GitHub</a> 获取，这里使用将 Chart 源码克隆到本地的方式安装，方便编辑 <code>values.yaml</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> git clone https://github.com/goharbor/harbor-helm.git <span class="o">&amp;&amp;</span> <span class="nb">cd</span> harbor-helm
</span></span><span class="line"><span class="cl"><span class="gp">$</span> git checkout v1.12.1
</span></span></code></pre></div><blockquote>
<p>写这篇博客时 Chart 的最新版本是 <code>v1.12.1</code> (Harbor OSS v2.8.1)。</p>
</blockquote>
<h3 id="编辑-valuesyaml">编辑 <code>values.yaml</code></h3>
<p>Harbor 的配置都定义在了 <code>values.yaml</code> 文件中，根据需要进行修改。</p>
<p>这里列举些常用的可以修改的选项：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">expose</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># expose type, 可以设置为 ingress, clusterIP, nodePort, nodeBalancer，区分大小写</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 默认为 ingress（如果不想使用 80/443 标准端口，可以设置为 nodePort，端口为高位 3000X）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">ingress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 是否启用 TLS (HTTPS)，建议启用</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># TLS Certificate 的来源，可以为 auto, secret 或 none</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 如果为 secret，需要在安装 Chart 之前先创建 TLS Secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 1) auto: generate the tls certificate automatically</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 2) secret: read the tls certificate from the specified secret.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># The tls certificate can be generated manually or by cert manager</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 3) none: configure no tls certificate for the ingress. If the default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># tls certificate is configured in the ingress controller, choose this option</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">certSource</span><span class="p">:</span><span class="w"> </span><span class="l">secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">secret</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># The name of secret which contains keys named:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># &#34;tls.crt&#34; - the certificate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># &#34;tls.key&#34; - the private key</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;harbor-tls&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Only needed when the &#34;expose.type&#34; is &#34;ingress&#34;.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">notarySecretName</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;harbor-tls&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hosts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Ingress Host，如果需要允许任意域名/IP 都能访问，将其设置为空字符串（不建议）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 这里填写的域名务必能解析到当前集群</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">core</span><span class="p">:</span><span class="w"> </span><span class="l">harbor.example.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">notary</span><span class="p">:</span><span class="w"> </span><span class="l">notary.example.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Harbor external URL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 与 Ingress Host 相对应，如果启用了 TLS，那就是 https://&lt;domain&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 如果没启用 TLS，那就是 http://&lt;domain&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 如果 expose type 为 nodePort，则填写 http(s)://&lt;IP_ADDRESS&gt;:3000X (端口号不能丢)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">externalURL</span><span class="p">:</span><span class="w"> </span><span class="l">https://harbor.example.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 持久卷配置，默认为 true，如果是测试环境可以设置为 enabled: false (重新安装 Chart 时仓库里所有的数据都会丢失，不建议！)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 如果需要启用持久卷，可以在安装 Chart 之前提前创建好 PVC，并配置 subPath</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">persistence</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resourcePolicy</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;keep&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">persistentVolumeClaim</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">registry</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 填写已经创建好的 PVC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">existingClaim</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;harbor-pvc&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">storageClass</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 如果共用一个 PVC，需要设置子目录</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;registry&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">accessMode</span><span class="p">:</span><span class="w"> </span><span class="l">ReadWriteOnce</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">size</span><span class="p">:</span><span class="w"> </span><span class="l">5Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">annotations</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jobservice</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">jobLog</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">existingClaim</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;harbor-pvc&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">storageClass</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;jobservice&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">accessMode</span><span class="p">:</span><span class="w"> </span><span class="l">ReadWriteOnce</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">size</span><span class="p">:</span><span class="w"> </span><span class="l">1Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">annotations</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">database</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">existingClaim</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;harbor-pvc&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">storageClass</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;database&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">accessMode</span><span class="p">:</span><span class="w"> </span><span class="l">ReadWriteOnce</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">size</span><span class="p">:</span><span class="w"> </span><span class="l">1Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">annotations</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">redis</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">existingClaim</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;harbor-pvc&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">storageClass</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;redis&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">accessMode</span><span class="p">:</span><span class="w"> </span><span class="l">ReadWriteOnce</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">size</span><span class="p">:</span><span class="w"> </span><span class="l">1Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">annotations</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">trivy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">existingClaim</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;harbor-pvc&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">storageClass</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">subPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;trivy&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">accessMode</span><span class="p">:</span><span class="w"> </span><span class="l">ReadWriteOnce</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">size</span><span class="p">:</span><span class="w"> </span><span class="l">5Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">annotations</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Admin 初始密码</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">harborAdminPassword</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Harbor12345&#34;</span><span class="w">
</span></span></span></code></pre></div><h3 id="安装-helm-chart">安装 Helm Chart</h3>
<p>确保 Values 编辑无误后，就可以安装 Chart 了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> helm --namespace harbor install harbor .
</span></span></code></pre></div><p>如果安装后发现 Values 中有些配置需要修改，可以在修改完配置后以升级的方式使配置生效：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> helm --namespace harbor upgrade harbor .
</span></span></code></pre></div><p>查看 Chart 的 Pods 运行状态：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> kubectl --namespace harbor get pods
</span></span><span class="line"><span class="cl"><span class="go">NAME                                    READY   STATUS    RESTARTS      AGE
</span></span></span><span class="line"><span class="cl"><span class="go">harbor-core-7b75785b64-9vzkx            1/1     Running   0             65m
</span></span></span><span class="line"><span class="cl"><span class="go">harbor-database-0                       1/1     Running   0             77m
</span></span></span><span class="line"><span class="cl"><span class="go">harbor-jobservice-6f4d59bd95-25q44      1/1     Running   2 (65m ago)   65m
</span></span></span><span class="line"><span class="cl"><span class="go">harbor-notary-server-584698b475-lnt99   1/1     Running   1 (60m ago)   65m
</span></span></span><span class="line"><span class="cl"><span class="go">harbor-notary-signer-77685b6f94-pfngc   1/1     Running   0             65m
</span></span></span><span class="line"><span class="cl"><span class="go">harbor-portal-6fb6465fd6-hm4cg          1/1     Running   0             77m
</span></span></span><span class="line"><span class="cl"><span class="go">harbor-redis-0                          1/1     Running   0             77m
</span></span></span><span class="line"><span class="cl"><span class="go">harbor-registry-5bbccf79fb-7hcm9        2/2     Running   0             65m
</span></span></span><span class="line"><span class="cl"><span class="go">harbor-trivy-0                          1/1     Running   0             77m
</span></span></span></code></pre></div><h2 id="其他">其他</h2>
<p>安装完成后，就可以完美使用 Harbor Registry 了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> docker login harbor.example.com
</span></span><span class="line"><span class="cl"><span class="go">Username: admin
</span></span></span><span class="line"><span class="cl"><span class="go">Password:
</span></span></span><span class="line"><span class="cl"><span class="go">WARNING! Your password will be stored unencrypted in /home/user/.docker/config.json.
</span></span></span><span class="line"><span class="cl"><span class="go">Configure a credential helper to remove this warning. See
</span></span></span><span class="line"><span class="cl"><span class="go">https://docs.docker.com/engine/reference/commandline/login/#credentials-store
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">Login Succeeded
</span></span></span></code></pre></div><p>从 DockerHub 中 Mirror 一些镜像到 Harbor 中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> skopeo copy --all docker://archlinux:latest docker://harbor.example.com/library/archlinux:latest
</span></span><span class="line"><span class="cl"><span class="go">Getting image list signatures
</span></span></span><span class="line"><span class="cl"><span class="go">Copying 1 of 1 images in list
</span></span></span><span class="line"><span class="cl"><span class="go">Copying image sha256:076c0233d1996165721320957be9a037a760574d6334281354b07b3b3c9440b1 (1/1)
</span></span></span><span class="line"><span class="cl"><span class="go">Getting image source signatures
</span></span></span><span class="line"><span class="cl"><span class="go">Copying blob f0e04a7b4686 done
</span></span></span><span class="line"><span class="cl"><span class="go">Copying blob 352736306209 done
</span></span></span><span class="line"><span class="cl"><span class="go">Copying config cc4866169d done
</span></span></span><span class="line"><span class="cl"><span class="go">Writing manifest to image destination
</span></span></span><span class="line"><span class="cl"><span class="go">Storing signatures
</span></span></span><span class="line"><span class="cl"><span class="go">Writing manifest list to image destination
</span></span></span><span class="line"><span class="cl"><span class="go">Storing list signatures
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>容器镜像 Manifest 相关内容整理</title>
      <link>https://blog.starry-s.moe/posts/2023/container-manifest/</link>
      <pubDate>Sun, 21 May 2023 01:50:27 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2023/container-manifest/</guid>
      <description>&lt;p&gt;最近总在弄些容器镜像相关的东西，于是分享一些咱自己总结的有关容器镜像 Manifest 格式、常用工具以及代码相关的芝士。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>最近总在弄些容器镜像相关的东西，于是分享一些咱自己总结的有关容器镜像 Manifest 格式、常用工具以及代码相关的芝士。</p>
<meting-js server="netease" type="song" id="590414" theme="#233333"></meting-js>
<h2 id="skopeo">skopeo</h2>
<p><a href="https://github.com/containers/skopeo">skopeo</a> 是一个肥肠好用的容器镜像的辅助工具，常用到的功能有镜像拷贝 (<code>skopeo copy</code>)、镜像 Manifest 查询 (<code>skopeo inspect</code>)等……</p>
<p><code>skopeo</code> 仅支持 Linux 和 macOS 系统。</p>
<h3 id="安装-skopeo">安装 skopeo</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># ArchLinux</span>
</span></span><span class="line"><span class="cl">sudo pacman -S skopeo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># macOS</span>
</span></span><span class="line"><span class="cl">brew install skopeo
</span></span></code></pre></div><p>除此之外还可以使用 <code>skopeo</code> 的容器镜像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> docker run docker://quay.io/skopeo/stable:latest copy --help
</span></span></code></pre></div><blockquote>
<p><code>skopeo</code> 由 Go 编写，但它启用了 <code>cgo</code>，编译的二进制文件需要动态链接第三方依赖，所以不同的系统编译的 skopeo 二进制文件并不一定互相通用，如果你的发行版的官方源没有提供 <code>skopeo</code> 软件包的话，只能手动安装 Go 和 <code>skopeo</code> 的一些依赖，然后 <a href="https://github.com/containers/skopeo/blob/main/install.md#building-from-source">自行编译 skopeo 二进制文件</a>。</p>
</blockquote>
<h3 id="skopeo-copy">skopeo copy</h3>
<p><code>copy</code> 可以灵活的拷贝容器镜像，它可以将容器镜像从 Registry Server 之间拷贝，还可以将镜像从 Registry Server 拷贝到本地的文件夹中，或者像 <code>docker pull</code> 那样拷贝到 Docker Daemon 中。</p>
<p>在执行 <code>skopeo copy</code> 时还可以用 <code>--format</code> 参数指定拷贝过去的容器镜像的格式，用参数 <code>--dest-compress-format</code> 可以指定压缩格式。</p>
<p>将容器镜像从第三方 DockerHub Registry Server 拷贝到自建的 Private Registry Server：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> skopeo copy docker://docker.io/library/nginx:latest docker://private.registry.io/library/nginx:latest --all
</span></span></code></pre></div><p>将镜像从 DockerHub Registry Server 拷贝到本地文件夹中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> mkdir -p nginx
</span></span><span class="line"><span class="cl"><span class="gp">$</span> skopeo copy docker://docker.io/library/nginx:latest dir:./nginx
</span></span></code></pre></div><p>将镜像从本地文件夹中拷贝到 Docker Daemon 中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> skopeo copy dir:./nginx docker-daemon:nginx:latest
</span></span><span class="line"><span class="cl"><span class="gp">$</span> docker images
</span></span><span class="line"><span class="cl"><span class="go">REPOSITORY  TAG       IMAGE ID       CREATED        SIZE
</span></span></span><span class="line"><span class="cl"><span class="go">nginx       latest    448a08f1d2f9   13 days ago    142MB
</span></span></span></code></pre></div><h3 id="skopeo-inspect">skopeo inspect</h3>
<p><code>skopeo inspect</code> 查看容器镜像的信息，例如镜像的 Manifest、Config。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> skopeo inspect docker://docker.io/library/nginx:latest
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">$</span> skopeo inspect docker://docker.io/library/nginx:latest --raw
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">$</span> skopeo inspect docker://docker.io/library/nginx:latest --raw --config
</span></span></code></pre></div><p><code>skopeo inspect</code> 不加任何参数时，查询的是容器镜像相关的信息，输出的内容包括镜像 Digest、该镜像其他的所有 Tag 等一系列信息。</p>
<p>在添加 <code>--raw</code> 参数时，输出的是该镜像的 Manifest 原始信息，因为是 RAW，所以输出的 Json 可能格式不是很友好，通常与 <code>jq</code> 一起使用。</p>
<p>添加 <code>--raw</code> 和 <code>--config</code> 参数后，输出的是该镜像的 Config 的原始信息，Config 中包括容器运行时的一些配置项等信息。</p>
<h2 id="manifest">Manifest</h2>
<p>Docker 文档 <a href="https://docs.docker.com/registry/spec/manifest-v2-1/">Registry image manifests</a> 中介绍了几种常见的 Docker 镜像的 Manifest 格式。</p>
<hr>
<p>可以通过 <a href="https://github.com/containers/skopeo">skopeo</a> 工具，从 Docker Hub 上挑一个容器镜像 (例如 <code>nginx:latest</code>)，查看这个镜像的 Manifest。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="c1">// skopeo inspect docker://nginx:latest --raw | jq
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;manifests&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:3f01b0094e21f7d55b9eb7179d01c49fdf9c3e1e3419d315b81a9e0bae1b6a90&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.docker.distribution.manifest.v2+json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;platform&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;architecture&#34;</span><span class="p">:</span> <span class="s2">&#34;amd64&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;os&#34;</span><span class="p">:</span> <span class="s2">&#34;linux&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">1570</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:bc4cb92540db42f21dd806c4451f33b623a9b6441c882e8554325f3a3702da76&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.docker.distribution.manifest.v2+json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;platform&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;architecture&#34;</span><span class="p">:</span> <span class="s2">&#34;arm&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;os&#34;</span><span class="p">:</span> <span class="s2">&#34;linux&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;variant&#34;</span><span class="p">:</span> <span class="s2">&#34;v5&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">1570</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="err">......</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.docker.distribution.manifest.list.v2+json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;schemaVersion&#34;</span><span class="p">:</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这里输出的 json object 的 <code>schemaVersion</code> 为 2，<code>mediaType</code> 为 <code>application/vnd.docker.distribution.manifest.list.v2+json</code>。</p>
<h3 id="schemaversion--mediatype">schemaVersion &amp; mediaType</h3>
<p>容器镜像的 Manifest 有很多种不同的格式，先列举一下常见的 Docker 镜像的 Manifest 格式：</p>
<ol>
<li>
<p><code>schemaVersion: 1</code>, <code>mediaType: &quot;application/vnd.docker.distribution.manifest.v1+json&quot;</code></p>
<p>旧版本的 Docker 使用这种 Manifest 格式，现已被弃用，有些旧的容器镜像依旧是这种格式的 Manifest。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="c1">// skopeo inspect docker://mysql:5.5.40 --raw | jq
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;library/mysql&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;5.5.40&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;architecture&#34;</span><span class="p">:</span> <span class="s2">&#34;amd64&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;fsLayers&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;blobSum&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="err">......</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;history&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="err">......</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;schemaVersion&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;signatures&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="err">......</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>(输出太长了所以我把不关键的内容省略掉了……)</p>
<p>这里用 <code>docker.io/library/mysql:5.5.40</code> 这个镜像举例，实际这个镜像的 Manifest 格式为 <code>schemaVersion: 1</code>，<code>mediaType: &quot;application/vnd.docker.distribution.manifest.v1+prettyjws&quot;</code>，因为包含了签名信息。</p>
</li>
<li>
<p><code>schemaVersion: 2</code>, <code>mediaType: &quot;application/vnd.docker.distribution.manifest.v2+json&quot;</code></p>
<p>这个是现在常见的 Docker 镜像的 Manifest 格式。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="c1">// skopeo inspect docker://hxstarrys/nginx:1.22-amd64 --raw | jq
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nt">&#34;schemaVersion&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.docker.distribution.manifest.v2+json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="nt">&#34;config&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.docker.container.image.v1+json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">7898</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:0f8498f13f3adef3f3c8b52cdf069ecc880b081159be6349163d144e8aa5fb29&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="nt">&#34;layers&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.docker.image.rootfs.diff.tar.gzip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">31411405</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:f1f26f5702560b7e591bef5c4d840f76a232bf13fd5aefc4e22077a1ae4440c7&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.docker.image.rootfs.diff.tar.gzip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">25573496</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:fd03b214f77493ccb73705ac5417f16c7625a7ea7ea997e939c9241a3296763b&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="err">......</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>这个格式的 Manifest 包含了镜像的 Config 的信息以及 Layer 的格式和 Digest 信息。</p>
</li>
<li>
<p><code>schemaVersion: 2</code>, <code>mediaType: &quot;application/vnd.docker.distribution.manifest.list.v2+json&quot;</code></p>
<p>这个格式的 Manifest List 包含一个 <code>manifests</code> 列表：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="c1">// skopeo inspect docker://docker.io/library/nginx:1.22 --raw | jq
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.docker.distribution.manifest.list.v2+json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="nt">&#34;schemaVersion&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="nt">&#34;manifests&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.docker.distribution.manifest.v2+json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:9081064712674ffcff7b7bdf874c75bcb8e5fb933b65527026090dacda36ea8b&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">1570</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;platform&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;architecture&#34;</span><span class="p">:</span> <span class="s2">&#34;amd64&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;os&#34;</span><span class="p">:</span> <span class="s2">&#34;linux&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.docker.distribution.manifest.v2+json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:cf4ffe24f08a167176c84f2779c9fc35c2f7ce417b411978e384cbe63525b420&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">1570</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;platform&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;architecture&#34;</span><span class="p">:</span> <span class="s2">&#34;arm64&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;os&#34;</span><span class="p">:</span> <span class="s2">&#34;linux&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>例如在 x86_64 (amd64) 架构的 Linux 主机上拉取 TAG <code>docker.io/library/nginx:1.22</code> 时，会根据此 Manifest List，拉取 Digest 为 <code>sha256:9081064712674ffcff7b7bdf874c75bcb8e5fb933b65527026090dacda36ea8b</code> 的镜像。在 aarch64 (arm64v8) 架构的 Linux 主机上拉取此 TAG 时，会根据 Manifest List，拉取 Digest 为 <code>sha256:cf4ffe24f08a167176c84f2779c9fc35c2f7ce417b411978e384cbe63525b420</code> 的镜像，在其他 OS 的主机上无法拉取这个 TAG 对应的镜像 (例如在 arm32v7 的 Linux 主机上拉取会失败)。</p>
<p><code>manifests</code> 列表中，每个 <code>digest</code> 字段存储的是这个镜像的 Manifest 内容的 sha256 校验和。</p>
<p>可以用 <code>skopeo inspect</code> 查看一下这个 digest 的镜像的 Manifest 内容，其格式为
<code>schemaVersion: 2</code>, <code>mediaType: &quot;application/vnd.docker.distribution.manifest.v2+json&quot;</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="c1">// skopeo inspect docker://nginx@sha256:9081064712674ffcff7b7bdf874c75bcb8e5fb933b65527026090dacda36ea8b --raw | jq
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;schemaVersion&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.docker.distribution.manifest.v2+json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;config&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.docker.container.image.v1+json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">7898</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:0f8498f13f3adef3f3c8b52cdf069ecc880b081159be6349163d144e8aa5fb29&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;layers&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.docker.image.rootfs.diff.tar.gzip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">31411405</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="err">&#34;sha</span><span class="mi">256</span><span class="p">:</span><span class="err">f</span><span class="mi">1</span><span class="err">f</span><span class="mi">26</span><span class="err">f</span><span class="mi">5702560</span><span class="err">b</span><span class="mf">7e591</span><span class="err">bef</span><span class="mi">5</span><span class="err">c</span><span class="mi">4</span><span class="err">d</span><span class="mi">840</span><span class="err">f</span><span class="mi">76</span><span class="err">a</span><span class="mi">232</span><span class="err">bf</span><span class="mi">13</span><span class="err">fd</span><span class="mi">5</span><span class="err">aefc</span><span class="mf">4e22077</span><span class="err">a</span><span class="mi">1</span><span class="err">ae</span><span class="mi">4440</span><span class="err">c</span><span class="mi">7</span><span class="s2">&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        },
</span></span></span><span class="line"><span class="cl"><span class="s2">        {
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;</span><span class="err">mediaType</span><span class="s2">&#34;: &#34;</span><span class="err">application/vnd.docker.image.rootfs.diff.tar.gzip</span><span class="s2">&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;</span><span class="err">size</span><span class="s2">&#34;: 25573496,
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;</span><span class="err">digest</span><span class="s2">&#34;: &#34;</span><span class="err">sha</span><span class="mi">256</span><span class="p">:</span><span class="err">fd</span><span class="mi">03</span><span class="err">b</span><span class="mi">214</span><span class="err">f</span><span class="mi">77493</span><span class="err">ccb</span><span class="mi">73705</span><span class="err">ac</span><span class="mi">5417</span><span class="err">f</span><span class="mi">16</span><span class="err">c</span><span class="mi">7625</span><span class="err">a</span><span class="mi">7</span><span class="err">ea</span><span class="mi">7</span><span class="err">ea</span><span class="mf">997e939</span><span class="err">c</span><span class="mi">9241</span><span class="err">a</span><span class="mi">3296763</span><span class="err">b</span><span class="s2">&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        },
</span></span></span><span class="line"><span class="cl"><span class="s2">        {
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;</span><span class="err">mediaType</span><span class="s2">&#34;: &#34;</span><span class="err">application/vnd.docker.image.rootfs.diff.tar.gzip</span><span class="s2">&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;</span><span class="err">size</span><span class="s2">&#34;: 626,
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;</span><span class="err">digest</span><span class="s2">&#34;: &#34;</span><span class="err">sha</span><span class="mi">256</span><span class="p">:</span><span class="err">ef</span><span class="mi">2</span><span class="err">fc</span><span class="mi">869</span><span class="err">b</span><span class="mi">944</span><span class="err">b</span><span class="mi">87</span><span class="err">eaf</span><span class="mi">25</span><span class="err">f</span><span class="mi">4</span><span class="err">c</span><span class="mi">92953</span><span class="err">dc</span><span class="mi">69736</span><span class="err">d</span><span class="mi">5</span><span class="err">d</span><span class="mi">05</span><span class="err">aa</span><span class="mi">09</span><span class="err">f</span><span class="mi">66</span><span class="err">f</span><span class="mi">54</span><span class="err">b</span><span class="mi">0</span><span class="err">eea</span><span class="mf">598e13</span><span class="err">c</span><span class="mi">9</span><span class="err">c</span><span class="s2">&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        },
</span></span></span><span class="line"><span class="cl"><span class="s2">        {
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;</span><span class="err">mediaType</span><span class="s2">&#34;: &#34;</span><span class="err">application/vnd.docker.image.rootfs.diff.tar.gzip</span><span class="s2">&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;</span><span class="err">size</span><span class="s2">&#34;: 958,
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;</span><span class="err">digest</span><span class="s2">&#34;: &#34;</span><span class="err">sha</span><span class="mi">256</span><span class="p">:</span><span class="err">ac</span><span class="mi">713</span><span class="err">a</span><span class="mi">9</span><span class="err">ef</span><span class="mi">2</span><span class="err">cca</span><span class="mi">7</span><span class="err">a</span><span class="mf">82e27</span><span class="err">f</span><span class="mi">0</span><span class="mf">277e4</span><span class="err">e</span><span class="mi">3</span><span class="err">d</span><span class="mi">25</span><span class="err">c</span><span class="mi">64</span><span class="err">d</span><span class="mi">1</span><span class="err">cf</span><span class="mf">31e4</span><span class="err">acd</span><span class="mi">798562</span><span class="err">d</span><span class="mi">5532742</span><span class="err">f</span><span class="mi">5</span><span class="err">ef</span><span class="s2">&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        },
</span></span></span><span class="line"><span class="cl"><span class="s2">        {
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;</span><span class="err">mediaType</span><span class="s2">&#34;: &#34;</span><span class="err">application/vnd.docker.image.rootfs.diff.tar.gzip</span><span class="s2">&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;</span><span class="err">size</span><span class="s2">&#34;: 773,
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;</span><span class="err">digest</span><span class="s2">&#34;: &#34;</span><span class="err">sha</span><span class="mi">256</span><span class="p">:</span><span class="err">fd</span><span class="mi">071922</span><span class="err">d</span><span class="mf">543e072</span><span class="err">b</span><span class="mi">21</span><span class="err">cb</span><span class="mi">41</span><span class="err">a</span><span class="mi">513634657049</span><span class="err">d</span><span class="mi">632</span><span class="err">fe</span><span class="mi">48</span><span class="err">cfed</span><span class="mi">240</span><span class="err">be</span><span class="mi">2369</span><span class="err">f</span><span class="mi">998403</span><span class="s2">&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        },
</span></span></span><span class="line"><span class="cl"><span class="s2">        {
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;</span><span class="err">mediaType</span><span class="s2">&#34;: &#34;</span><span class="err">application/vnd.docker.image.rootfs.diff.tar.gzip</span><span class="s2">&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;</span><span class="err">size</span><span class="s2">&#34;: 1405,
</span></span></span><span class="line"><span class="cl"><span class="s2">            &#34;</span><span class="err">digest</span><span class="s2">&#34;: &#34;</span><span class="err">sha</span><span class="mi">256</span><span class="p">:</span><span class="mi">2</span><span class="err">a</span><span class="mi">9</span><span class="err">f</span><span class="mi">38700</span><span class="err">bb</span><span class="mi">5</span><span class="err">a</span><span class="mi">0</span><span class="mf">462e326</span><span class="err">fe</span><span class="mi">3541</span><span class="err">b</span><span class="mi">45</span><span class="err">f</span><span class="mi">24</span><span class="err">a</span><span class="mi">677</span><span class="err">ac</span><span class="mi">3</span><span class="err">cd</span><span class="mi">386</span><span class="err">c</span><span class="mi">4922</span><span class="err">d</span><span class="mi">48</span><span class="err">da</span><span class="mi">5</span><span class="err">fbb</span><span class="mi">6</span><span class="err">f</span><span class="mi">0</span><span class="err">a</span><span class="mi">8</span><span class="err">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>镜像的 Digest 实际上是这个镜像的 Manifest 内容的 sha256sum 校验和：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> skopeo inspect --raw docker://nginx@sha256:9081064712674ffcff7b7bdf874c75bcb8e5fb933b65527026090dacda36ea8b
</span></span><span class="line"><span class="cl"><span class="go">{
</span></span></span><span class="line"><span class="cl"><span class="go">    &#34;schemaVersion&#34;: 2,
</span></span></span><span class="line"><span class="cl"><span class="go">    &#34;mediaType&#34;: &#34;application/vnd.docker.distribution.manifest.v2+json&#34;,
</span></span></span><span class="line"><span class="cl"><span class="go">    &#34;config&#34;: {
</span></span></span><span class="line"><span class="cl"><span class="go">        &#34;mediaType&#34;: &#34;application/vnd.docker.container.image.v1+json&#34;,
</span></span></span><span class="line"><span class="cl"><span class="go">        &#34;size&#34;: 7898,
</span></span></span><span class="line"><span class="cl"><span class="go">        &#34;digest&#34;: &#34;sha256:0f8498f13f3adef3f3c8b52cdf069ecc880b081159be6349163d144e8aa5fb29&#34;
</span></span></span><span class="line"><span class="cl"><span class="go">    },
</span></span></span><span class="line"><span class="cl"><span class="go">    ......
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">$</span> skopeo inspect --raw docker://nginx@sha256:9081064712674ffcff7b7bdf874c75bcb8e5fb933b65527026090dacda36ea8b <span class="p">|</span> sha256sum
</span></span><span class="line"><span class="cl"><span class="go">9081064712674ffcff7b7bdf874c75bcb8e5fb933b65527026090dacda36ea8b  -
</span></span></span></code></pre></div><p>同理，Config 的 Digest 为镜像的 Config 内容的 sha256sum 校验和：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> skopeo inspect --raw --config docker://nginx@sha256:9081064712674ffcff7b7bdf874c75bcb8e5fb933b65527026090dacda36ea8b <span class="p">|</span> sha256sum
</span></span><span class="line"><span class="cl"><span class="go">0f8498f13f3adef3f3c8b52cdf069ecc880b081159be6349163d144e8aa5fb29  -
</span></span></span></code></pre></div></li>
</ol>
<hr>
<p>除了上面的几种 Docker 镜像的 Manifest 格式外，还有 <a href="https://github.com/opencontainers/image-spec/blob/main/manifest.md">OCI 容器镜像</a> 这种格式的 Manifest:</p>
<ol>
<li><code>schemaVersion: 2</code>, <code>mediaType: &quot;application/vnd.oci.image.manifest.v1+json&quot;</code>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="c1">// skopeo inspect docker://quay.io/skopeo/stable@sha256:9da6763a4d35592a6279e851738472d9cdaa8ff5a5da3c50b560f065d22c2bff --raw | jq
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;schemaVersion&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.oci.image.manifest.v1+json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;config&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.oci.image.config.v1+json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:6acf3c9f5dd48704618fa7ec2b95968a45c9e7809926a1f90f383bea4e9b3ede&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">3032</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;layers&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.oci.image.layer.v1.tar+gzip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:529411ad578ab92819185dd8ef493eaa1eecc4f62b2ed2199db99ae23e6bf4cd&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">73881106</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.oci.image.layer.v1.tar+gzip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:eeaa0b0d534352a9398996bcff9dc1184a78d310c22800aa6de07a6e2b1f8864&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">54520878</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.oci.image.layer.v1.tar+gzip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:5ebf46cd2e6b356313b1dce504191fefce45df90dd8b5df7fe6b8cdd0fd06667&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">1849</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.oci.image.layer.v1.tar+gzip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:d4779f97b4911cd73b8bbe8b96c6759b6f5c210928020e0c351294e7136aeb94&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">4061</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.oci.image.layer.v1.tar+gzip&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:f2e09c14b28b7453b48d13aace7cef657580e3b1cfdc0be8cfb9e685862a068f&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">228</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;annotations&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;org.opencontainers.image.base.digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:7acf70fa27721ef08357823d79324a19d7e9b0d34873c93f33a1b654d784e3c4&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;org.opencontainers.image.base.name&#34;</span><span class="p">:</span> <span class="s2">&#34;registry.fedoraproject.org/fedora:latest&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
<li><code>schemaVersion: 2</code>, <code>mediaType: &quot;application/vnd.oci.image.index.v1+json&quot;</code>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="c1">// skopeo inspect docker://quay.io/skopeo/stable:latest --raw | jq
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;schemaVersion&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.oci.image.index.v1+json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;manifests&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.oci.image.manifest.v1+json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:3f678eca3035c64243c70598efeb4f60ef06a07b156444e21feed9488d47944b&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">1239</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;platform&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;architecture&#34;</span><span class="p">:</span> <span class="s2">&#34;arm64&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;os&#34;</span><span class="p">:</span> <span class="s2">&#34;linux&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;mediaType&#34;</span><span class="p">:</span> <span class="s2">&#34;application/vnd.oci.image.manifest.v1+json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;digest&#34;</span><span class="p">:</span> <span class="s2">&#34;sha256:72464a265722c05436b5f46b9247929a882e73462f33ac1c000f4a34094fc90c&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;size&#34;</span><span class="p">:</span> <span class="mi">1239</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;platform&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;architecture&#34;</span><span class="p">:</span> <span class="s2">&#34;amd64&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;os&#34;</span><span class="p">:</span> <span class="s2">&#34;linux&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></li>
</ol>
<h2 id="library">Library</h2>
<p><a href="https://github.com/containers">containers</a> 和 <a href="https://github.com/opencontainers">opencontainers</a> Org 提供了许多容器镜像相关的 Go Library，例如：</p>
<ul>
<li><a href="https://github.com/containers/image">containers/image</a></li>
<li><a href="https://github.com/containers/common">containers/common</a></li>
<li><a href="https://github.com/opencontainers/image-spec">opencontainers/image-spec</a></li>
</ul>
<p>Docker Manifest 格式的定义位于代码：<a href="https://github.com/containers/image/blob/main/manifest/manifest.go">containers/image/v5/manifest</a></p>
<p>OCI 容器镜像的 Manifest 格式定义位于代码：<a href="https://github.com/opencontainers/image-spec/blob/main/specs-go/v1/mediatype.go">opencontainers/image-spec/specs-go/v1</a></p>
<p><code>skopeo inspect</code> 的代码位于 <a href="https://github.com/containers/skopeo/blob/main/cmd/skopeo/inspect.go">containers/skopeo/cmd/skopeo/inspect.go</a>，<code>skopeo</code> 用了 <a href="https://github.com/spf13/cobra">cobra</a> 框架来处理用户的命令行参数（这里悄悄安利一下 <code>cobra</code> 框架真的很好用，尤其是当你的程序有许多的子命令，每个子命令需要处理的参数还都不一样的情况），执行查询镜像 Manifest 的代码都在 <code>run</code> 函数里面。</p>
<hr>
<p>下面是咱写的一个栗子，使用上述的 Library 模拟一下 <code>skopeo inspect</code> 查看容器镜像 Manifest 的功能，其实查看容器镜像 Manifest 的代码实现还是蛮简单的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">example</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;encoding/json&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/containers/image/v5/transports/alltransports&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/containers/image/v5/types&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Test_Inspect</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// reference name format: docker://&lt;image&gt;:&lt;tag&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">refName</span> <span class="o">:=</span> <span class="s">&#34;docker://docker.io/library/nginx:latest&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ref</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">alltransports</span><span class="p">.</span><span class="nf">ParseImageName</span><span class="p">(</span><span class="nx">refName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;ParseImageName: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">sysCtx</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">types</span><span class="p">.</span><span class="nx">SystemContext</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DockerAuthConfig</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">types</span><span class="p">.</span><span class="nx">DockerAuthConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Username</span><span class="p">:</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="c1">// docker username (optional)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">Password</span><span class="p">:</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="c1">// docker password (optional)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// set to true if server is HTTP or using insecure certificate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">OCIInsecureSkipTLSVerify</span><span class="p">:</span>    <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DockerInsecureSkipTLSVerify</span><span class="p">:</span> <span class="nx">types</span><span class="p">.</span><span class="nf">NewOptionalBool</span><span class="p">(</span><span class="kc">false</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">source</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ref</span><span class="p">.</span><span class="nf">NewImageSource</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">sysCtx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;NewImageSource: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span><span class="p">,</span> <span class="nx">mime</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">source</span><span class="p">.</span><span class="nf">GetManifest</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;GetManifest: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Manifest mediaType: %v\n&#34;</span><span class="p">,</span> <span class="nx">mime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Manifest RAW data: \n%v\n&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// reformat output
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">obj</span> <span class="nx">any</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">obj</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Unmarshal: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">MarshalIndent</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="s">&#34;  &#34;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;MarshalIndent: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;===================================\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Manifest data: \n%v\n&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><hr>
<p>接下来，是构建 Manifest List 索引的一个简单栗子，假设你分别向 Registry Server 上传了 <code>&lt;namespace&gt;/example:v1.0.0-amd64</code> 和 <code>&lt;namespace&gt;/example:v1.0.0-arm64</code> 两个不同架构的容器镜像，你希望用户在 AMD64 架构的主机上拉取 <code>&lt;namespace&gt;/example:v1.0.0</code> 的 TAG 时，自动拉取 <code>&lt;namespace&gt;/example:v1.0.0-amd64</code> 这个镜像，而在 ARM64 架构的主机上拉取时，自动拉取 <code>&lt;namespace&gt;/example:v1.0.0-arm64</code> 这个镜像。</p>
<blockquote>
<p>这里说的 Manifest List 实际是 <code>schemaVersion 2</code>, <code>mediaType: &quot;application/vnd.docker.distribution.manifest.list.v2+json&quot;</code></p>
<p>基本上你可以使用任何的 Registry Server，但 Harbor V1 除外，因为 Harbor V1 不支持 Manifest List。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">example</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;crypto/sha256&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;encoding/json&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/containers/image/v5/manifest&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/containers/image/v5/transports/alltransports&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/containers/image/v5/types&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/opencontainers/go-digest&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">sha256sum</span><span class="p">(</span><span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sum</span> <span class="o">:=</span> <span class="nx">sha256</span><span class="p">.</span><span class="nf">Sum256</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%x&#34;</span><span class="p">,</span> <span class="nx">sum</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getManifest</span><span class="p">(</span><span class="nx">refName</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">ctx</span> <span class="o">*</span><span class="nx">types</span><span class="p">.</span><span class="nx">SystemContext</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// reference name format: docker://&lt;image&gt;:&lt;tag&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ref</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">alltransports</span><span class="p">.</span><span class="nf">ParseImageName</span><span class="p">(</span><span class="nx">refName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;ParseImageName: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">source</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ref</span><span class="p">.</span><span class="nf">NewImageSource</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;NewImageSource: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">source</span><span class="p">.</span><span class="nf">GetManifest</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Test_BuildManifest</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// reference name format: docker://&lt;image&gt;:&lt;tag&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">refName</span> <span class="o">:=</span> <span class="s">&#34;docker://&lt;REGISTRY_URL:PORT&gt;/&lt;NAMESPACE&gt;/example:v1.0.0&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ref</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">alltransports</span><span class="p">.</span><span class="nf">ParseImageName</span><span class="p">(</span><span class="nx">refName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;ParseImageName: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">sysCtx</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">types</span><span class="p">.</span><span class="nx">SystemContext</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DockerAuthConfig</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">types</span><span class="p">.</span><span class="nx">DockerAuthConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Username</span><span class="p">:</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="c1">// registry username (required)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">Password</span><span class="p">:</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="c1">// registry password (required)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// set to true if server is HTTP or using insecure certificate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">OCIInsecureSkipTLSVerify</span><span class="p">:</span>    <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DockerInsecureSkipTLSVerify</span><span class="p">:</span> <span class="nx">types</span><span class="p">.</span><span class="nf">NewOptionalBool</span><span class="p">(</span><span class="kc">false</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">manifestList</span> <span class="o">:=</span> <span class="nx">manifest</span><span class="p">.</span><span class="nx">Schema2List</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">SchemaVersion</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MediaType</span><span class="p">:</span>     <span class="nx">manifest</span><span class="p">.</span><span class="nx">DockerV2ListMediaType</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Manifests</span><span class="p">:</span>     <span class="p">[]</span><span class="nx">manifest</span><span class="p">.</span><span class="nx">Schema2ManifestDescriptor</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// add amd64 data
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">data</span><span class="p">,</span> <span class="nx">mime</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">getManifest</span><span class="p">(</span><span class="s">&#34;docker://&lt;REGISTRY_URL:PORT&gt;/&lt;NAMESPACE&gt;/example:v1.0.0-amd64&#34;</span><span class="p">,</span> <span class="nx">sysCtx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;getManifest: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">manifestList</span><span class="p">.</span><span class="nx">Manifests</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">manifestList</span><span class="p">.</span><span class="nx">Manifests</span><span class="p">,</span> <span class="nx">manifest</span><span class="p">.</span><span class="nx">Schema2ManifestDescriptor</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Schema2Descriptor</span><span class="p">:</span> <span class="nx">manifest</span><span class="p">.</span><span class="nx">Schema2Descriptor</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">MediaType</span><span class="p">:</span> <span class="nx">mime</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Size</span><span class="p">:</span>      <span class="nb">int64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Digest</span><span class="p">:</span>    <span class="nx">digest</span><span class="p">.</span><span class="nf">Digest</span><span class="p">(</span><span class="nf">sha256sum</span><span class="p">(</span><span class="nx">data</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Platform</span><span class="p">:</span> <span class="nx">manifest</span><span class="p">.</span><span class="nx">Schema2PlatformSpec</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Architecture</span><span class="p">:</span> <span class="s">&#34;amd64&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OS</span><span class="p">:</span>           <span class="s">&#34;linux&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OSVersion</span><span class="p">:</span>    <span class="s">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Variant</span><span class="p">:</span>      <span class="s">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// add arm64 data
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">data</span><span class="p">,</span> <span class="nx">mime</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">getManifest</span><span class="p">(</span><span class="s">&#34;docker://&lt;REGISTRY_URL:PORT&gt;/&lt;NAMESPACE&gt;/example:v1.0.0-arm64&#34;</span><span class="p">,</span> <span class="nx">sysCtx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;getManifest: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">manifestList</span><span class="p">.</span><span class="nx">Manifests</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">manifestList</span><span class="p">.</span><span class="nx">Manifests</span><span class="p">,</span> <span class="nx">manifest</span><span class="p">.</span><span class="nx">Schema2ManifestDescriptor</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Schema2Descriptor</span><span class="p">:</span> <span class="nx">manifest</span><span class="p">.</span><span class="nx">Schema2Descriptor</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">MediaType</span><span class="p">:</span> <span class="nx">mime</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Size</span><span class="p">:</span>      <span class="nb">int64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Digest</span><span class="p">:</span>    <span class="nx">digest</span><span class="p">.</span><span class="nf">Digest</span><span class="p">(</span><span class="nf">sha256sum</span><span class="p">(</span><span class="nx">data</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Platform</span><span class="p">:</span> <span class="nx">manifest</span><span class="p">.</span><span class="nx">Schema2PlatformSpec</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Architecture</span><span class="p">:</span> <span class="s">&#34;arm64&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OS</span><span class="p">:</span>           <span class="s">&#34;linux&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OSVersion</span><span class="p">:</span>    <span class="s">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Variant</span><span class="p">:</span>      <span class="s">&#34;v8&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">dest</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ref</span><span class="p">.</span><span class="nf">NewImageDestination</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">sysCtx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;NewImageSource: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">MarshalIndent</span><span class="p">(</span><span class="nx">manifestList</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="s">&#34;  &#34;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;MarshalIndent: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">dest</span><span class="p">.</span><span class="nf">PutManifest</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">data</span><span class="p">,</span> <span class="kc">nil</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;PutManifest: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>构建 Manifest 的栗子中，用到了一部分 Manifest 的代码，用来获取 amd64 架构的镜像和 arm64 架构镜像的 Manifest 文本长度，并计算 Digest。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>咱今年的五一旅行游记</title>
      <link>https://blog.starry-s.moe/posts/2023/2023-05-01/</link>
      <pubDate>Mon, 08 May 2023 00:37:04 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2023/2023-05-01/</guid>
      <description>&lt;p&gt;回忆前几天的旅行就仿佛在回忆一场睡了很长的梦一样……&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>回忆前几天的旅行就仿佛在回忆一场睡了很长的梦一样……</p>
<p>起初是没打算去那么远的地方旅游的，本来打算五一假期在沈阳那些我没去过的地方逛一逛就行，但是后来想了一下可以在平时周末的时候再去沈阳周边我没去过的地方，毕竟离得近，而这个难得的小长假不如去更远一点的地方玩一玩，于是想起来三年前就有去成都的打算了，但是由于种种原因一直拖到了现在，刚好我有几个大学同学在成都，于是最后看了一下机票价格降到了比较合理的水平就决定去四川成都玩了，之后因为成都离重庆很近所以决定先去成都溜达一趟，再去重庆逛一圈。</p>
<p>所以这次的旅行记录就参照四年前咱一个人去上海的旅行那样，把每天的事情简单的回忆一下并记录到这里吧。</p>
<meting-js server="netease" type="song" id="1367709776" theme="#233333"></meting-js>
<h2 id="4月27日">4月27日</h2>
<p>咱是请了几天年假打算错峰去旅行的，所以旅行是从27号开始，在出发之前沈阳迎来了一次大降温于是发烧感冒了好几天，在看完了沈阳的春天的最后一场雪之后（没错，快到5月份的时候沈阳下了一场雪），拖着生病还没完全康复身子出发去机场坐飞机前往成都……</p>
<p>当时尽管身体因为还在生病没力气，但因为记错了飞机起飞的时间所以那天一大早就一直在忙着收拾行李跑去机场，根本管不上什么身体难受不难受的了……</p>
<p>沈阳到成都的飞机飞了4个多小时，北方的天气也不是很好所以没在飞机上拍什么照片，到成都之后已经是晚上了所以那天一整天都没怎么拍风景的照片。</p>
<p>不过晚上去了同学家拍了一阵子他那一柜子的手办……</p>
<p><img loading="lazy" src="images/day1/photo_1.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day1/photo_2.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day1/photo_3.jpg" alt="" />

</p>
<h2 id="4月28日">4月28日</h2>
<p>因为出发前并没做攻略，咱就简单的查了一下成都的几个网红打卡点，于是28号那天坐地铁去了成都的野生大能猫基地。趁着人不是很多，可以比较安静舒服的在大森林里面一边溜达一边给大能猫拍照。</p>
<p>那天成都一整天都在下小雨，然后我感冒没完全好，身体基本上是拿感冒药硬扛的，所以出了很多汗，加上下雨十分潮湿，我的双手得抱着相机所以没打伞，所以在能猫基地逛了一圈后上半身全湿了。</p>
<p><img loading="lazy" src="images/day2/IMG_1209.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day2/IMG_1247.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day2/IMG_1239.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day2/IMG_1255.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day2/IMG_1360.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day2/IMG_1267.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day2/IMG_1379.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day2/IMG_1383.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day2/IMG_1389.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day2/IMG_1414.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day2/IMG_1457.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day2/IMG_1421_1.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day2/IMG_1427_1.jpg" alt="" />

</p>
<p>然后是在第一天坐飞机的时候无意间发现我的手机摄像头拍照时照片放大后有几个细微的紫色的斑点，于是傍晚时去了太古里的苹果店约了服务人员帮我检测一下，最终得到的答复是镜头被激光扫到了导致的，尽管我买了AC+但是换镜头需要掏六百多的维修费用，因为相机的紫色斑点不是很严重所以掏六百多块钱维修的话不是很划算，于是回去和同学愉快的恰了一顿烤肉就撤了。</p>
<h2 id="4月29日">4月29日</h2>
<p>五一假期的第一天，和同学去了成都的西部国际博览城，逛了一天的漫展，当时腿都要走断了……</p>
<p><img loading="lazy" src="images/day3/IMG_1509.jpg" alt="" />

</p>
<p>所以这个红石公园有没有红石？MC 玩家狂喜（bushi</p>
<hr>
<p><img loading="lazy" src="images/day3/IMG_1541.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day3/IMG_2826.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day3/IMG_2836.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day3/IMG_2842.JPG" alt="" />

</p>
<p>最后这张照片，能拍到蒂法和克劳德的组合，感觉这次来成都漫展简直值了。当时在漫展找了一下午的克劳德都没找到他，最后碰到了蒂法后刚想给她拍照时突然遇到了准备回去的克劳德，于是赶紧喊过来和蒂法一起合照，真的当时他们摆出姿势后一下子就回想起了去年夏天玩 FF7 前几章时的感觉了，真的太激动了……</p>
<hr>
<p>晚上和同学恰了成都的火锅，因为担心会不会狠辣所以要了微辣的锅底，但后来吃起来觉得微辣不够辣，不是十分过瘾……</p>
<h2 id="4月30日">4月30日</h2>
<p>五一假期的第二天依旧是去西博城的漫展，拍了好多coser的照片……</p>
<p><img loading="lazy" src="images/day4/IMG_3002.jpg" alt="" />

</p>
<p>上午办完酒店退租后在写字楼的楼底下拍到了这只独自蹲在角落的小熊。</p>
<p><img loading="lazy" src="images/day4/IMG_3107.jpg" alt="" />

</p>
<p>之后是拖着行李箱去的漫展，在漫展那里找了存包的地方，顺便给举存包牌牌的小姐姐拍了张照。</p>
<p><img loading="lazy" src="images/day4/IMG_2907.jpg" alt="" />

</p>
<p>铃芽户缔</p>
<hr>
<p>之后是拍到的一些很漂亮的coser……</p>
<p><img loading="lazy" src="images/day4/IMG_2933.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day4/IMG_2939.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day4/IMG_2970.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day4/IMG_2988.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day4/IMG_3023.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day4/IMG_3110.jpg" alt="" />

</p>
<p>因为这几天一直在到处溜达走路，所以逛漫展基本上都是走几步就得找个地方坐下休息一会……</p>
<hr>
<p>晚上坐高铁从成都东站前往重庆，因为到重庆之后是晚上所以有一点点迷路，拿手机导航绕了好几个圈……</p>
<p>到重庆时因为赶上五一的高峰期，旅店的价格很贵，尽管我是提前定的，但还是两百多块钱定了一个很普通（甚至有点破）的房间，还没有独立卫浴……</p>
<blockquote>
<p>西南地区尽管还没进入夏天但已经开始湿热起来，不能洗澡是真的要命……</p>
</blockquote>
<h2 id="5月1日">5月1日</h2>
<p><img loading="lazy" src="images/day5/IMG_3165.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day5/IMG_3163.jpg" alt="" />

</p>
<p>因为听说重庆的轨道交通蛮有名的，所以想去看一下比较知名的2号线李子坝站，就是那个把地铁车站修到了楼里的车站。</p>
<p><img loading="lazy" src="images/day5/IMG_3164.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day5/IMG_3162.jpg" alt="" />

</p>
<p>但实际去了之后，因为人太多了光是从车站下车后下楼就挤了十多分钟，所以体验并不是很好，在马路上抬头看车站实际上也就觉得是地铁（单轨）从楼里穿了过去而已，没啥稀奇的，但毕竟来都来了……</p>
<p>因为人特别多所以我不打算从李子坝站挤回去坐地铁了，而是徒步从李子坝站走到牛角沱站去坐3号线，尽可能的把人流错开。</p>
<p>因为听说重庆的洪崖洞那边人特别多，加上下午实在是太热了，我去旅游的时候光想着会不会冷了所以带的都是厚衣服……一件短袖都没有带。于是在网上找了一下重庆的漫展，前往了重庆的国家会展中心……</p>
<p><del>果然二刺猿还是应该去二刺猿该去的地方……</del></p>
<p><img loading="lazy" src="images/day5/IMG_3159.jpg" alt="" />

</p>
<p>傍晚漫展结束的时候，因为实在是太热了浑身出汗都湿透了，已经捂出痱子了，就坐地铁去了附近的瓦达瓜叉找了一家优衣库买了一件短袖换上了。</p>
<p>在万达的麦当劳吃完晚饭后，坐地铁去了重庆的朝天门。</p>
<p><img loading="lazy" src="images/day5/IMG_3114.jpg" alt="" />

</p>
<p>到朝天门穿过商场之后，一直沿着江边的路往洪崖洞方向步行，一开始人还不是很多，但快到千厮门嘉陵江大桥后人就变得特别的多，于是在附近拍了一些照片后决定不去洪崖洞里面，想办法徒步离开这里。</p>
<p><img loading="lazy" src="images/day5/IMG_3156.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day5/IMG_3113.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day5/IMG_3112.jpg" alt="" />

</p>
<p>因为听说重庆把跨江大桥封了专门供游客通行，所以我也趁着人不是很多的时候从桥下的江边的路绕（爬山）到了大桥上边。</p>
<p>快登桥的时候人巨多，非常的挤，但所有人都很有秩序，一点点的往前移动。</p>
<p>所以走了几个小时之后终于登上了千厮门嘉陵江大桥，拍了一些照片，但实在是太累了没有掏相机拍照，手机的夜景效果比较勉强。</p>
<p><img loading="lazy" src="images/day5/001.jpg" alt="" />

</p>
<p>因为江对面的第一个地铁站人很多，进站要排队，所以咱徒步走到了下一个地铁站，坐9号线回去的。</p>
<p><img loading="lazy" src="images/day5/IMG_3105.jpg" alt="" />

</p>
<blockquote>
<p>六十九号线哈哈哈哈哈……</p>
</blockquote>
<p>这一天走了相当远的距离，步数达到了2W步，但实际咱的运动量可不只这两万步，从19年到现在很久没走过这么多步了……</p>
<h2 id="5月2日">5月2日</h2>
<p>因为返程的飞机是晚上的，所以白天还可以逛一天，上午在酒店收拾完东西，因为实在是走不动路了，也不想白天顶着大太阳去旅游景点，所以下午又去了重庆的漫展，在漫展基本上都是找地方坐着。</p>
<p>顺便拍了一些照片。</p>
<p><img loading="lazy" src="images/day6/IMG_3142.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day6/IMG_3143.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day6/IMG_3146.jpg" alt="" />

</p>
<p>晚上坐飞机前往郑州，在郑州新郑机场过夜……</p>
<h2 id="5月3日">5月3日</h2>
<p>抵达郑州时已经是凌晨1点多了，在郑州机场的候机大厅里只睡了几个小时，因为没有可以躺的地方，所以后来实在困得受不了了就抱着行李箱开睡……</p>
<p>郑州飞沈阳的飞机上咱基本上一直在睡觉，只有空乘在发水和早餐时是醒着的。</p>
<p>在重庆机场候机的时候突然意识到5月3号下午还可以再从沈阳玩半天（确信），于是又买了一张沈阳漫展的票，去找之前认识的人在漫展上给他们拍照……</p>
<p><img loading="lazy" src="images/day7/IMG_3327.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day7/IMG_3381.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/day7/IMG_3438.jpg" alt="" />

</p>
<p>回去的时候已经困得睁不开眼睛了，叫了出租车睡了一路……</p>
<hr>
<meting-js server="netease" type="song" id="22730073" theme="#233333"></meting-js>
<p>回想一下咱五一假期逛了三个城市，一共五天的漫展，还去了一些其他的旅游景点……</p>
<p>算是报复性旅游吧，其实一开始没打算这么高强度旅行的，但玩着玩着就成了特种兵式旅游了……</p>]]></content:encoded>
    </item>
    
    <item>
      <title>咱的摄影日记 - 2023 春</title>
      <link>https://blog.starry-s.moe/posts/2023/spring-2023/</link>
      <pubDate>Sat, 22 Apr 2023 01:07:53 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2023/spring-2023/</guid>
      <description>&lt;p&gt;从去年的春天到现在已经过去一年了……&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>从去年的春天到现在已经过去一年了……</p>
<p><img loading="lazy" src="images/001.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/002.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/003.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/004.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/005.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/006.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/007.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/008.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/009.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/010.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/010-1.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/011.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/012.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/013.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/014.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/014-1.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/015.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/016.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/017.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/018.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/019.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/020.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/021.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/022.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/023.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/024.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/025.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/026.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/027.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/028.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/029.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/030.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/031.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/034.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/035.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/036.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/032.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/033.jpg" alt="" />

</p>]]></content:encoded>
    </item>
    
    <item>
      <title>“关于我逛了一趟漫展然后换了新的相机和镜头这件事”</title>
      <link>https://blog.starry-s.moe/posts/2023/canon-eos-r7/</link>
      <pubDate>Fri, 24 Feb 2023 22:50:26 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2023/canon-eos-r7/</guid>
      <description>&lt;p&gt;年初逛了一趟漫展之后突然想换新的相机了，因为对手里的 EOS 800D 成像不是很满意，暗光的高感表现很差，ISO 800 的时候 RAW 格式稍微拉一下阴影就会出现许多噪点，所以打算换个更专业点的相机，开拓些新的领域。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>年初逛了一趟漫展之后突然想换新的相机了，因为对手里的 EOS 800D 成像不是很满意，暗光的高感表现很差，ISO 800 的时候 RAW 格式稍微拉一下阴影就会出现许多噪点，所以打算换个更专业点的相机，开拓些新的领域。</p>
<hr>
<p>预算方面我把相机和镜头控制在了 1W 出头，尽管这个价位能买到前几年的全画幅微单，但是综合考虑了一阵子后还是入手了佳能去年新出的 APS-C 画幅的 R7，用转接环可以搭配我已有的 EF/EF-S 镜头，能稍微节省一点镜头的开销，主要是我还挺喜欢手里的适马 17-50 这个镜头的。</p>
<p>因为 RF 卡口的镜头价格太贵了，所以入手相机之后搜了一些评价不错的 EF-S 镜头，于是就买了广角镜头适马 18-35，所以最终还是超预算了。</p>
<p>相机到了之后试着到处溜达拍了一些照片，用着记忆里很久以前用诺基亚自学摄影时的那点知识拍了些照片，挑几张自认为觉得还行的照片放在这里。</p>
<p><img loading="lazy" src="images/1.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/2.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/3.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/4.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/6.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/7.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/5.jpg" alt="" />

</p>
<p>第一张是在中街用适马 17-50 拍的，后面那几张是在买了适马 18-35 之后去辽宁省博物馆拍的，最后一张是笨蛋公主的 Q 版手办，也是用适马 18-35 拍的，这几张我就稍微调了颜色，没有其他后期，很久没练习拍照了，这几张图就看看就行。</p>
<p><del>拿巨沉的人像广角镜头去拍实物特写，唉我真的是不知道咋想的……</del></p>]]></content:encoded>
    </item>
    
    <item>
      <title>入手一台家用级 APC UPS</title>
      <link>https://blog.starry-s.moe/posts/2023/apc-ups/</link>
      <pubDate>Sun, 08 Jan 2023 11:05:02 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2023/apc-ups/</guid>
      <description>&lt;p&gt;为了让咱的 NAS 长时间稳定运行，斥巨资买了一台 APC BK650M2-CH，在 Arch Wiki 上看 APC 的 UPS 对 Linux 的支持比较友好，于是挑了个最便宜的带停电自动关机的 APC UPS，防止咱啥时候忘了交电费导致停电数据受损。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>为了让咱的 NAS 长时间稳定运行，斥巨资买了一台 APC BK650M2-CH，在 Arch Wiki 上看 APC 的 UPS 对 Linux 的支持比较友好，于是挑了个最便宜的带停电自动关机的 APC UPS，防止咱啥时候忘了交电费导致停电数据受损。</p>
<blockquote>
<p>参烤链接: <a href="https://wiki.archlinux.org/title/APC_UPS">APC UPS - ArchWiki</a></p>
</blockquote>
<hr>
<p>UPS 到手后花了半个多小时读使用说明书，然后第一件事是把 UPS 的断电报警蜂鸣器关掉，省得我不在公寓的时候停电了 UPS 叫个没完吵到邻居。</p>
<p>之后在装 UPS 之前先把我电脑支架背面一团电线重新整理了一遍，现在是台式机、显示器、NAS、光猫、路由器、无线 AP 都放在一起了，他们的电源线、网线、数据线、显示器线都团在了一起，整理起来炒鸡麻烦。</p>
<p>先把漏油器、光猫和 NAS 的电源都插 UPS 上，然后接好 UPS 的 USB 数据线到 NAS 上。</p>
<h2 id="安装-apcupsd">安装 apcupsd</h2>
<p>安装 <code>apcupsd</code>，然后 <code>systemctl enable --now apcupsd.service</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> sudo apcaccess status
</span></span><span class="line"><span class="cl"><span class="go">APC      : 001,036,0869
</span></span></span><span class="line"><span class="cl"><span class="go">DATE     : 2023-01-08 11:09:23 +0800
</span></span></span><span class="line"><span class="cl"><span class="go">HOSTNAME : ApertureNAS
</span></span></span><span class="line"><span class="cl"><span class="go">VERSION  : 3.14.14 (31 May 2016) unknown
</span></span></span><span class="line"><span class="cl"><span class="go">UPSNAME  : ApertureNAS
</span></span></span><span class="line"><span class="cl"><span class="go">CABLE    : USB Cable
</span></span></span><span class="line"><span class="cl"><span class="go">DRIVER   : USB UPS Driver
</span></span></span><span class="line"><span class="cl"><span class="go">UPSMODE  : Stand Alone
</span></span></span><span class="line"><span class="cl"><span class="go">STARTTIME: 2023-01-02 23:57:44 +0800
</span></span></span><span class="line"><span class="cl"><span class="go">MODEL    : Back-UPS BK650M2-CH
</span></span></span><span class="line"><span class="cl"><span class="go">STATUS   : ONLINE
</span></span></span><span class="line"><span class="cl"><span class="go">......
</span></span></span></code></pre></div><p>先把 NAS 里所有的应用都停掉，之后编辑 <code>/etc/apcupsd/apcupsd.conf</code>，把 <code>TIMEOUT</code> 改为 <code>1</code>，然后给 UPS 断电，这时 NAS 会自动关机。</p>
<blockquote>
<p>UPS 重新连接电源后，NAS 可能会自动开机，我的 NAS 是这样，但不确定所有 NAS 都这样。</p>
</blockquote>
<h2 id="配置自动休眠">配置自动休眠</h2>
<p>按照 Wiki 配置停电后自动休眠 (Hibernate / 休眠到硬盘)。</p>
<blockquote>
<p>在此之前，需要创建 swap 分区 (或 swap file)，然后配置休眠需要的内核参数并重构 <code>initramfs</code>。</p>
</blockquote>
<p>以 root 用户创建 <code>/usr/local/bin/hibernate</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># Hibernate the system - designed to be called via symlink from /etc/apcupsd</span>
</span></span><span class="line"><span class="cl"><span class="c1"># directory in case of apcupsd initiating a shutdown/reboot.  Can also be used</span>
</span></span><span class="line"><span class="cl"><span class="c1"># interactively or from any script to cause a hibernate.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 可以在这里加一些在休眠之前执行的操作，例如让 bot 发个邮件提醒停电了之类的</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Wall message</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 广播消息</span>
</span></span><span class="line"><span class="cl">wall -n System will be hibernate soon
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sleep <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Do the hibernate</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 执行休眠</span>
</span></span><span class="line"><span class="cl">/usr/bin/systemctl hibernate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># At this point system should be hibernated - when it comes back, we resume this script here</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 现在，系统应当已经休眠了，当系统恢复运行的时候，脚本会继续从这里执行</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 可以在这里加一些在系统恢复之后的操作，例如让 bot 发个邮件提醒电力恢复了啥的</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># On resume, tell controlling script (/etc/apcupsd/apccontrol) NOT to continue with default action (i.e. shutdown).</span>
</span></span><span class="line"><span class="cl"><span class="nb">exit</span> <span class="m">99</span>
</span></span></code></pre></div><p>别忘了赋予可执行权限。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">#</span> chmod +x /usr/local/bin/hibernate
</span></span></code></pre></div><p>创建软链接把脚本链接到 <code>/etc/apcupsd</code> 目录下面。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">#</span> ln -s /usr/local/bin/hibernate /etc/apcupsd/doshutdown
</span></span></code></pre></div><p>此时给 UPS 断电后，NAS 会自动休眠，等一两分钟 NAS 会完成休眠，但 UPS 仍处于运行状态没有关机，长时间停电的话，UPS 的电量会耗尽。</p>
<p>UPS 接回电源后，NAS 会从休眠中恢复。</p>
<h3 id="配置休眠后关闭-ups-电源">配置休眠后关闭 UPS 电源</h3>
<p>创建 <code>/usr/lib/systemd/system-sleep/ups-kill</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">case</span> <span class="nv">$2</span> in
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># In the event the computer is hibernating.</span>
</span></span><span class="line"><span class="cl">  hibernate<span class="o">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="nv">$1</span> in
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="c1"># Going into a hibernate state.</span>
</span></span><span class="line"><span class="cl">       pre<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">         <span class="c1"># See if this is a powerfail situation.</span>
</span></span><span class="line"><span class="cl">         <span class="k">if</span> <span class="o">[</span> -f /etc/apcupsd/powerfail <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">           <span class="nb">echo</span>
</span></span><span class="line"><span class="cl">           <span class="nb">echo</span> <span class="s2">&#34;ACPUPSD will now power off the UPS&#34;</span>
</span></span><span class="line"><span class="cl">           <span class="nb">echo</span>
</span></span><span class="line"><span class="cl">           /etc/apcupsd/apccontrol killpower
</span></span><span class="line"><span class="cl">           <span class="nb">echo</span>
</span></span><span class="line"><span class="cl">           <span class="nb">echo</span> <span class="s2">&#34;Please ensure that the UPS has powered off before rebooting&#34;</span>
</span></span><span class="line"><span class="cl">           <span class="nb">echo</span> <span class="s2">&#34;Otherwise, the UPS may cut the power during the reboot!!!&#34;</span>
</span></span><span class="line"><span class="cl">           <span class="nb">echo</span>
</span></span><span class="line"><span class="cl">         <span class="k">fi</span>
</span></span><span class="line"><span class="cl">       <span class="p">;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="c1"># Coming out of a hibernate state.</span>
</span></span><span class="line"><span class="cl">       post<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">         <span class="c1"># If there are remnants from a powerfail situation, remove them.</span>
</span></span><span class="line"><span class="cl">         <span class="k">if</span> <span class="o">[</span> -f /etc/apcupsd/powerfail <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">           rm /etc/apcupsd/powerfail
</span></span><span class="line"><span class="cl">         <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">         <span class="c1"># This may also exist, need to remove it.</span>
</span></span><span class="line"><span class="cl">         <span class="k">if</span> <span class="o">[</span> -f /etc/nologin <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">           rm /etc/nologin
</span></span><span class="line"><span class="cl">         <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	 <span class="c1"># Restart the daemon; otherwise it may be unresponsive in a</span>
</span></span><span class="line"><span class="cl">         <span class="c1"># second powerfailure situation.</span>
</span></span><span class="line"><span class="cl">	 systemctl restart apcupsd
</span></span><span class="line"><span class="cl">       <span class="p">;;</span>
</span></span><span class="line"><span class="cl">    <span class="k">esac</span>
</span></span><span class="line"><span class="cl">  <span class="p">;;</span>
</span></span><span class="line"><span class="cl"><span class="k">esac</span>
</span></span></code></pre></div><p>赋予可执行权限：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">#</span> chmod +x /usr/lib/systemd/system-sleep/ups-kill
</span></span></code></pre></div><p>接下来给 UPS 断电，NAS 会自动休眠，等 NAS 休眠后再过几分钟 UPS 也会关机。</p>
<p>UPS 关机后，给 UPS 接上电源，这时 UPS 会自动开机，然后 NAS 也会从休眠中恢复。</p>
<blockquote>
<p>不要在 UPS 还没关机的时候给 UPS 重新接回电源，会导致 UPS 关机后 NAS 刚从休眠中恢复就被强制断电。</p>
</blockquote>
<h2 id="其他">其他</h2>
<p>折腾 UPS 的时候顺手给 NAS 换了个散热器升级了一下内存。AMD 原装散热器有亿点点吵所以换成了咱之前买的 ITX 散热器。</p>
<figure>
    <img loading="lazy" src="images/1.jpg"/> 
</figure>

<p>用咱写的 telebot 查看一下空载时的 CPU 温度才不到 30 度。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">CPU: +28.2°C
</span></span><span class="line"><span class="cl">Uptime: 0.15 Hour
</span></span><span class="line"><span class="cl">TotalRAM: 46.45G
</span></span><span class="line"><span class="cl">FreeRAM: 42.66G
</span></span><span class="line"><span class="cl">AvailableRAM: 43.91G
</span></span><span class="line"><span class="cl">TotalSwap: 46.00G
</span></span><span class="line"><span class="cl">FreeSwap: 46.00G
</span></span></code></pre></div><p>运行一个虚拟机一个 MineCraft 服务器，CPU 温度不到 40，所以很安静。</p>
<p>但是 UPS 它有噪音，晚上睡觉的时候能听见 UPS 它嗡嗡响，比 AMD 散热器的风扇动静还大，这个实在是无解，算了就先这样吧。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Hello 2023</title>
      <link>https://blog.starry-s.moe/posts/2023/hello-2023/</link>
      <pubDate>Mon, 02 Jan 2023 01:20:31 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2023/hello-2023/</guid>
      <description>&lt;p&gt;2023 新年快乐。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>2023 新年快乐。</p>
<meting-js server="netease" type="song" id="592364" theme="#233333"></meting-js>
<hr>
<p><img loading="lazy" src="images/2.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/1.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/3.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/4.jpg" alt="" />

</p>]]></content:encoded>
    </item>
    
  </channel>
</rss>
