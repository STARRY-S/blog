<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>2022 on STARRY-S&#39; Blog</title>
    <link>https://blog.starry-s.moe/posts/2022/</link>
    <description>Recent content in 2022 on STARRY-S&#39; Blog</description>
    <image>
      <title>STARRY-S&#39; Blog</title>
      <url>https://blog.starry-s.moe/avatar.png</url>
      <link>https://blog.starry-s.moe/avatar.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>© 2016 - 2023 STARRY-S | [CC BY-NC-ND 4.0](https://creativecommons.org/licenses/by-nc-nd/4.0/) | Hosted on [GitHub Pages](https://pages.github.com)</copyright>
    <lastBuildDate>Sat, 01 Jan 2022 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.starry-s.moe/posts/2022/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NAS 装机记录</title>
      <link>https://blog.starry-s.moe/posts/2022/build-nas/</link>
      <pubDate>Sat, 12 Nov 2022 13:25:03 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2022/build-nas/</guid>
      <description>&lt;p&gt;差不多去年的这个时候尝试过用树莓派插移动硬盘的方式试探性的组装了一个 NAS，但实际上用了不到两天这个方案就被废弃掉了……&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>差不多去年的这个时候尝试过用树莓派插移动硬盘的方式试探性的组装了一个 NAS，但实际上用了不到两天这个方案就被废弃掉了……</p>
<meting-js server="netease" type="song" id="22682819" theme="#233333"></meting-js>
<h2 id="起因">起因</h2>
<p>不用树莓派的原因是，它是 ARM 架构的微型“电脑”，Arch Linux 官方只支持 x86_64 架构的系统，Arch Linux ARM 准确来说实际上是个第三方的系统。
然后树莓派的性能很差，只有一个板载网卡和 2.4G 无线网卡（我手里的是树莓派 3B），所以这玩意实际上更适合做嵌入式什么的，或者给初学者折腾入门 Linux 来用（但是看了眼现在树莓派的售价，我想应该不会有初学者买树莓派入门 Linux 了）。</p>
<p>后来买了 NanoPi R4S 软路由，它内置了一个 RK3399 CPU，虽然也是 ARM 架构但是性能对于软路由来说很够用了，当时也是给它折腾了 Arch Linux ARM 系统还依次尝试了 <code>systemd-networkd</code> 和 <code>netctl</code> 给它的两个网口配置路由，但折腾归折腾，这种方式并不稳定，在日常使用过程中经常遇到重启路由器后上不去网的情况，还要手动 SSH 到路由器中再重启一次网络服务和防火墙才恢复。虽然手动改网络组件的配置文件的方式配置个路由器更底层些，这个过程也能更好的体会到路由器的一些原理，但是这种方案并不适合长期日常使用，我可不希望动不动家里路由器莫名其妙就断网了还要手动 SSH 到系统里查一堆日志后才能重连网络。</p>
<p>之后我把手里的 R4S 卖掉了，因为 NanoPi 新发布了性价比更高且功耗更低的，拥有俩 2.5G LAN 网口，还有一个 M2 插槽和内置了 8G 闪存的 R5S。我给它安装了更适合路由器使用的基于 OpenWRT 构建的 FriendlyWRT 系统，这个系统内置了 Docker 和一些常用的应用（网络共享、Aria2、硬盘自动休眠之类的），在把光猫改桥接后，用它来做我的主路由器。然后把手里一块空闲的 2T 移动硬盘连接到路由器上，设置了 OpenWRT 的网络共享 (Samba) 服务后，实验性的当作我的 NAS 来使用。</p>
<p>之所以是“实验性”的“NAS”，是因为我不确定 USB 连接移动硬盘的方式是否稳定，因为移动硬盘对供电有一定要求，我并不确定路由器的 USB 接口能否稳定的为硬盘供电，就算连接一块硬盘供电够用的话，我不确定连接两块以上的硬盘组磁盘阵列还能不能带得动，尽管这个问题能通过一根 USB 供电线来解决，但是我那半个巴掌大小的路由器上面既要插三根巨粗无比的 7 类网线，又要插硬盘和 USB 供电线，还要再占用一个插座插一个手机充电器给移动硬盘供电，这也太混乱了点，毕竟机械硬盘在读写过程中很怕震动，我在插拔网线或者插座上其他的电器时都避免不了的会对那块移动硬盘产生震动。</p>
<p>然后路由器毕竟是路由器，你即要它负责整个家庭几十个网络设备的路由功能，又要跑 Samba 服务器，还要往里面装一些“上网插件”的话，对 CPU 的性能还是有一定要求的。因为我的路由器和电脑都有 2.5G 网口，所以我实际测试过当通过 Samba 拷贝文件的速度接近于 200MB/S 时，路由器的 CPU 4个核心就会全跑到 100%，然后拷贝就卡住了，时间久了文件就拷贝失败了（然后我不得不又设置了 QoS 把 2.5G 的网口限速成千兆网口）。</p>
<p>所以最好的办法还是把 NAS 和路由器分开，路由器就用来做路由器该做的事情，NAS 就做 NAS 该做的事情。</p>
<blockquote>
<p>以上就是我组装 NAS 的整个心路历程，如果觉得上面这一大堆太磨叽的话，直接看下面就好了。</p>
</blockquote>
<hr>
<h2 id="配置清单">配置清单</h2>
<ul>
<li>机箱：乔伯思 N1</li>
<li>主板：映泰 B550T-SILVER ITX</li>
<li>CPU：AMD R7 5700G</li>
<li>内存：英睿达 8G 2666</li>
<li>固态：闪迪 500G NVME</li>
<li>硬盘：东芝 MG08ACA16TE * 1</li>
<li>电源：Tt SFX钢影 450W</li>
<li>其他：乐扩 4 口 2.5G PCIE 网卡</li>
</ul>
<p>系统盘是之前折腾软路由时剩下的一块 500G 的 NVME 固态，除此之外双十一的时候还买了一块东芝的 16T 企业盘。</p>
<hr>
<p>本来想把除硬盘外的整体预算控制在 2K 以内的，但实际上光主板 + CPU 就两千多了……</p>
<p>在深水宝上有更便宜的 5600G + B450 ITX 套装，但是这种来路不明的主板和散片 CPU 尽管便宜了几百块钱但是我也不知道它的 CPU 有没有“锻炼”过，主板有没有换过啥零件，反正我是不敢买。所以挑了好久，决定提高了预算，在狗东买的全新的板 U 套装，选的这个带板载 2.5G 网卡的主板，毕竟我可不想贪小便宜吃大亏。</p>
<p>散热器目前用的是 AMD 盒装 CPU 带的散热，听说这个散热器在拆的时候极有可能会把 CPU 连根拔起，但是我有一个闲置的利民的 itx 散热器放在老家了没拿过来，所以现在只好先用原装的过度一下。</p>
<p>本来是没打算买机械硬盘的，想着先用移动硬盘连在 NAS 上先用一阵子的，不过双十一硬盘便宜了好多，信用卡分三期还能再减 50，所以就先买了一块，估计够我用很长时间的了。</p>
<h2 id="装机">装机</h2>
<p><img loading="lazy" src="images/001.jpg" alt="" />

</p>
<p>映泰的这块板子是不带无线网卡的，但送了一个 WIFI5 的无线网卡，需要手动安装上去，当时废了九牛二虎之力才接上了这两根 SMA 线……。</p>
<p><img loading="lazy" src="images/002.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/003.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/004.jpg" alt="" />

</p>
<p>然后走线的过程其实还挺顺利的，插上主板 24PIN、CPU 8PIN 和 SATA 供电以及风扇、机箱前面板跳线和 USB、音频线之外就完事了，找一些空隙把这些线绑起来就好了，说实话走线的过程可比之前给先马趣造装机容易多了，毕竟少了两根显卡供电线和一堆风扇的电源线还有 RGB 灯的线……</p>
<h2 id="装系统">装系统</h2>
<p>NAS 的系统我采用的是 Arch Linux。首先，选一个 NAS 的系统肯定要优先考虑更适合做服务器的 Linux，其次 FreeNAS 这个系统是基于 FreeBSD/Unix 的，我就是单纯的不想用 BSD 所以就把它排除在方案外了（但是 NAS 里装一个虚拟机跑 FreeNAS 也不是不可以），至于网上总能听到的黑群晖我对这种盗版 + 闭源的系统很反感，所以想都不要想了。提到 Linux 的服务器发行版肯定有人更偏向于 Debian 以及 Debian 衍生的服务器系统以及红帽系列的被经常用在服务器的那些企业常用 Linux 系统，但是我只想用我熟悉的 Arch Linux。Arch Linux 的 Wiki 中有介绍过，Arch Linux 的思维是这个系统并不针对某类应用场景，而是让 Arch 的用户自己配置自己的系统来应用在哪些场景，所以理论上是可以把 Arch Linux 配置成一个适合应用在服务器上的系统，实际上也有 <code>vps2arch</code> 这个“黑魔法”脚本可以一键把 VPS 上已安装的其他 Linux 系统转成 Arch Linux。如果在这里你非要和我较真哪个 Linux 发行版好，哪个 Linux 发行版不好的话，我觉得这并不属于一个技术范围该讨论的问题而是一个哲学问题。</p>
<p>安装教程在 Wiki 上就能找到，这里不再赘述，安装系统时需要装一些网络相关的软件，我配置网络使用的是 <code>netctl</code>，因为觉得 <code>systemd-networkd</code> 不怎么好用，我对 NetworkManager 不怎么熟悉所以就没装这个。然后配置无线连接时还需要用到 <code>wpa_supplicant</code>。</p>
<h3 id="配置网络">配置网络</h3>
<p>我的 NAS 上面一共有 5 个网口，其中一个网口为板载的 2.5G 网口，另外四个网口为 2.5G 的 PCIE 网口，我当初买这个 PCIE 网卡的时候想的是给它配置个桥接当交换机来用，这样只买一块网卡肯定比买个 4 口交换机便宜，因此装系统后配置网络这部分是重头戏，Arch Linux Wiki 上对配置桥接这部分只是简单介绍了几句就完事了，所以这部分我足足花了两个晚上才全部搞定。</p>
<p>首先创建 <code>netctl</code> 的配置文件 <code>/etc/netctl/bridge-br0</code> (文件名可以随意修改)，新创建一个虚拟的桥接接口 <code>br0</code>，这个虚拟的桥接网口绑定了上述的5个网口。我打算将板载的网口 (<code>enp9s0</code>) 连接路由器，然后那 4 个 PCIE 网卡的接口 (<code>enp3s0</code> - <code>enp6s0</code>) 用来连接其他网络设备，所以要将 <code>br0</code> 的 MAC 地址设定为 <code>enp9s0</code> 的 MAC 地址。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> cat /etc/netctl/bridge-br0
</span></span><span class="line"><span class="cl"><span class="go">Description=&#34;Example Bridge connection&#34;
</span></span></span><span class="line"><span class="cl"><span class="go">Interface=br0       # 接口的名称
</span></span></span><span class="line"><span class="cl"><span class="go">Connection=bridge   # 桥接模式
</span></span></span><span class="line"><span class="cl"><span class="go">BindsToInterfaces=(enp9s0 enp6s0 enp5s0 enp4s0 enp3s0)  # 将 br0 绑到 5 个物理网口上
</span></span></span><span class="line"><span class="cl"><span class="go">MACAddress=enp9s0   # 设定 br0 的 MAC 地址与 enp9s0 接口的 MAC 地址一致
</span></span></span><span class="line"><span class="cl"><span class="go">IP=dhcp             # 以 DHCP 的方式为 br0 获取 IP 地址
</span></span></span></code></pre></div><p>除此之外还要配置 <code>enp9s0</code> 接口的配置文件 <code>/etc/netctl/noip-enp9s0</code>，<strong>不要让这个接口自动获取 IP 地址</strong>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> cat /etc/netctl/noip-enp9s0
</span></span><span class="line"><span class="cl"><span class="go">Description=&#39;Example configuration&#39;
</span></span></span><span class="line"><span class="cl"><span class="go">Interface=enp9s0
</span></span></span><span class="line"><span class="cl"><span class="go">Connection=ethernet
</span></span></span><span class="line"><span class="cl"><span class="go">IP=no
</span></span></span></code></pre></div><p>之后执行以下命令使以上两个配置文件生效。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">#</span> netctl <span class="nb">enable</span> bridge-br0
</span></span><span class="line"><span class="cl"><span class="gp">#</span> netctl start bridge-br0
</span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="gp">#</span> netctl <span class="nb">enable</span> noip-enp9s0
</span></span><span class="line"><span class="cl"><span class="gp">#</span> netctl start noip-enp9s0
</span></span></code></pre></div><p>顺利的话，执行 <code>ip addr</code> 可以看到新增加了一个 <code>br0</code> 网口 （不顺利的话就重启一下，再检查一下除了 <code>netctl</code> 之外是不是有别的配置网络的应用产生了干扰），然后原有的 5 个网口都绑定到了 <code>br0</code> 接口上了（接口的那一行出现了 <code>br0</code>）。</p>
<p>然后 <code>enp9s0</code> 接口正常来讲是不应该从路由器上获取到 IP 地址的了，取而代之的是 <code>br0</code> 接口从路由器的 DHCP 服务器中获取了一个 IP 地址，然后 <code>br0</code> 接口的 MAC 地址和 <code>enp9s0</code> 接口的 MAC 地址都一致才对。</p>
<p>以下是一个简单的栗子，在不考虑 IPv6 的情况 <code>ip a</code> 的输出是类似酱紫的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> ip addr
</span></span><span class="line"><span class="cl"><span class="go">1: enp3s0: &lt;NO-CARRIER,BROADCAST,MULTICAST,PROMISC,UP&gt; mtu 1500 qdisc fq_codel master br0 state DOWN group default qlen 1000
</span></span></span><span class="line"><span class="cl"><span class="go">    link/ether ab:cd:ef:xx:xx:xx brd ff:ff:ff:ff:ff:ff
</span></span></span><span class="line"><span class="cl"><span class="go">2: enp4s0: &lt;NO-CARRIER,BROADCAST,MULTICAST,PROMISC,UP&gt; mtu 1500 qdisc fq_codel master br0 state DOWN group default qlen 1000
</span></span></span><span class="line"><span class="cl"><span class="go">    link/ether ab:cd:ef:xx:xx:xx brd ff:ff:ff:ff:ff:ff
</span></span></span><span class="line"><span class="cl"><span class="go">    这里 enp3s0 - enp6s0 这四个接口的情况基本一致所以在此省略
</span></span></span><span class="line"><span class="cl"><span class="go">    ......
</span></span></span><span class="line"><span class="cl"><span class="go">5: enp9s0: &lt;BROADCAST,MULTICAST,PROMISC,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel master br0 state UP group default qlen 1000
</span></span></span><span class="line"><span class="cl"><span class="go">    link/ether f4:bb:22:xx:xx:xx brd ff:ff:ff:ff:ff:ff
</span></span></span><span class="line"><span class="cl"><span class="go">    ......
</span></span></span><span class="line"><span class="cl"><span class="go">6: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000
</span></span></span><span class="line"><span class="cl"><span class="go">    link/ether f4:bb:22:xx:xx:xx brd ff:ff:ff:ff:ff:ff
</span></span></span><span class="line"><span class="cl"><span class="go">    inet 10.10.10.233/24 brd 10.10.10.255 scope global dynamic noprefixroute br0
</span></span></span><span class="line"><span class="cl"><span class="go">       valid_lft 1606601sec preferred_lft 1375801sec
</span></span></span><span class="line"><span class="cl"><span class="go">    ......
</span></span></span></code></pre></div><p>至此，NAS 是可以与路由器下的同一局域网内的其他设备互相访问的，然后检查下 <code>/etc/resolv.conf</code> 如果 DNS 配置正确了的话，也是可以访问到公网的，执行 <code>curl baidu.com</code> 是应该有返回的内容的。</p>
<p>但是我们目前只配置了 NAS 自身的板载网口 (<code>enp9s0</code>) 与 <code>br0</code> 虚拟网口的桥接这部分，现在其他设备通过网线插到 PCIE 网卡的那4个接口是上不去网的。</p>
<p>在计网课程中，老师曾反复强调路由器和交换机的区别，路由器是 OSI 七层模型中的网络层的设备，而交换机是第二层的数据链路层的设备，但光是这么讲的话，死记硬背是能记住这两个设备之间的区别，但这种知识实在过于抽象，很难真正的理解，况且这个“网络模型”是按照已有的网络设备给它拆分成不同的层的，而并不是先制定出了分层的标准然后让设备严格按照这个模型去制作的，所以现在市面上卖的网络设备并没有体现出所谓的分层，不同的网络层之间的界限实际上是很模糊的。在网上搜这方面资料的时候看到有人把路由器称作“3 层交换机”，而常说的那种交换机则称为“2 层交换机”。说实话我也没彻底的搞明白数据链路层和网络层以及路由器和交换机之间的具体区别，不过往简单了说，可以把路由器看成是一个根据 IP 地址在不同的网段之间分发数据的设备，而交换机是通过 MAC 地址，只在一个网段内分发数据的设备，市面上常见的售卖的“路由器”商品实际上是一个真正意义上的路由器 + 交换机 + DHCP服务器和其他组件的组合体，知道这些基本就够用了，再往详细了讲的话我也讲不明白了。</p>
<p>然后修改 PCIE 网卡的 4 个接口 <code>enp3s0</code> - <code>enp6s0</code> 的 MAC 地址和板载网口 <code>enp9s0</code> 的 MAC 地址一致，这样5个网口和虚拟的 <code>br0</code> 网口都使用同一个 MAC 地址，就能实现交换机的功能了，至于为啥要把 5 个网口的 MAC 地址都设置一致这个别问我，我也不到为啥，如果这里有哪些知识点有误，可以评论告诉我。</p>
<p>因为 <code>netctl</code> 好像不支持修改接口 MAC 地址的操作，所以这里还是要用到 <code>systemd-networkd</code> 在开机时自动修改网口的 MAC 地址，在 <code>/etc/systemd/network/</code> 中创建 <code>00-enp3s0.link</code> - <code>00-enp6s0.link</code> 这 4 个配置文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># cat /etc/systemd/network/00-enp3s0.link
</span></span><span class="line"><span class="cl">[Match]
</span></span><span class="line"><span class="cl"># 这个是网口原有的 MAC 地址
</span></span><span class="line"><span class="cl">MACAddress=aa:bb:cc:dd:xx:xx
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[Link]
</span></span><span class="line"><span class="cl"># 这个是修改后的 MAC 地址
</span></span><span class="line"><span class="cl">MACAddress=f4:bb:22:xx:xx:xx
</span></span><span class="line"><span class="cl">NamePolicy=kernel database onboard slot path
</span></span></code></pre></div><p>确保 <code>/etc/systemd/network/</code> 中没有其他的配置文件后，<code>systemctl enable --now systemd-networkd</code> 启动 <code>systemd-networkd</code>，在重启电脑后 5 个接口的 MAC 地址就都一致了。</p>
<p>至此交换机这部分就配置完了。</p>
<h3 id="配置-samba">配置 Samba</h3>
<p>目前我还没有机械硬盘，只有一个移动硬盘通过 USB 连接到了 NAS 上，目前我使用的是 <code>hd-idle</code> 配置了硬盘的自动启停。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> sudo hd-idle -a /dev/sda -i <span class="m">300</span>
</span></span></code></pre></div><p>然后安装 <code>samba</code>，在 <code>/etc/samba/</code> 目录下创建 <code>smb.conf</code>，具体的过程请参照 <a href="https://wiki.archlinux.org/title/Samba">Wiki</a>。</p>
<p>我把我的 16T 硬盘格式化成 <code>btrfs</code> 后挂载到了 <code>/samba/hdd_16t_1</code> 目录下面，然后对应的 Samba 配置文件为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[HDD16T1]
</span></span><span class="line"><span class="cl">  force user = root
</span></span><span class="line"><span class="cl">  comment = HDD 16T 1
</span></span><span class="line"><span class="cl">  path = /samba/hdd_16T_1
</span></span><span class="line"><span class="cl">  valid users = samba
</span></span><span class="line"><span class="cl">  public = no
</span></span><span class="line"><span class="cl">  writable = yes
</span></span><span class="line"><span class="cl">  browsable = yes
</span></span><span class="line"><span class="cl">  printable = no
</span></span><span class="line"><span class="cl">  create mask = 0644
</span></span><span class="line"><span class="cl">  directory mask = 0755
</span></span><span class="line"><span class="cl">  read only = no
</span></span></code></pre></div><p>我打算只在内网访问我的 NAS，我还不打算把它暴露到公网上，所以目前不用太考虑安全的问题。</p>
<p>然后我目前不考虑组 RAID，首先是因为没钱再买硬盘了，其次是 RAID 并不适合作为冗余备份使用，它没办法保证数据的绝对安全，所以如果我要存重要的数据的话，还是要往别的移动硬盘里也拷贝一份的，所以目前来看 RAID 我暂时用不上。</p>
<p>东芝这块盘收货之后，我用 Samba 往里面烤了俩小时文件没遇到失败的情况，速度一直维持在 100MB/s 以上很稳定，至于噪音的话，白天是感觉不出来 NAS 的声音的，晚上因为配置了硬盘自动停转所以只要睡觉时不用它下载东西的话也是听不到声音的。</p>
<h2 id="其他">其他</h2>
<p>之所以买了 8 核 16 线程的 CPU 是因为我除了让它做 Samba 服务器之外还打算在上面跑一些别的服务啥的，目前除了 Samba 之外我在上面跑了 qemu KVM 虚拟机，然后在局域网搞了 Kubernetes 集群，因为公有云价格太贵了我自己租不起长时间的高性能 VPS，所以在本地起几个虚拟机装轻量级的集群用来学习 k8s 还是可以轻松实现的，不过我目前还没想好可以在集群里跑些什么东西。</p>
<p>后续我打算把我的 MineCraft 单机生存的存档也放到 NAS 上面当服务器跑，这样就可以实现一些只有在服务器才能实现的操作了（比如挂个假人 24 小时挂机刷怪之类的）。</p>
<p>以后有时间的话再写个 TeleBot 机器人啥的，用来远程监控 NAS 的状态。</p>
<hr>
<p><strong>STARRY-S</strong></p>]]></content:encoded>
    </item>
    
    <item>
      <title>食虫植物种植记录 - 2022.11.06</title>
      <link>https://blog.starry-s.moe/posts/2022/carnivorous-plant-221106/</link>
      <pubDate>Sun, 06 Nov 2022 14:58:42 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2022/carnivorous-plant-221106/</guid>
      <description>&lt;p&gt;过了一个多月，多数植物的状态都有好转，期间土瓶草和几个状态很差的茅膏菜挂掉了，猪笼草新结了几个瓶子。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>过了一个多月，多数植物的状态都有好转，期间土瓶草和几个状态很差的茅膏菜挂掉了，猪笼草新结了几个瓶子。</p>
<blockquote>
<p>图片由相机拍完后使用 GIMP 调整了尺寸、色温和曲线。</p>
</blockquote>
<p><img loading="lazy" src="images/1.JPG" alt="" />

</p>
<p><img loading="lazy" src="images/2.JPG" alt="" />

</p>
<p><img loading="lazy" src="images/9.JPG" alt="" />

</p>
<p><img loading="lazy" src="images/3.JPG" alt="" />

</p>
<p><img loading="lazy" src="images/4.JPG" alt="" />

</p>
<p><img loading="lazy" src="images/6.JPG" alt="" />

</p>
<p><img loading="lazy" src="images/5.JPG" alt="" />

</p>
<p><img loading="lazy" src="images/7.JPG" alt="" />

</p>
<p><img loading="lazy" src="images/8.JPG" alt="" />

</p>]]></content:encoded>
    </item>
    
    <item>
      <title>月姫 -A piece of blue glass moon-</title>
      <link>https://blog.starry-s.moe/posts/2022/tsukihimi/</link>
      <pubDate>Fri, 28 Oct 2022 20:15:42 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2022/tsukihimi/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://blog.starry-s.moe/posts/2022/tsukihimi/images/1.png&#34; alt=&#34;&#34; /&gt;

&lt;/p&gt;
&lt;p&gt;想不懂咱是怎么忍住恐惧在大晚上的玩通关这游戏的公主线的……&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="/posts/2022/tsukihimi/images/1.png" alt="" />

</p>
<p>想不懂咱是怎么忍住恐惧在大晚上的玩通关这游戏的公主线的……</p>
<meting-js server="netease" type="song" id="1898223599" theme="#233333"></meting-js>
<hr>
<p><img loading="lazy" src="images/2.png" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">呐。那个，让我看看</p>
</p>
<hr>
<meting-js server="netease" type="song" id="1898231769" theme="#233333"></meting-js>
<p><img loading="lazy" src="images/3.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/4.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/12.jpg" alt="" />

</p>
<hr>
<meting-js server="netease" type="song" id="1898230877" theme="#233333"></meting-js>
<p><img loading="lazy" src="images/05.png" alt="" />

</p>
<p><img loading="lazy" src="images/09.jpg" alt="" />

</p>
<hr>
<meting-js server="netease" type="song" id="1898231765" theme="#233333"></meting-js>
<p><img loading="lazy" src="images/11.png" alt="" />

</p>
<p><img loading="lazy" src="images/07.png" alt="" />

</p>
<p><img loading="lazy" src="images/06.png" alt="" />

</p>
<p><img loading="lazy" src="images/08.png" alt="" />

</p>
<hr>
<p><img loading="lazy" src="images/10.png" alt="" />

</p>
<blockquote>
<p><a href="https://tsukihimecn.github.io/">https://tsukihimecn.github.io/</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>yuzu - Switch 虚拟机</title>
      <link>https://blog.starry-s.moe/posts/2022/switch-emulator/</link>
      <pubDate>Sun, 16 Oct 2022 15:48:46 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2022/switch-emulator/</guid>
      <description>&lt;p&gt;一直想玩的游戏没有官方汉化，Switch 的游戏文件没破解的话是没办法装汉化插件的，尽管咱有 Switch OLED 港版主机，但是破解有被封的可能而且过程过于麻烦，破解后就不能联网了，所以咱在买了正版游戏但是看不懂日语后无奈之下选择了虚拟机，正好水一篇博客。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>一直想玩的游戏没有官方汉化，Switch 的游戏文件没破解的话是没办法装汉化插件的，尽管咱有 Switch OLED 港版主机，但是破解有被封的可能而且过程过于麻烦，破解后就不能联网了，所以咱在买了正版游戏但是看不懂日语后无奈之下选择了虚拟机，正好水一篇博客。</p>
<meting-js server="netease" type="song" id="590443" theme="#233333"></meting-js>
<p>目前有两个虚拟机可选，一个是 由 C# 编写的 <a href="https://github.com/Ryujinx/Ryujinx">Ryujinx</a>，另一个是由 C++ 编写的 <a href="https://github.com/yuzu-emu/yuzu">yuzu</a>，这俩都是开源软件而且都能在 Linux 上运行，咱选的是后者。</p>
<hr>
<p>yuzu 提供的教程需要短接器和一张TF卡以及 switch 本体，从 switch 中获取 <code>prod.keys</code> 和 <code>title.keys</code> （非必须），喜欢折腾的可以买个短接器慢慢鼓捣，教程链接：<a href="https://yuzu-emu.org/help/quickstart/">https://yuzu-emu.org/help/quickstart/</a>。如果懒得折腾的话从网上找个现成的 key 文件也能用。</p>
<p>Arch Linux 可以从 archlinuxcn 源或者 AUR 中获取。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo pacman -S yuzu-git
</span></span></code></pre></div><p>第一次启动时会提示缺少 keys，可先忽略，选择左上角 <code>File-&gt;Open yuzu Folder</code>，新建一个 <code>keys</code> 文件夹，将 <code>prod.keys</code> 复制进去后重启软件。</p>
<p>yuzu 可以在不手动安装系统的情况下运行游戏，所以添加了游戏所在的文件夹就能玩了。</p>
<p><img loading="lazy" src="images/1.png" alt="" />

</p>
<p>然后就是在设置里面改一下手柄的按键布局，因为用习惯了 Xbox 手柄，所以咱把 A 和 B 位置对调了一下。</p>
<p><img loading="lazy" src="images/2.png" alt="" />

</p>
<hr>
<p>后续：</p>
<p>Yuzu 2023-05-21 之后的版本对宝可梦做了些优化导致玩月姬时文字花屏乱码，玩月姬的话不要下载 2023-05-21 (1440) 之后的版本。</p>
<p>然后 Arch Linux 最近滚完系统后遇到了 yuzu 的 Qt 启动失败报错：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Warning: Ignoring XDG_SESSION_TYPE=wayland on Gnome. Use QT_QPA_PLATFORM=wayland to run on Wayland anyway.
</span></span><span class="line"><span class="cl">qt.qpa.plugin: Could not find the Qt platform plugin &#34;wayland&#34; in &#34;&#34;
</span></span><span class="line"><span class="cl">This application failed to start because no Qt platform plugin could be initialized. Reinstalling the application may fix this problem.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Available platform plugins are: xcb.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">zsh: IOT instruction (core dumped)  yuzu
</span></span></code></pre></div><p>查了一阵子找到的解决办法是设置 <code>QT_PLUGIN_PATH=/usr/lib/qt/plugins</code> 环境变量，覆盖掉 yuzu 安装包自带的 Qt 插件而是改用系统的。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>食虫植物回坑小记</title>
      <link>https://blog.starry-s.moe/posts/2022/carnivorous-plants-1/</link>
      <pubDate>Sun, 18 Sep 2022 13:20:04 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2022/carnivorous-plants-1/</guid>
      <description>&lt;p&gt;重新捡起了弃坑多年的食虫植物系列。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多图预警。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      <content:encoded><![CDATA[<p>重新捡起了弃坑多年的食虫植物系列。</p>
<blockquote>
<p>多图预警。</p>
</blockquote>
<hr>
<p>咱其实很久以前就入坑了食虫植物，最早可以追溯到我念小学的时候，当时克服重重困难就为了养一两颗草，但是都没怎么养活过。后来念大学的时候因为许多原因不方便养所以弃坑了几年，大一还没有疫情的时候在暑假去了上海和杭州，大中午的顶着炎炎烈日坐了好几个小时的公交车从杭州市区到桐乡的“小虫草堂”实地参观了一番，当时拍了好多照片（感兴趣的可以看看<a href="/posts/2019/shanghai-2/">这篇博客</a>），疫情之后就再也没能去远一点的地方旅行过（两次实习除外），后来食虫植物这个玩意也逐渐被我抛在脑后很长时间没有去想过它。</p>
<p>最近由于一些机缘巧合在研究地理学的太阳高度角与经纬度和节气之间的关系时（确信），无意间想起了我曾经养过的这群对生存条件要求非常苛刻的食虫植物，这个念头挥之不去，加上现在有了一定的养这玩意的基础，于是又重新入坑了这个系列。</p>
<hr>
<p>以下的图片都是植物邮寄到手缓了四五天后用相机拍的直出照片，没调颜色，没裁剪，只对图片压缩了尺寸。光照用的是全光谱的植物补光灯，因为是新到的小苗，很多植物状态并不太好还伴随着许多叶片的枯萎，因为懒加上没有镊子，所以有些植物的枯萎叶子没有修剪。后续如果养的好的话，也许会出新的系列专门记录一下。</p>
<p><img loading="lazy" src="images/1.JPG" alt="&amp;ldquo;布凯茅膏菜&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">布凯茅膏菜</p>
</p>
<p><img loading="lazy" src="images/2.JPG" alt="&amp;ldquo;某不知名的茅膏菜&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">某不知名的茅膏菜</p>
</p>
<p><img loading="lazy" src="images/3.JPG" alt="&amp;ldquo;布凯茅膏菜&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">布凯茅膏菜</p>
</p>
<p><img loading="lazy" src="images/4.JPG" alt="&amp;ldquo;新种的活水苔（左）和不知名的瓶子草（右）&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">新种植的活水苔（左）和不知名的瓶子草（右）</p>
</p>
<p><img loading="lazy" src="images/5.JPG" alt="&amp;ldquo;白瓶子草&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">白瓶子草</p>
</p>
<p><img loading="lazy" src="images/6.JPG" alt="&amp;ldquo;土瓶草&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">土瓶草</p>
</p>
<p><img loading="lazy" src="images/7.JPG" alt="&amp;ldquo;布凯茅膏菜&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">布凯茅膏菜</p>
</p>
<p><img loading="lazy" src="images/8.JPG" alt="&amp;ldquo;Fake Dracula&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">Fake Dracula</p>
</p>
<p><img loading="lazy" src="images/9.JPG" alt="&amp;ldquo;爱斯捕虫堇&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">爱斯捕虫堇</p>
</p>
<p>后面还有几棵猪笼草，但是瓶子基本都枯萎了只剩绿油油的大叶子，所以就不拍照片了，等以后如果养活了再水一篇新的博客吧。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>FinalFantasy VII Remake 游戏记录</title>
      <link>https://blog.starry-s.moe/posts/2022/finalfantasy-vii/</link>
      <pubDate>Sat, 20 Aug 2022 20:09:04 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2022/finalfantasy-vii/</guid>
      <description>&lt;p&gt;前一阵子通关了最终幻想7重置版，放几张截图到这里水一期博客。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;严重剧透警告&lt;/strong&gt;：如不想被剧透请勿阅读本篇内容！&lt;/p&gt;
&lt;/blockquote&gt;</description>
      <content:encoded><![CDATA[<p>前一阵子通关了最终幻想7重置版，放几张截图到这里水一期博客。</p>
<blockquote>
<p><strong>严重剧透警告</strong>：如不想被剧透请勿阅读本篇内容！</p>
</blockquote>
<meting-js server="netease" type="song" id="1487507457" theme="#233333"></meting-js>
<hr>
<p><img loading="lazy" src="images/000.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">卖花的大姐姐</p>
</p>
<p><img loading="lazy" src="images/001.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">Tifa</p>
</p>
<p><img loading="lazy" src="images/002.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/003.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/004.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/005.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/006.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/007.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/008.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/009.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">Aerith 的千层套路</p>
</p>
<p><img loading="lazy" src="images/010.jpg" alt="" />

</p>
<hr>
<meting-js server="netease" type="song" id="1487507471" theme="#233333"></meting-js>
<p><img loading="lazy" src="images/011.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">Reunited</p>
</p>
<p><img loading="lazy" src="images/012.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">云片好帅</p>
</p>
<p><img loading="lazy" src="images/013.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/014.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/015.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">穿这么少的衣服，干的却是正经生意</p>
</p>
<hr>
<meting-js server="netease" type="song" id="1487508995" theme="#233333"></meting-js>
<p><img loading="lazy" src="images/016.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/017.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">可爱捏</p>
</p>
<p><img loading="lazy" src="images/018.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">爱丽丝老套路了</p>
</p>
<p><img loading="lazy" src="images/019.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">比我想得还要可爱捏</p>
</p>
<p><img loading="lazy" src="images/020.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/021.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/022.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/023.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/024.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/025.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/026.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/027.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/028.jpg" alt="" />

</p>
<p><img loading="lazy" src="images/029.jpg" alt="" />

</p>
<hr>
<meting-js server="netease" type="song" id="1818030780" theme="#233333"></meting-js>]]></content:encoded>
    </item>
    
    <item>
      <title>移动GM220-S光猫改桥接小记</title>
      <link>https://blog.starry-s.moe/posts/2022/gm220-s-bridge-mode/</link>
      <pubDate>Thu, 07 Jul 2022 17:54:35 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2022/gm220-s-bridge-mode/</guid>
      <description>&lt;p&gt;最近搬了新的住处，用的是移动的宽带，因此尝试着把移动的光猫改成桥接，接到我的软路由上面。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>最近搬了新的住处，用的是移动的宽带，因此尝试着把移动的光猫改成桥接，接到我的软路由上面。</p>
<p>因为我不知道PPPoE拨号的帐号和密码，尽管这个光猫的超级密码网上一搜就能找到，但是我不知道PPPoE帐号的密码就算改了桥接也没办法拨号。
于是先借助网上能搜到的资料尝试把宽带帐号的密码给搞出来。</p>
<hr>
<p>一开始尝试着登录光猫的后台页面，在设置拨号上网的页面那里F12大法，把<code>input</code>元素的<code>type=&quot;password&quot;</code>改成<code>type=&quot;text&quot;</code>，
但是发现这里预填写的密码已经是加密过的<code>******</code>，因此这个方法行不通。</p>
<p>然后看教程有说尝试打开光猫的telnet，把配置文件用ftp传出来，但是试了一下所有的尝试打开telnet的方式在这个光猫上都不好使，于是这个方法也行不通。</p>
<p>之后在光猫登录管理员帐号之后，在“管理-&gt;设备管理-&gt;USB备份配置&quot;这里找到了可以把配置文件备份到U盘的地方，
于是找了一张空内存卡格式化成<code>FAT32</code>，放读卡器里插在光猫上，把配置文件备份到U盘上。</p>
<p><img loading="lazy" src="images/1.png" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">备份至USB</p>
</p>
<blockquote>
<p>这里备份之后不要立即把U盘拔下来，貌似光猫在备份完配置文件后没有立即把数据<code>sync</code>到U盘中，需要等一阵子再拔U盘。
等多久我也不确定，反复试几次直到U盘上出现了<code>e8_Config_Backup</code>文件夹就可以了。</p>
</blockquote>
<p>然后下载<a href="http://www.nirsoft.net/utils/router_password_recovery.html#DownloadLinks">RouterPassView</a>，
用这个工具打开配置文件，就可以找到里面光猫上的所有配置了，包括宽带帐号和密码。</p>
<p>之后在网络设置里面改桥接，就可以用软路由拨号上网辣。</p>
<hr>
<p>使用了一下移动的宽带发现貌似他们把所有的ICMP的ECHO回显请求屏蔽掉了，所以尝试ping任何IP都是不通的。别的貌似没什么问题。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>在Arch Linux上配置软路由</title>
      <link>https://blog.starry-s.moe/posts/2022/archlinux-router/</link>
      <pubDate>Wed, 08 Jun 2022 00:49:34 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2022/archlinux-router/</guid>
      <description>&lt;p&gt;之前买了个NanoPi R4S，当时给他装了Arch Linux ARM并用&lt;code&gt;systemd-networkd&lt;/code&gt;配置了一个简易的软路由。不过&lt;code&gt;systemd-networkd&lt;/code&gt;不支持PPPoE，所以当时我是把R4S接在租的房子的主路由下做子路由的，然后再给R4S接了一个小米路由器当作无线AP。最近从北京搬回家了所以想直接使用R4S做家里的主路由，因为&lt;a href=&#34;https://blog.starry-s.moe/posts/2022/nanopi-r4s/&#34;&gt;R4S上手体验&lt;/a&gt;的那篇文章已经写完很久了，所以就不打算在那篇博客上做修改了，而是新开（水）了一篇博客。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>之前买了个NanoPi R4S，当时给他装了Arch Linux ARM并用<code>systemd-networkd</code>配置了一个简易的软路由。不过<code>systemd-networkd</code>不支持PPPoE，所以当时我是把R4S接在租的房子的主路由下做子路由的，然后再给R4S接了一个小米路由器当作无线AP。最近从北京搬回家了所以想直接使用R4S做家里的主路由，因为<a href="/posts/2022/nanopi-r4s/">R4S上手体验</a>的那篇文章已经写完很久了，所以就不打算在那篇博客上做修改了，而是新开（水）了一篇博客。</p>
<blockquote>
<p>这里偷偷骂一下长城宽带没人反对吧</p>
</blockquote>
<h2 id="准备工作">准备工作</h2>
<p>按照Arch Wiki的<a href="https://wiki.archlinux.org/title/Router#Connection_sharing">Router页面</a>，你的电脑需要符合安装Arch Linux的基础硬件要求，且至少具备俩物理网口。</p>
<p>个人觉得软路由没必要非得刷*WRT或者其他路由器专用系统，也没必要搞个爱快群辉什么的系统，我只想给他装我喜欢的发行版，然后我自己配置我需要的服务，只要有两个以上的物理网口就可以配置路由功能，给他们配置DHCP和流量转发就完事了，这样搞出来的路由器更符合咱自己的需求，相对来讲也更灵活一些，不用受限于那些路由器/NAS定制的系统，而缺点则是比较折腾，有可能不稳定。</p>
<p>安装系统的步骤咱跳过不讲了，Wiki上有的东西没必要在这里重复一遍。</p>
<h2 id="配置ip地址">配置IP地址</h2>
<p>首先，将你电脑的两个物理网口一个用作WAN口（连接广域网），一个用作LAN口（连接局域网），有需要的可以自行修改网口的名称（通常默认的网卡名字为<code>eth*</code>，或者<code>enp*s*</code>）。
为了和Wiki同步，这里假设WAN口的名字为<code>extern0</code>，用来指连接到广域网的网口，LAN口的名字为<code>intern0</code>，代指连接到局域网的网口。</p>
<p>本篇使用<code>netctl</code>配置网络，在修改配置文件之前，需要先停掉其他配置网络的服务。</p>
<p>给LAN口配置一个静态IP地址。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># /etc/netctl/intern0-profile
</span></span><span class="line"><span class="cl"># Config file for intern0 (LAN)
</span></span><span class="line"><span class="cl">Description=&#39;Private Interface. (LAN)&#39;
</span></span><span class="line"><span class="cl">Interface=intern0
</span></span><span class="line"><span class="cl">Connection=ethernet
</span></span><span class="line"><span class="cl">IP=&#39;static&#39;
</span></span><span class="line"><span class="cl">Address=(&#39;10.10.10.1/24&#39;)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">IP6=&#39;static&#39;
</span></span><span class="line"><span class="cl">Address6=(&#39;fdaa:aaaa:bbbb::0001/64&#39;)
</span></span><span class="line"><span class="cl">SkipNoCarrier=yes
</span></span></code></pre></div><p>以上配置将为LAN口设定IPv4的地址为<code>10.10.10.1</code>，IPv6的地址为<code>fdaa:aaaa:bbbb::0001</code>。
你可以给这个网口设定任意的局域网IP地址，通常为<code>10.*</code>，<code>172.*</code>，<code>192.168.*</code>这些网段的任意一个地址，
IPv6的局域网网段为<code>fd00::/8</code>，通俗一点讲就是<code>fd**</code>开头的一般都是局域网的IP地址。</p>
<p>之后给WAN口配置DHCP或PPPoE协议。</p>
<blockquote>
<p>配置DHCP的方式自行翻Wiki或者看example，这里不重复讲了。</p>
</blockquote>
<p>在配置PPPoE之前需要安装<code>ppp</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># /etc/netctl/extern0-profile
</span></span><span class="line"><span class="cl"># Config file for public interface (WAN)
</span></span><span class="line"><span class="cl">Description=&#39;Public Interface. (WAN)&#39;
</span></span><span class="line"><span class="cl">Interface=extern0
</span></span><span class="line"><span class="cl">Connection=pppoe
</span></span><span class="line"><span class="cl">User=&#39;username&#39;
</span></span><span class="line"><span class="cl">Password=&#39;samplepasswd&#39;
</span></span><span class="line"><span class="cl"># IP6=stateless
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Always keep a connection established
</span></span><span class="line"><span class="cl">ConnectionMode=&#39;persist&#39;
</span></span></code></pre></div><p>使用以下命令启动<code>netctl</code>的配置文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">netctl enable intern0-profile
</span></span><span class="line"><span class="cl">netctl enable extern0-profile
</span></span></code></pre></div><p>重启路由器，将WAN口与光猫的网口连接，使用<code>ip addr</code>查看网络设备的IP地址，顺利的话，可以看到一个名为<code>ppp0</code>的网口，并获取了一个运营商分给你的IP地址。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">1: intern0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000
</span></span><span class="line"><span class="cl">    link/ether fa:97:da:d8:9d:8a brd ff:ff:ff:ff:ff:ff
</span></span><span class="line"><span class="cl">    inet 10.10.10.1/24 brd 10.10.10.255 scope global intern0
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">    inet6 fdaa:aaaa:bbbb::1/64 scope global nodad
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">    inet6 fe80::f897:daff:fed8:9d8a/64 scope link
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">2: extern0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000
</span></span><span class="line"><span class="cl">    link/ether ca:1f:4a:9b:29:df brd ff:ff:ff:ff:ff:ff
</span></span><span class="line"><span class="cl">    inet6 fe80::c81f:4aff:fe9b:29df/64 scope link
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">3: ppp0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1492 qdisc fq_codel state UNKNOWN group default qlen 3
</span></span><span class="line"><span class="cl">    link/ppp
</span></span><span class="line"><span class="cl">    inet 123.123.123.123 peer 123.123.123.1/32 scope global ppp0
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">    inet6 240e:aaaa:bbbb:cccc:::eeee/64 scope global dynamic mngtmpaddr
</span></span><span class="line"><span class="cl">       valid_lft 259132sec preferred_lft 172732sec
</span></span><span class="line"><span class="cl">    inet6 fe80::aaaa:bbbb:cccc:dddd peer fe80::aaaa:bbbb:cccc:dddd/128 scope link
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span></code></pre></div><p>如果遇到了问题，可以使用<code>systemctl status netctl@extern0\\x2dprofile.service</code>查看一下错误信息。
如果是认证失败的话，重启几次这个service说不定就好了。</p>
<h2 id="配置dns和dhcp">配置DNS和DHCP</h2>
<p>安装<code>dnsmasq</code>，编辑<code>/etc/dnsmasq.conf</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Setup listen address
</span></span><span class="line"><span class="cl">listen-address=10.10.10.1,127.0.0.1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Do not read /etc/resolv.conf
</span></span><span class="line"><span class="cl">no-resolv
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Use following dns servers
</span></span><span class="line"><span class="cl">server=114.114.114.114
</span></span><span class="line"><span class="cl">server=8.8.8.8
</span></span><span class="line"><span class="cl">server=8.8.4.4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Bind interface
</span></span><span class="line"><span class="cl">interface=intern0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Setup domain
</span></span><span class="line"><span class="cl">expand-hosts
</span></span><span class="line"><span class="cl">domain=foo.bar
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Setup IPv4 DHCP
</span></span><span class="line"><span class="cl">dhcp-range=10.10.10.100,10.10.10.255,255.255.255.0,12h
</span></span><span class="line"><span class="cl"># Setup IPv6 DHCP
</span></span><span class="line"><span class="cl">dhcp-range=fdaa:aaaa:bbbb::000a, fdaa:aaaa:bbbb::ffff, 64, 12h
</span></span></code></pre></div><p>使用<code>systemctl enable --now dnsmasq.service</code>启动<code>dnsmasq</code>，
之后重启路由器，使用网线连接将电脑连接到路由器的LAN口，顺利的话可以自动获取一个IP地址。</p>
<p>如果没获取到IP地址的话，有可能是DHCP服务器的问题，先尝试在电脑上手动设置一个IP地址，之后尝试ping路由器的IP（<code>10.10.10.1</code>）。
如果还是无法连接到路由器的话，就需要重新检查一下路由器的配置了。</p>
<h2 id="网络共享">网络共享</h2>
<p>首先<a href="https://wiki.archlinux.org/title/Internet_sharing#Enable_packet_forwarding">参照Wiki</a>，开启数据包转发的功能。</p>
<p>之后安装<code>iptables</code>，配置ipv4和ipv6的流量伪装。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">iptables -A FORWARD -i intern0 -j ACCEPT
</span></span><span class="line"><span class="cl">iptables -A FORWARD -o intern0 -j ACCEPT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">iptables -t nat -A POSTROUTING -o ppp0 -j MASQUERADE
</span></span><span class="line"><span class="cl">iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
</span></span><span class="line"><span class="cl">iptables -A FORWARD -i intern0 -o ppp0 -j ACCEPT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">iptables -t mangle -A FORWARD -o ppp0 -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip6tables -t nat -A POSTROUTING -o ppp0 -j MASQUERADE
</span></span></code></pre></div><p>之后可使用<code>iptables-save -f /etc/iptables/iptables.rules</code>和
<code>ip6tables-save -f /etc/iptables/ip6tables.rules</code>将ip桌子的规则保存下来。</p>
<h2 id="done">Done</h2>
<p>以上配置完成后，按理来说路由器就已经配置好了。</p>
<p>调试的过程为首先在路由器上尝试ping一个广域网的域名或IP地址（<code>8.8.8.8</code>），之后将路由器与电脑用网线连接，
电脑应当通过DHCP自动获取到一个随机的IP地址。
之后在电脑上尝试打开一些理应能打开的网站，应该是能打开的。</p>
<p>如果能电脑可以ping通一个广域网的IP，但是打不开网站的话，就检查一下路由器DNS配置，
如果路由器上能ping通一个广域网的IP，但电脑连IP地址都ping不通，那就去检查一下ip桌子的流量伪装规则，检查一下网口名字有没有写对之类的。</p>
<p>之后如果一切都调试成功的话，就可以把家里的无线路由器改成“有线中继”模式了，这样家里的无线路由器将只作为一个无线AP使用，路由的功能将全部由刚刚配置好的软路由实现。</p>
<p>配置好“有线中继”模式后，电脑连接无线WIFI后获得的IP地址应当是软路由分配的IP地址，网段为刚刚咱们设置的<code>10.10.10.*</code>，
而不再是<code>192.168.*</code>的IP地址了。</p>]]></content:encoded>
    </item>
    
    <item>
      <title>NanoPi R4S上手 &amp; 安装Arch Linux ARM</title>
      <link>https://blog.starry-s.moe/posts/2022/nanopi-r4s/</link>
      <pubDate>Fri, 13 May 2022 00:32:40 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2022/nanopi-r4s/</guid>
      <description>&lt;p&gt;前两天下单了个Nano Pi R4S，4G内存的版本。通常情况下这玩意别人都把他当软路由用，但是今天咱收到货后想了一会拍大腿一寻思这玩意不就是个ARM架构的小电脑嘛~&lt;/p&gt;
&lt;p&gt;所以咱暂时先不打算给这玩意装OpenWRT或 *WRT这类的路由器系统了，而是把它当成一个超小号的带俩网口的mini主机折腾。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>前两天下单了个Nano Pi R4S，4G内存的版本。通常情况下这玩意别人都把他当软路由用，但是今天咱收到货后想了一会拍大腿一寻思这玩意不就是个ARM架构的小电脑嘛~</p>
<p>所以咱暂时先不打算给这玩意装OpenWRT或 *WRT这类的路由器系统了，而是把它当成一个超小号的带俩网口的mini主机折腾。</p>
<meting-js server="netease" type="song" id="19563215" theme="#233333"></meting-js>
<h2 id="开箱">开箱</h2>
<p><img loading="lazy" src="images/nanopi_1.jpg" alt="&amp;ldquo;USB 3.0、SD卡插槽以及三脚架接口&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">USB 3.0、SD卡插槽以及三脚架接口</p>
</p>
<p><img loading="lazy" src="images/nanopi_2.jpg" alt="&amp;ldquo;供电接口和网口&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">供电接口和网口</p>
</p>
<p><img loading="lazy" src="images/nanopi_3.jpg" alt="&amp;ldquo;正面&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">正面</p>
</p>
<h2 id="拆解">拆解</h2>
<p>咱收到货后第一件事就是找螺丝刀和塑料卡片把这漏油器拆开看看（</p>
<p><img loading="lazy" src="images/nanopi_7.jpg" alt="" />
<p style="margin-bottom: -0.8em;" class="image-title">主板正面</p>
</p>
<p>芯片的布局可以在<a href="https://www.friendlyelec.com/index.php?route=product/product&amp;product_id=284">R4S的商品页面</a>查到，<a href="https://wiki.friendlyelec.com/wiki/index.php/NanoPi_R4S">官方Wiki</a>上也有更多关于R4S的介绍。</p>
<h2 id="arch-linux-arm">Arch Linux ARM</h2>
<p>在Arch Linux ARM (简称alarm) 官网上没找到对R4S的官方的支持，简单搜了一下armbian有对R4S的官方支持。</p>
<p>因为用惯了<strong>滚动更新</strong>发行版，所以不想用*bian系统，而*WRT系统的软件包相对其他发行版而言更少一些，系统也相当于被魔改过，所以除了做漏油器之外几乎干不了别的，所以这是我想安装Arch Linux的理由。</p>
<p>然后咱搜到了一篇给<a href="https://gist.github.com/larsch/a8f13faa2163984bb945d02efb897e6d">NanoPi R2S安装alarm的教程</a>，评论里有人提到了给R4S安装也是可以的。</p>
<p>所以咱大致把这个教程翻译一下，再修改一些R2S和R4S在安装时的区别。</p>
<p>以下内容需结合alarm的 <a href="https://archlinuxarm.org/platforms/armv8/generic">aarch64通用安装教程</a>食用，像更新pacman-key，ssh的密码之类的部分咱就不在这里重复了。</p>
<h3 id="准备sd卡">准备SD卡</h3>
<ol start="0">
<li>
<p>下载armbian的镜像，下载链接自行谷歌。</p>
<blockquote>
<p>通常下载好的文件是<code>xz</code>格式的压缩文件，需要使用<code>unxz</code>解压成<code>img</code>镜像。</p>
</blockquote>
</li>
<li>
<p>将armbian镜像的<code>bootloader</code>和<code>uboot</code>(32-32767区块的部分)用<code>dd</code>写到SD卡中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Clean the sector before 32
</span></span><span class="line"><span class="cl">dd if=/dev/zero of=/dev/sdX bs=1M count=32
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Write uBoot and bootloader
</span></span><span class="line"><span class="cl">dd if=Armbian_*.img of=/dev/sdX skip=31 seek=31 bs=512 count=32736
</span></span></code></pre></div><blockquote>
<p>其实可以直接用<code>dd</code>把armbian的整个镜像写到内存卡中然后插入R4S开机，第一次开机后他会自动重新给内存卡分区，然后只需把<code>/dev/sdX1</code>格式化成ext4就能安装alarm了。</p>
</blockquote>
</li>
<li>
<p>使用<code>fdisk</code>给内存卡分区并格式化文件系统</p>
<p>创建分区时先按<code>o</code>创建个MBR分区表，然后按<code>n</code>添加分区。第一个分区的起始区块(sector)需要设置为32768，通常情况下分一个区就够用了，或者你可以像我这样分俩区，一个给swap，不过实际没啥必要。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Disk /dev/mmcblk1: 29.72 GiB, 31914983424 bytes, 62333952 sectors
</span></span><span class="line"><span class="cl">Units: sectors of 1 * 512 = 512 bytes
</span></span><span class="line"><span class="cl">Sector size (logical/physical): 512 bytes / 512 bytes
</span></span><span class="line"><span class="cl">I/O size (minimum/optimal): 512 bytes / 512 bytes
</span></span><span class="line"><span class="cl">Disklabel type: dos
</span></span><span class="line"><span class="cl">Disk identifier: 0x33fc535e
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Device         Boot    Start      End  Sectors  Size Id Type
</span></span><span class="line"><span class="cl">/dev/mmcblk1p1         32768 53944319 53911552 25.7G 83 Linux
</span></span><span class="line"><span class="cl">/dev/mmcblk1p2      53944320 62333951  8389632    4G 82 Linux swap / Solaris
</span></span></code></pre></div><p>创建完分区后，把<code>root</code>分区<code>mkfs.ext4</code>格式化成ext4，swap分区用<code>mkswap</code>格式化。</p>
</li>
<li>
<p>解压alarm系统文件到root分区中</p>
</li>
<li>
<p>复制并替换armbian的<code>/boot</code>中的文件到新建分区的<code>/boot</code>文件夹中。</p>
</li>
<li>
<p>编辑<code>/boot/armbianEnv.txt</code>，更新<code>rootdev</code>的UUID
使用<code>blkid</code>或者<code>lsblk -o+UUID</code>可以查看UUID，注意是<strong>UUID</strong>不是PARTUUID。</p>
</li>
<li>
<p>插电，开机 (<del>此处不会出现五安大电牛</del>)，网线连接R4S的WAN口到路由器的LAN口，第一次开机需要生成SSH Key所以时间会久一些，然后就可以ssh到R4S上去辣。</p>
</li>
</ol>
<h3 id="内核">内核</h3>
<p>上述的安装步骤使用的armbian的内核，可以正常开机，但是想用Arch Linux stock aarch64内核的话，得替换一下DTB文件。（DTB文件是啥我目前还不清楚，如果后续弄明白了再更新到博客上吧）</p>
<ol>
<li>
<p>ssh到R4S中，安装<code>linux-aarch64</code>。</p>
</li>
<li>
<p>修改使用的DTB文件：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cd /boot
</span></span><span class="line"><span class="cl">rm dtb
</span></span><span class="line"><span class="cl">ln -sf dtbs dtb
</span></span></code></pre></div><p>编辑<code>armbianEnv.txt</code>，在末尾添加一行<code>fdtfile=rockchip/rk3399-rockpro64.dtb</code>。</p>
<blockquote>
<p>在<code>/boot/dtb/rockchip</code>目录下是可以找到<code>rk3399-nanopi-r4s.dtb</code>文件的，但是目前用这个DTB的话会导致PCIE不能正常工作，导致LAN口无法使用。
<code>dmesg</code>的输出为：</p>
</blockquote>
<blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-prolog" data-lang="prolog"><span class="line"><span class="cl"><span class="s">dmesg</span> <span class="p">|</span> <span class="s">grep</span> <span class="s">pci</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span>    <span class="mf">0.538310</span><span class="p">]</span> <span class="s">ehci</span><span class="o">-</span><span class="nn">pci</span><span class="p">:</span> <span class="nv">EHCI</span> <span class="nv">PCI</span> <span class="s">platform</span> <span class="s">driver</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span>    <span class="mf">0.559708</span><span class="p">]</span> <span class="s">ohci</span><span class="o">-</span><span class="nn">pci</span><span class="p">:</span> <span class="nv">OHCI</span> <span class="nv">PCI</span> <span class="s">platform</span> <span class="s">driver</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span>    <span class="mf">2.999933</span><span class="p">]</span> <span class="s">rockchip</span><span class="o">-</span><span class="s">pcie</span> <span class="s">f8000000</span><span class="p">.</span><span class="nn">pcie</span><span class="p">:</span> <span class="s">host</span> <span class="s">bridge</span> <span class="o">/</span><span class="s">pcie@f8000000</span> <span class="nn">ranges</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span>    <span class="mf">2.999974</span><span class="p">]</span> <span class="s">rockchip</span><span class="o">-</span><span class="s">pcie</span> <span class="s">f8000000</span><span class="p">.</span><span class="nn">pcie</span><span class="p">:</span>      <span class="nv">MEM</span> <span class="mh">0x00fa000000</span><span class="p">.</span><span class="mf">.0</span><span class="s">x00fbdfffff</span> <span class="s">-&gt;</span> <span class="mh">0x00fa000000</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span>    <span class="mf">2.999987</span><span class="p">]</span> <span class="s">rockchip</span><span class="o">-</span><span class="s">pcie</span> <span class="s">f8000000</span><span class="p">.</span><span class="nn">pcie</span><span class="p">:</span>       <span class="nv">IO</span> <span class="mh">0x00fbe00000</span><span class="p">.</span><span class="mf">.0</span><span class="s">x00fbefffff</span> <span class="s">-&gt;</span> <span class="mh">0x00fbe00000</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span>    <span class="mf">3.000410</span><span class="p">]</span> <span class="s">rockchip</span><span class="o">-</span><span class="s">pcie</span> <span class="s">f8000000</span><span class="p">.</span><span class="nn">pcie</span><span class="p">:</span> <span class="s">no</span> <span class="s">vpcie12v</span> <span class="s">regulator</span> <span class="s">found</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span>    <span class="mf">3.500881</span><span class="p">]</span> <span class="s">rockchip</span><span class="o">-</span><span class="s">pcie</span> <span class="s">f8000000</span><span class="p">.</span><span class="nn">pcie</span><span class="p">:</span> <span class="nv">PCIe</span> <span class="s">link</span> <span class="s">training</span> <span class="s">gen1</span> <span class="s">timeout</span><span class="p">!</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span>    <span class="mf">3.500944</span><span class="p">]</span> <span class="s">rockchip</span><span class="o">-</span><span class="nn">pcie</span><span class="p">:</span> <span class="s">probe</span> <span class="s">of</span> <span class="s">f8000000</span><span class="p">.</span><span class="s">pcie</span> <span class="s">failed</span> <span class="s">with</span> <span class="s">error</span> <span class="o">-</span><span class="mi">110</span>
</span></span></code></pre></div><p>于是就先用rockpro64的DTB文件了。</p>
</blockquote>
</li>
<li>
<p>创建uBoot镜像和initramfs。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pacman -S uboot-tools
</span></span><span class="line"><span class="cl">mkimage -A arm64 -T ramdisk -n uInitrd -d /boot/initramfs-linux.img /boot/uInitrd-initramfs-linux.img
</span></span><span class="line"><span class="cl">ln -sf /boot/uInitrd-initramfs-linux.img /boot/uInitrd
</span></span></code></pre></div><p>创建个<code>pacman</code>的钩子，在以后更新<code>linux-aarch64</code>的时候自动的重新构建uboot和initramfs。</p>
<p>在<code>mkdir -p /etc/pacman.d/hooks</code>目录下创建<code>/etc/pacman.d/hooks/initramfs.hook</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-pacmanconf" data-lang="pacmanconf"><span class="line"><span class="cl"><span class="k">[Trigger]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">Operation</span> <span class="o">=</span> Install<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">Operation</span> <span class="o">=</span> Upgrade<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">Type</span> <span class="o">=</span> Package<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">Target</span> <span class="o">=</span> linux-aarch64<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">
</span></span></span><span class="line"><span class="cl"><span class="k">[Action]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">Description</span> <span class="o">=</span> Generate uInitrd<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">Exec</span> <span class="o">=</span> /usr/bin/mkimage -A arm64 -T ramdisk -n uInitrd -d /boot/initramfs-linux.img /boot/uInitrd-initramfs-linux.img<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">When</span> <span class="o">=</span> PostTransaction<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">Depends</span> <span class="o">=</span> uboot-tools<span class="err">
</span></span></span></code></pre></div></li>
<li>
<p>重启，<code>uname -a</code>输出的应该是新版本的内核了。</p>
<p>有个细节，用armbian的DTB文件时，开机后SYS LED灯是闪烁的，但是换到rockpro60的DTB文件后只有PWR灯长亮，别的灯都不闪了。</p>
</li>
</ol>
<h2 id="router">Router</h2>
<p>虽然装的是Arch Linux ARM系统，但是这并不代表它不能作为一个路由器使用。</p>
<p>系统默认用的是<code>systemd-networkd</code>管理网络，所以以下内容使用<code>systemd-networkd</code>配置路由器，暂时没遇到问题，如果不行的话我再换别的。</p>
<blockquote>
<p>参考: <a href="https://wiki.archlinux.org/title/Router">Router - ArchWiki</a></p>
</blockquote>
<h3 id="重命名网络接口">重命名网络接口</h3>
<blockquote>
<p>这一步并非必须，但是我有遇到重启系统后网口从<code>eth0</code>变成<code>eth1</code>的情况，所以还是给网口重命个名好一些。</p>
</blockquote>
<p>首先移除并备份<code>/etc/systemd/network</code>中原有的配置文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> /etc/systemd/network
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># backup config files</span>
</span></span><span class="line"><span class="cl">mv ./* /root/
</span></span></code></pre></div><p>获取WAN口的mac地址。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat /sys/class/net/eth0/address
</span></span><span class="line"><span class="cl">12:34:56:78:90:ab
</span></span></code></pre></div><p>创建<code>10-extern0.link</code>，重命名<code>eth0</code>到<code>extern0</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-pacmanconf" data-lang="pacmanconf"><span class="line"><span class="cl"><span class="k">[Match]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">MACAddress</span><span class="o">=</span>12:34:56:78:90:ab<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">
</span></span></span><span class="line"><span class="cl"><span class="k">[Link]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">Description</span><span class="o">=</span>WAN<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">Name</span><span class="o">=</span>extern0<span class="err">
</span></span></span></code></pre></div><p>另一个网口(LAN)在开机时<code>systemd-networkd</code>会自动给他重命名为<code>enp1s0</code>。</p>
<h3 id="wan口配置dhcp客户端">WAN口配置DHCP客户端</h3>
<p>这里我是把R4S的WAN口接到另一台路由器的LAN上，所以配置的是DHCP客户端。如果你打算直接把路由器接光猫，而且你的猫设置了桥接，那么你可能需要配置PPPOE。</p>
<p>创建<code>20-extern0.network</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-pacmanconf" data-lang="pacmanconf"><span class="line"><span class="cl"><span class="k">[Match]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">Name</span><span class="o">=</span>extern0<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">
</span></span></span><span class="line"><span class="cl"><span class="k">[Network]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">DHCP</span><span class="o">=</span>yes<span class="err">
</span></span></span></code></pre></div><h3 id="lan口配置静态ip和dhcp服务器">LAN口配置静态IP和DHCP服务器</h3>
<p>给LAN口设置成另一个网络的静态IP地址，并配置DHCP服务器，给连接到LAN口的机器分配同一个网络下的其他IP地址。</p>
<p>创建<code>20-enp1s0.network</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-pacmanconf" data-lang="pacmanconf"><span class="line"><span class="cl"><span class="k">[Match]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">Name</span><span class="o">=</span>enp1s0<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">
</span></span></span><span class="line"><span class="cl"><span class="k">[Network]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">Address</span><span class="o">=</span>10.0.0.1/24<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">DHCPServer</span><span class="o">=</span>true<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">IPMasquerade</span><span class="o">=</span>both<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">
</span></span></span><span class="line"><span class="cl"><span class="k">[DHCPServer]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">PoolOffset</span><span class="o">=</span>100<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">PoolSize</span><span class="o">=</span>100<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="na">EmitDNS</span><span class="o">=</span>yes<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c1"># DNS=8.8.8.8</span><span class="err">
</span></span></span></code></pre></div><p>我这个配置是给LAN口设置了静态IP地址<code>10.0.0.1</code>，掩码<code>255.255.255.0</code>，启用了DHCP服务器，
设置了IPv4数据“伪装”(packets forwarded from the network interface will be appear as coming from the local host)。</p>
<p>有关配置文件的参数可以使用<code>man systemd.network</code>查询。</p>
<p>暂时还没搞懂怎么折腾IPv6，如果配置好IPv6的话我再补上……</p>
<h2 id="后续">后续</h2>
<p>之后咱装了JDK以及一堆我常用的小组件。为了测试性能，我把我以前备份的Minecraft服务器复制到R4S上跑了一下试试。我的服务器之前是在疼讯云学生主机上跑的(1核2G)，装了好多性能优化插件(lithium，phosphor，carpet&hellip;)，版本是1.16.4，抱着尝试的心态跑了一下这个服务器结果发现很流畅，一开始区块加载的时候CPU的6个核心全跑满，之后就恢复到正常水平了。刚才尝试了一下长时间的生成区块貌似没什么大的问题，只要别一直用鞘翅跑图就行，应该是内存够用了所以运行效果要好一些，不过单核性能来讲的话肯定还是X86吊打R4S的。</p>
<p>毕竟这就是半个巴掌大小的机器，跑MC的时候CPU温度才不到50度，应该不需要主动散热，功耗才十多瓦……</p>
<p><img loading="lazy" src="images/nanopi_performance.png" alt="&amp;ldquo;MineCraft Server Performance&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">MineCraft Server Performance</p>
</p>
<p><img loading="lazy" src="images/nanopi_neofetch.png" alt="&amp;ldquo;Arch Linux ARM&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">Arch Linux ARM</p>
</p>
<h2 id="参烤链接">参烤链接</h2>
<ul>
<li><a href="https://www.friendlyelec.com/index.php?route=product/product&amp;product_id=284">NanoPi R4S</a></li>
<li><a href="https://wiki.friendlyelec.com/wiki/index.php/NanoPi_R4S">NanoPi R4S - FriendlyELEC WiKi</a></li>
<li><a href="https://gist.github.com/larsch/a8f13faa2163984bb945d02efb897e6d">Installing Arch Linux AArch64 on the NanoPi R2S</a></li>
<li><a href="https://archlinuxarm.org/platforms/armv8/generic">Generic AArch64 Installation | Arch Linux ARM</a></li>
<li><a href="https://wiki.archlinux.org/title/Router">Router - ArchWiki</a></li>
<li><a href="https://wiki.archlinux.org/title/Systemd-networkd">systemd-networkd - ArchWiki</a></li>
<li><a href="https://man.archlinux.org/man/systemd.network.5">systemd.network(5) — Arch manual pages</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/392619184">在 NanoPi R2S 上安装 Archlinuxarm - 知乎</a></li>
</ul>]]></content:encoded>
    </item>
    
    <item>
      <title>自建RSS服务器：Miniflux</title>
      <link>https://blog.starry-s.moe/posts/2022/miniflux-build/</link>
      <pubDate>Tue, 01 Mar 2022 22:24:17 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2022/miniflux-build/</guid>
      <description>&lt;p&gt;之前咱自己搭过一个Miniflux服务器，不过当时用得并不频繁，逐渐的被咱弃用了。&lt;/p&gt;
&lt;p&gt;最近想订阅一些网站，因为使用RSS订阅的话，能收到更新提醒，不用经常的翻收藏夹去看页面内容有没有更新，使用RSS订阅的话也方便集中管理一些，
而且还能绕开推荐算法，只看自己想看的内容，这点还是蛮重要的。&lt;/p&gt;
&lt;p&gt;思考了几天发现我确实需要一个RSS订阅服务器后，于是决定这次把搭建过程记录下来，省得以后又忘了。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>之前咱自己搭过一个Miniflux服务器，不过当时用得并不频繁，逐渐的被咱弃用了。</p>
<p>最近想订阅一些网站，因为使用RSS订阅的话，能收到更新提醒，不用经常的翻收藏夹去看页面内容有没有更新，使用RSS订阅的话也方便集中管理一些，
而且还能绕开推荐算法，只看自己想看的内容，这点还是蛮重要的。</p>
<p>思考了几天发现我确实需要一个RSS订阅服务器后，于是决定这次把搭建过程记录下来，省得以后又忘了。</p>
<hr>
<h2 id="准备">准备</h2>
<p>Miniflux官方文档（EN）：<a href="https://miniflux.app/docs/index.html">https://miniflux.app/docs/index.html</a></p>
<h2 id="安装">安装</h2>
<p>此部分配合官方文档食用：<a href="https://miniflux.app/docs/installation.html">https://miniflux.app/docs/installation.html</a></p>
<h3 id="配置数据库">配置数据库：</h3>
<p>首先需要安装postgresql数据库。安装方法因发行版而异，网上一搜就有。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Switch to the postgres user
</span></span><span class="line"><span class="cl">$ sudo su - postgres
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Create a database user for miniflux
</span></span><span class="line"><span class="cl">$ createuser -P miniflux
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Create a database for miniflux that belongs to our user
</span></span><span class="line"><span class="cl">$ createdb -O miniflux miniflux
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Create the extension hstore as superuser
</span></span><span class="line"><span class="cl">$ psql miniflux -c &#39;create extension hstore&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Change postgres password
</span></span><span class="line"><span class="cl">$ psql
</span></span><span class="line"><span class="cl">&gt; \password
</span></span></code></pre></div><h3 id="安装miniflux">安装Miniflux：</h3>
<p>不同的发行版使用方法不一样，咱的这台服务器为Ubuntu，所以参照<a href="https://miniflux.app/docs/howto.html#apt-repo">这里的教程</a>配置APT源，安装Miniflux。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">curl -s https://apt.miniflux.app/KEY.gpg | sudo apt-key add -
</span></span><span class="line"><span class="cl">echo &#34;deb https://apt.miniflux.app/ /&#34; | sudo tee /etc/apt/sources.list.d/miniflux.list &gt; /dev/null
</span></span><span class="line"><span class="cl">apt update
</span></span><span class="line"><span class="cl">apt install miniflux
</span></span></code></pre></div><h2 id="配置miniflux">配置Miniflux</h2>
<p>默认配置文件为：<code>/etc/miniflux.conf</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># See https://miniflux.app/docs/configuration.html
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LISTEN_ADDR=0.0.0.0:8080
</span></span><span class="line"><span class="cl">LOG_DATE_TIME=yes
</span></span><span class="line"><span class="cl">DATABASE_URL=user=postgres password=&lt;YOURPASSWORD&gt; dbname=miniflux sslmode=disable
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># Run SQL migrations automatically
</span></span><span class="line"><span class="cl"># RUN_MIGRATIONS=1
</span></span></code></pre></div><p>之后线将刚刚创建的数据库用户<code>miniflux</code>设置为超级用户。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ sudo su - postgres
</span></span><span class="line"><span class="cl">$ psql
</span></span><span class="line"><span class="cl">&gt; ALTER USER miniflux WITH SUPERUSER;
</span></span></code></pre></div><p>使用以下指令创建数据库表，并创建用户：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ miniflux -c /etc/miniflux.conf -migrate
</span></span><span class="line"><span class="cl">$ miniflux -c /etc/miniflux.conf -create-admin
</span></span></code></pre></div><p>之后将<code>miniflux</code>切换回普通用户。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ sudo su - postgres
</span></span><span class="line"><span class="cl">$ psql
</span></span><span class="line"><span class="cl">&gt; ALTER USER miniflux WITH NOSUPERUSER;
</span></span></code></pre></div><p>最后重新启动<code>miniflux</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ sudo systemctl restart miniflux
</span></span></code></pre></div><h2 id="配置ssl可选">配置SSL（可选）</h2>
<p>使用nginx转发流量，可以将服务器套在Cloudflare下面。</p>
<p>编辑nginx的服务器配置文件，创建一个端口为443的服务器，并指定SSL key的位置：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">server {
</span></span><span class="line"><span class="cl">	listen 443 ssl default_server;
</span></span><span class="line"><span class="cl">	listen [::]:443 ssl default_server;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	server_name miniflux;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	ssl_certificate /path/to/server.crt;
</span></span><span class="line"><span class="cl">	ssl_certificate_key /path/to/server.key;
</span></span><span class="line"><span class="cl">	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	location / {
</span></span><span class="line"><span class="cl">    		proxy_pass  http://127.0.0.1:8080;
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></div><p>之后执行<code>sudo systemctl restart nginx</code>，访问服务器地址即可。</p>
<h2 id="others">Others</h2>
<p>Miniflux支持Fever和Google Reader等第三方服务，参考<a href="https://miniflux.app/docs/services.html">官方文档</a>，可以在服务器的设置-&gt;集成页面中配置，之后在别的设备中安装客户端，可以阅读订阅的文章，比网页版好用一些。</p>
<p><strong>STARRY-S</strong></p>]]></content:encoded>
    </item>
    
    <item>
      <title>电脑换壳——先马趣造</title>
      <link>https://blog.starry-s.moe/posts/2022/sama-quzao/</link>
      <pubDate>Sat, 26 Feb 2022 23:07:52 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2022/sama-quzao/</guid>
      <description>&lt;p&gt;年初的时候买了先马趣造这个机箱，买这个机箱的主要的原因是先马鲁班太大了，之前买先马鲁班的时候没有考虑到机箱便携性的问题，因为台式机压根就没啥便携性可言。&lt;/p&gt;
&lt;p&gt;然额因为咱今年上半年要去北京，觉得台式机留在家里不用有些不忍心，所以某天在网上闲逛的时候看到了这款机箱。看了很多网上的评测视频后才决定入手。&lt;/p&gt;
&lt;p&gt;现在距离刚入手这台机箱已经过去一个多月了，前一阵子一直在忙所以没时间更新博客，于是直到现在咱才把换机箱这件事更新到博客上。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>年初的时候买了先马趣造这个机箱，买这个机箱的主要的原因是先马鲁班太大了，之前买先马鲁班的时候没有考虑到机箱便携性的问题，因为台式机压根就没啥便携性可言。</p>
<p>然额因为咱今年上半年要去北京，觉得台式机留在家里不用有些不忍心，所以某天在网上闲逛的时候看到了这款机箱。看了很多网上的评测视频后才决定入手。</p>
<p>现在距离刚入手这台机箱已经过去一个多月了，前一阵子一直在忙所以没时间更新博客，于是直到现在咱才把换机箱这件事更新到博客上。</p>
<meting-js server="netease" type="song" id="1444211740" theme="#233333"></meting-js>
<h2 id="配置">配置</h2>
<p>CPU、主板、显卡、电源、硬盘、CPU散热以及内存这些用的还是上一篇“<a href="/posts/2021/build-desktop/">我们来组装一台电脑吧</a>”里面讲的配置。</p>
<p>除此之外咱买了一个直径8CM的小风扇(ARCTIC P8)，和一个超薄的1.5CM厚的风扇(ID-COOLING TF9125)。</p>
<p>配置方面没有太大改动，因为不打算装侧玻璃板，所以咱这次没有装RGB灯条。</p>
<h2 id="装机">装机</h2>
<p><img loading="lazy" src="images/6.jpg" alt="&amp;ldquo;最终的样子&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">最终的样子</p>
</p>
<p>装机过程还是很顺利的，因为新机箱体积比较小，可供操作的空间有限，所以花了很长时间才装完。一开始还比较担心显卡太长会不会和右侧的ATX电源产生冲突，
不过华硕B550重炮手的主板的PCIE4X16是在第二槽，第一槽是个PCIE1，所以装上显卡后没有影响到右侧全模组电源的电源线，
但是显卡的底部空间很小，没办法塞下一个正常厚度的风扇了。</p>
<hr>
<p><img loading="lazy" src="images/2.jpg" alt="&amp;ldquo;底部风扇&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">机箱底部</p>
</p>
<p>后来咱买了一个1.5cm厚的超薄风扇帮助显卡散热，不过风扇的尺寸咱买小了，本来应该买12cm的风扇咱买了个9cm的，到手后发现把风扇斜过来也能勉强固定住，于是就不打算换了。</p>
<hr>
<p><img loading="lazy" src="images/3.jpg" alt="顶部" />
<p style="margin-bottom: -0.8em;" class="image-title">顶部</p>
</p>
<p><img loading="lazy" src="images/5.jpg" alt="正面" />
<p style="margin-bottom: -0.8em;" class="image-title">正面</p>
</p>
<p>机箱顶部用的是之前买的先马冰洞静音风扇，虽然不支持PWM调速但是很静音。然后因为右侧的空间被ATX电源占用了所以顶部只能装一个风扇。</p>
<p>发热量大户实际上是显卡，CPU产生的热量很容易就能散开。所以所有风扇低速运行时，CPU和显卡的待机温度才比室温高十几度，只有玩游戏时CPU和显卡温度会高一些。</p>
<p>把所有零件全部装上之后，就没有空间装机械硬盘了，不过还好我只有一块2.5寸固态硬盘，勉强塞在了前面板背面的硬盘位中。</p>
<p>因为机箱空间有限，所以理线是个大难题，机箱几乎没有可理线的空间，所以我只好把一大团电线捆在一起。</p>
<h2 id="最终效果">最终效果</h2>
<p><img loading="lazy" src="images/7.jpg" alt="&amp;ldquo;最终效果&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">最终效果</p>
</p>
<p>白色机箱的确比黑色机箱好看很多，而且我反而觉得白色机箱更不容易脏一些，因为之前的黑色机箱手一摸就是油乎乎的大手印，但是这个白色机箱就没有。</p>
<p>在网上看到有人在机箱前面贴苹果贴纸的，不过咱找了一下高中时买的Arch Linux贴纸，贴到了机箱顶部。</p>
<p>趣造的机箱四面八方全是散热孔，所以就算咱把一个M-ATX机箱里面的所有东西全都塞到了这个小盒子里面，温度也并没有上升。要说影响的话，就是没有可以塞机械硬盘和摆手办的地方了（</p>
<p>如果想塞机械硬盘的话，我得把我的ATX电源换成SFX电源。然后把CPU散热换成水冷或者下压式散热之类的，才能倒出空间装机械硬盘。不过咱买这个机箱目的就是为了能放到行李箱里面拉走，所以装机械硬盘的话容易在路上颠坏了。而固态就没这个担心。</p>
<p>然后就是个人感觉先马趣造这机箱设计得还蛮不错的，机箱的所有地方都能拆，装机的时候可以先把机箱拆得只剩下一个铁架子，所以实际上装机没有增添太多难度。就是理线费劲了一些。全模组电源自带的模组线是真的硬。</p>
<p>因为机箱小，去北京实习的时候咱买了个28寸的超大行李箱，于是这个行李箱在塞下这个机箱之后还能塞很多衣服。总之肯定是不会出现像上次那样坐高铁我一个人把机箱和显示器从北京扛回老家的情况了。</p>
<p><strong>STARRY-S</strong></p>]]></content:encoded>
    </item>
    
    <item>
      <title>Hello 2022</title>
      <link>https://blog.starry-s.moe/posts/2022/hello-2022/</link>
      <pubDate>Sun, 02 Jan 2022 01:09:24 +0800</pubDate>
      
      <guid>https://blog.starry-s.moe/posts/2022/hello-2022/</guid>
      <description>&lt;p&gt;又到了写年终总结的时候了，说实话今年发生了好多好多好多的事情，我可能要写很久才能把这些事全写完。然而我文笔不好，回忆事情容易写成流水帐，所以不重要的事情我只好简短略过一下。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>又到了写年终总结的时候了，说实话今年发生了好多好多好多的事情，我可能要写很久才能把这些事全写完。然而我文笔不好，回忆事情容易写成流水帐，所以不重要的事情我只好简短略过一下。</p>
<meting-js server="netease" type="song" id="33211167" theme="#233333"></meting-js>
<hr>
<h2 id="gaming">Gaming</h2>
<p>容我翻一下去年的Todo List……</p>
<p>今年在PS4上完成了三刷尼尔：机械纪元，全程没开简单模式和自动芯片，做完了大多数支线，然后除了DLC里的难度极高的斗兽场没有打，其他的DLC剧情全过了一遍，还看了几遍柏拉图的记忆。
顺便在B站会员购上买了两个尼尔的八音盒，曲子分别是<em>Kaine</em>和<em>Weight of the world</em>，尽管八音盒只能无限循环一小段，有种洗脑循环的感觉，但是偶尔听一下还是蛮好听的。
然后我应该是去年就把尼尔原著的短话就看完了，今年看的少年寄叶，不过只看了一半还没读完。长话因为和主线剧情一样所以我买来翻了几页就放起来了。
不得不说日本的游戏剧情支线真的特别多，全打完的话非常的肝，而且很费时间，不过发现了新的隐藏剧情还是很开心的。</p>
<p>然后咱还在PS4上斥巨资买了正版的尼尔：伪装者，也就是机械纪元的前作（钱包在滴血），打通了一周目和二周目，然后因为时间原因加上后面剧情都是重复的，就没玩下去。尼尔：伪装者的游戏内容比机械纪元要少很多，而且可玩性比机械纪元差很多（本来机械纪元的游戏体验就不怎么好），所以这也是我玩不下去的原因之一。</p>
<p>然后上半年的时候通关了传送门2单人模式，之前蛮期待的Nier:Reincarnation手游下载后看了几眼感觉不感兴趣没继续玩下去。然后月姬重置版只在日本发售，其他区服买不到，因为懒得换区加上不会日语，所以玩月姬的计划也被我抛在脑后。</p>
<p>不得不承认咱的大部分时间都拿去打守望先锋了，这游戏玩上就有种停不下来的感觉，所以在守望上花了好多时间，然后经常在竞技模式里被气得卸游戏，过两天又想玩然后把它下载回来……</p>
<p>其余时间还玩了一阵子Minecraft，完成了非常大的工程，在原点空置域修了全物品分类机，不过比较气愤的就是1.17新增了好多新的物品，我旧的全物品分类机装不下，然后1.18又在Y0至-64的高度区域生成新的洞穴，所以我之前的空置域又白炸了，所以我还在继续玩1.16.4，没有升级游戏版本。</p>
<p>这么一回忆起来，怎么有一种我这一年的时间全荒废在打游戏的错觉……</p>
<h2 id="learning">Learning</h2>
<p>上面写的游戏经历只不过是一小部分而已，咱在今年买了Kindle PaperWhite4，看了《自控力》、《黑客与画家》这两本书，还二刷了《空之境界》原著，之后就是用Kindle看了一些技术类书的样章，不过在Kindle上有些书的代码是以图片的形式显示的，所以阅览效果并不好。</p>
<p>咱还买了好多纸质书，都是技术相关的，因为大多都只是简单翻了几页，所以就不列举名字了，今年要是有时间的话就试着看几本吧。</p>
<p>技术方面的话，咱今年靠着自己的努力尝试着写了一些程序，软件工程的大作业为了赶时间，用现学的前端知识和JS写了一个“能用”的问卷调查系统。不过后来我实在看不下去自己当时写的代码太不规范了，所以对代码进行了简单的整理和优化，顺便提高了一些安全性，不过和那些能稳定运行的大型软件相比肯定还是差远了。</p>
<p>然后就是自学了点现代OpenGL，选了学校的计算机图形学选修课，不过老师讲课时用的老版本的GLUT进行画图，然后别的学生基本上就是上网找代码抄一下就交作业了，他们有些人甚至连透视都不知道是什么。</p>
<p>所以我当时花了好多时间学OpenGL的矩阵运算和渲染方面的东西，这东西入门的门槛还真是挺高的。然后简单的了解了一下核心模式写Shader之类的操作，不过时间比较紧碰撞检测那些东西我就没学，所以最后给老师交作业时写了个比较简陋的世界模型，里面放了一个大正方形当作地面，然后渲染了几个正方体当作物体，贴了我的世界的材质…… 没弄碰撞检测和物理引擎之类的东西，用纯C语言写真的太难了。</p>
<p>除此之外，咱学了一点GTK和Qt，用Qt写了软件工程结对编程的作业，然后用GTK写了个很简易的将多条视频合并成一个视频的小程序，挺多部分都是一边抄别人的代码一边学怎么写的，因为自己能力并不强，写的东西也都是勉强能用的程度，然后现在一回忆发现好多东西又都忘掉了。</p>
<h2 id="working">Working</h2>
<p>大三下半年我花了好多时间在网上找实习工作，然后因为我几乎没有准备就去面试，所以被问到算法题或者一些需要靠刷题和背书才能学会的知识时我几乎全答不上来，所以我挂了好多面试。</p>
<p>额……因为我在此之前对秋招和春招之类的没有啥概念，我也没有找学长问这些经验，只靠着自己听老师和别的同学随口说的内容，现在回想起来当时自己纯粹是什么都不懂的状态在瞎找工作，也几乎没怎么考虑待遇和工作内容这类的十分现实的问题，在所有面试全都是被刷的情况下我去了最后一个同意我去实习的公司。</p>
<p>我还记得我第一次面试时紧张得不得了，然后因为什么都没准备所以面试官问我所有的东西都答不上来，面试结束后就觉得我这种表现对面试官很不尊重。</p>
<p>所以别问我实习和找工作相关的东西，我没办法给你任何有价值的参考意见，你看我这么胡扯的做法就能体现出来。</p>
<p>所以要说结果的话，我在实习的时候放弃了继续工作的打算，开始向更多的实际问题思考，国庆假期回到家后，在研究生考试报名截止前两天报了本校的研究生考试，在距离考试不到两个月的时候辞职，12月初回学校，预习考试内容。</p>
<p>很明显，我写这些东西的时候，已经考完了今年的研究生考试，结果可显而知，我得二战了。</p>
<p>（亏我还能如此淡定的说出这些离大谱的东西）</p>
<p>让我以一名阅读这些文字的访客的角度思考一下…… 好了别骂了别骂了，再骂孩子就吓得以后啥都不敢干了，我做了好多的心理准备才敢把这些事情写出来，要是有人骂的话我肯定忍不住要删掉的，毕竟万事开头难，咱已经吃过好多苦头了。</p>
<p>我这只不过是一个什么都不懂的学生想凭借他的努力找到第一个实习工作的比较客观的真实反映而已，你看B乎上那些新编的故事有时候不能反映自己真实的情况，我承认我有些方法确实做得不够成熟……</p>
<p>不过，这次实习我还是有很丰富的收获的，很幸运，我实习的公司对我很好，尽管任务量比较大，让实习生直接进行生产项目的开发，直接解决客户提的问题，但这些都还在能接受的范围内。
可能是因为咱刚接触这些领域吧，对这些还有一些新鲜感。</p>
<p>我用实习的工资组装了一个台式机，就是之前博客里面写的那台电脑，当初从北京回家时因为快递拒收电脑，所以我扛着装电脑机箱和显示器的箱子坐高铁回家，别提有多狼狈了。</p>
<p>在北京的这三个月的生活我可以用惨来形容，不用多说，你看我上面写的这些就能想到为什么惨了。</p>
<p>只不过我没有在之前的几篇博客中提到这些事情而已，因为咱不想把技术类文章和这些琐事混到一起，说出来又解决不了什么实际问题。</p>
<hr>
<p>一提到实习这段经历就不由自主的把气氛搞沉重了，通过三个月的实习对北京这个城市有了一个新的认识，不过从自己眼中看到的事物并非是全面的，毕竟北京城太大了。</p>
<p>因为缺乏生活经验，在北京自己一个人的生活可以用狼狈来形容。北京是个漂泊感很重的城市，在租房的那段时间几乎每天早晨起床时都会感受到一股强烈的孤独感，有一段时间每天都笼罩在几乎窒息一般的孤独当中，这可能是我最不愿回忆的一段经历了。</p>
<p>中秋节假期前一天晚上想坐高铁回家，但是新修的北京朝阳站还没通地铁，节假日前一天晚上堵车非常严重，当时为了赶高铁我愣是从朝阳公园北门附近下公交车拎着公司发的中秋节礼品跑了4公里，不过还是没赶上那天的最后一趟高铁。</p>
<p>国庆的时候抽时间回学校取我剩下的一些东西，回去的时候站在沈阳地铁上忍不住开哭。</p>
<p>实习工作的时候每天都得长时间盯着电脑好几个小时没办法休息，很快我就发现自己起了很重的黑眼圈，有一天早晨坐地铁去公司的路上突然低血糖眼冒金星，到公司后头特别疼，于是不得不又请假，睡了一下午觉后身体十分难受，于是又请了一天假连着周末一起休息。</p>
<p>我其实很不喜欢那种加班的时间去做无意义的摸鱼的事情，明明到了下班时间该收工走人了，却非要在岗位上刷一会手机赖着不走。上班的时间该干什么就干什么，而不是把加班当作一种很光彩的事，给老板创造价值可不是这么创造的，一个人每天能保持的比较旺盛的精力只有几个小时而已，而且人是需要一定时间进行思考的，真实的情况是程序员有时候一天的时间都很难写出来几十行优质的代码的，让一个人全神贯注十多个小时的干活这种事怎么可能呢？只不过是限制人身和思维的自由罢了，这样下去早晚会崩溃的，所以这也就是为什么现在有好多人只是为了完成目的而写代码的原因吧，他们几乎不在乎代码的完整性和可读性之类的东西，实现的功能都是复制粘贴东拼西凑搞出来的，还把代码行数作为编程能力的衡量标准，而且他们甚至连几本专业类的书籍都不愿意去看，嫌这种阅读书籍太浪费时间，而为了所谓的效率去看那些质量低、表面上是以教学为目的而实际上是推销自家编程课程的视频，你看现在随便在某视频平台一搜这类的关键字，有好多视频不都是这样吗？视频一直在推销公众号，评论区置顶了一堆群号和网盘链接，还真有很多人信。</p>
<p>有一些人，看一点网课视频会调几个依赖库就可以写出很多绚丽的功能出来，报一个培训辅导班学几个月就能找工作，而做程序员的目的只不过是因为挣的钱多。所以现在研发人员的地位被搞得越来越低，甚至一说是程序员都被别人瞧不起。有的企业管理人员以为只要招一个会写代码的“农民工”，实现功能就够用了……</p>
<p>算了不说了，果然变得过于敏感并不是什么好事，就算是选择考研也很难摆脱现如今的许多事实，撑不住了就只能开摆了。</p>
<p>所以以上算是我一部分的考研的原因吧。辞职后的那段时间就算英语和政治能勉强速成一下，专业课几乎裸考，但是数学是真没复习完，更何况今年题变难了许多。</p>
<p>不过回学校后内心还是十分沉重的，自己折腾了这么久落反而落得了这样一个结果，我还要和身边同学解释清楚为什么不继续找工作了，还要找些理由解释为什么考研。</p>
<p>在学校待了三年有感情了，在离开学校后才意识到这一点。学校的老师在某些方面其实对我们学生非常好，给了学生很多不错的条件。缺点有是有，但是没必要总把那些问题挂在嘴边成天抱怨。</p>
<h2 id="others">Others</h2>
<p>换个话题吧，今年抽时间看了狼与香辛料，然后因为实在等不起国内的引进所以在网上找了资源看了FSN HF3。
Fate的HF线细节很多，音乐也很好听，剧情的节奏把握得也很不错，身为月厨的我看得十分满意。</p>
<p>咱暑假的时候在B站会员购上预购了世嘉的卫宫家今天的饭的呆毛的手办，之后斥巨资预购了寿屋的两仪式再版手办。</p>
<p>说实话真没想到能在2021年买到再版的空之境界的手办。</p>
<p>11月底的时候付的尾款，组装后拍了几张照片。</p>
<p><img loading="lazy" src="images/IMG_6864-1.jpg" alt="&amp;ldquo;两仪式&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">两仪式</p>
</p>
<p><img loading="lazy" src="images/IMG_6871.jpg" alt="&amp;ldquo;呆毛王&amp;rdquo;" />
<p style="margin-bottom: -0.8em;" class="image-title">呆毛王</p>
</p>
<hr>
<p>以后不打算把太多时间花在游戏上了，至少我不想再像以前那样玩守望先锋了，其他比较缓和的游戏还是可以玩的。
之前在我的腾讯云学生版云主机上搭了一个小型的Minecraft服务器，主要是想和我的同学一起联机生存，年底进服务器发现他们盖了好多建筑，肥肠开心。</p>
<p>其他游戏是真玩不下去了，以后还是得注重身体，从疫情开始到现在体重飙升至200斤了，最近经常熬夜搞得身体很不好，所以以后还是得注重身体。</p>
<p>2022年咱可能要面临更多的问题，我暂时还有些不敢去想。还有半年就要大学毕业，然后还有好多我从来没经历过的事情需要去面对。</p>
<p>所以还是尽可能的保持乐观吧，悲观解决不了任何实际问题。</p>
<p>就写这么多吧，要是以后还想到了哪些东西再来补充。</p>
<h2 id="后续">后续</h2>
<p>在年终总结里加后续总显得有些怪怪的，但是最近这些事情我还是写到2021年的年终总结里吧，后续有什么事我可以再新开一篇文章（我是实在不想把2022年初发生的事情写到22年的年终总结里了）。</p>
<p>事情就是，咱拿到了北京SUSE实习的offer。因为很中意这份工作，所以咱做了很长时间的心理准备，最后决定大四下学期回北京，继续租房子。</p>
<p>嗯，要不是SUSE，俺是绝对不会再回北京的，别的公司联系我的话，我肯定会以考研为理由拒了。</p>
<p>SUSE的面试非常的顺利，既是出乎意料又算是情理之中吧。</p>
<p>所以我又一次花了很长时间，和学校的老师解释，和我以前的室友和新室友解释下学期我不回学校了。</p>
<p>然后我又花了很长时间和家人解释，又一次的拿出很大的资金到北京来租房子。</p>
<p>然后刚到北京就听说辽宁新出了许多的本土确诊病例……</p>
<p>这次租房我坚决不自己整租了，首先是租不起，再就是自己一个人真的很孤独。</p>
<p>然后就是，俺还没入职，所以后续的事我现在也没办法写。</p>
<p>就这些。</p>
<p><strong>STARRY-S</strong></p>]]></content:encoded>
    </item>
    
  </channel>
</rss>
